// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: olama.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_olama_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_olama_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_olama_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_olama_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[58]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_olama_2eproto;
namespace olama {
class AddAliasRequest;
class AddAliasRequestDefaultTypeInternal;
extern AddAliasRequestDefaultTypeInternal _AddAliasRequest_default_instance_;
class AliasItem;
class AliasItemDefaultTypeInternal;
extern AliasItemDefaultTypeInternal _AliasItem_default_instance_;
class CollectionConf;
class CollectionConfDefaultTypeInternal;
extern CollectionConfDefaultTypeInternal _CollectionConf_default_instance_;
class CollectionConf_FieldMetasEntry_DoNotUse;
class CollectionConf_FieldMetasEntry_DoNotUseDefaultTypeInternal;
extern CollectionConf_FieldMetasEntry_DoNotUseDefaultTypeInternal _CollectionConf_FieldMetasEntry_DoNotUse_default_instance_;
class CollectionConf_OptionsEntry_DoNotUse;
class CollectionConf_OptionsEntry_DoNotUseDefaultTypeInternal;
extern CollectionConf_OptionsEntry_DoNotUseDefaultTypeInternal _CollectionConf_OptionsEntry_DoNotUse_default_instance_;
class CollectionState;
class CollectionStateDefaultTypeInternal;
extern CollectionStateDefaultTypeInternal _CollectionState_default_instance_;
class CreateCollectionRequest;
class CreateCollectionRequestDefaultTypeInternal;
extern CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
class CreateCollectionRequest_IndexesEntry_DoNotUse;
class CreateCollectionRequest_IndexesEntry_DoNotUseDefaultTypeInternal;
extern CreateCollectionRequest_IndexesEntry_DoNotUseDefaultTypeInternal _CreateCollectionRequest_IndexesEntry_DoNotUse_default_instance_;
class CreateCollectionResponse;
class CreateCollectionResponseDefaultTypeInternal;
extern CreateCollectionResponseDefaultTypeInternal _CreateCollectionResponse_default_instance_;
class DatabaseItem;
class DatabaseItemDefaultTypeInternal;
extern DatabaseItemDefaultTypeInternal _DatabaseItem_default_instance_;
class DatabaseRequest;
class DatabaseRequestDefaultTypeInternal;
extern DatabaseRequestDefaultTypeInternal _DatabaseRequest_default_instance_;
class DatabaseResponse;
class DatabaseResponseDefaultTypeInternal;
extern DatabaseResponseDefaultTypeInternal _DatabaseResponse_default_instance_;
class DatabaseResponse_InfoEntry_DoNotUse;
class DatabaseResponse_InfoEntry_DoNotUseDefaultTypeInternal;
extern DatabaseResponse_InfoEntry_DoNotUseDefaultTypeInternal _DatabaseResponse_InfoEntry_DoNotUse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class DescribeCollectionRequest;
class DescribeCollectionRequestDefaultTypeInternal;
extern DescribeCollectionRequestDefaultTypeInternal _DescribeCollectionRequest_default_instance_;
class DescribeCollectionResponse;
class DescribeCollectionResponseDefaultTypeInternal;
extern DescribeCollectionResponseDefaultTypeInternal _DescribeCollectionResponse_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_FieldsEntry_DoNotUse;
class Document_FieldsEntry_DoNotUseDefaultTypeInternal;
extern Document_FieldsEntry_DoNotUseDefaultTypeInternal _Document_FieldsEntry_DoNotUse_default_instance_;
class DropCollectionRequest;
class DropCollectionRequestDefaultTypeInternal;
extern DropCollectionRequestDefaultTypeInternal _DropCollectionRequest_default_instance_;
class DropCollectionResponse;
class DropCollectionResponseDefaultTypeInternal;
extern DropCollectionResponseDefaultTypeInternal _DropCollectionResponse_default_instance_;
class EmbeddingExtraInfo;
class EmbeddingExtraInfoDefaultTypeInternal;
extern EmbeddingExtraInfoDefaultTypeInternal _EmbeddingExtraInfo_default_instance_;
class EmbeddingParams;
class EmbeddingParamsDefaultTypeInternal;
extern EmbeddingParamsDefaultTypeInternal _EmbeddingParams_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class FieldMeta;
class FieldMetaDefaultTypeInternal;
extern FieldMetaDefaultTypeInternal _FieldMeta_default_instance_;
class Field_StringArray;
class Field_StringArrayDefaultTypeInternal;
extern Field_StringArrayDefaultTypeInternal _Field_StringArray_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class GetAliasRequest;
class GetAliasRequestDefaultTypeInternal;
extern GetAliasRequestDefaultTypeInternal _GetAliasRequest_default_instance_;
class GetAliasResponse;
class GetAliasResponseDefaultTypeInternal;
extern GetAliasResponseDefaultTypeInternal _GetAliasResponse_default_instance_;
class IndexColumn;
class IndexColumnDefaultTypeInternal;
extern IndexColumnDefaultTypeInternal _IndexColumn_default_instance_;
class IndexParams;
class IndexParamsDefaultTypeInternal;
extern IndexParamsDefaultTypeInternal _IndexParams_default_instance_;
class IndexStatus;
class IndexStatusDefaultTypeInternal;
extern IndexStatusDefaultTypeInternal _IndexStatus_default_instance_;
class ListCollectionsRequest;
class ListCollectionsRequestDefaultTypeInternal;
extern ListCollectionsRequestDefaultTypeInternal _ListCollectionsRequest_default_instance_;
class ListCollectionsResponse;
class ListCollectionsResponseDefaultTypeInternal;
extern ListCollectionsResponseDefaultTypeInternal _ListCollectionsResponse_default_instance_;
class QueryCond;
class QueryCondDefaultTypeInternal;
extern QueryCondDefaultTypeInternal _QueryCond_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class RebuildIndexRequest;
class RebuildIndexRequestDefaultTypeInternal;
extern RebuildIndexRequestDefaultTypeInternal _RebuildIndexRequest_default_instance_;
class RebuildIndexResponse;
class RebuildIndexResponseDefaultTypeInternal;
extern RebuildIndexResponseDefaultTypeInternal _RebuildIndexResponse_default_instance_;
class RemoveAliasRequest;
class RemoveAliasRequestDefaultTypeInternal;
extern RemoveAliasRequestDefaultTypeInternal _RemoveAliasRequest_default_instance_;
class SearchCond;
class SearchCondDefaultTypeInternal;
extern SearchCondDefaultTypeInternal _SearchCond_default_instance_;
class SearchParams;
class SearchParamsDefaultTypeInternal;
extern SearchParamsDefaultTypeInternal _SearchParams_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResult;
class SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class Shard;
class ShardDefaultTypeInternal;
extern ShardDefaultTypeInternal _Shard_default_instance_;
class ShardCollectionState;
class ShardCollectionStateDefaultTypeInternal;
extern ShardCollectionStateDefaultTypeInternal _ShardCollectionState_default_instance_;
class ShardConf;
class ShardConfDefaultTypeInternal;
extern ShardConfDefaultTypeInternal _ShardConf_default_instance_;
class ShardState;
class ShardStateDefaultTypeInternal;
extern ShardStateDefaultTypeInternal _ShardState_default_instance_;
class TTLConfig;
class TTLConfigDefaultTypeInternal;
extern TTLConfigDefaultTypeInternal _TTLConfig_default_instance_;
class TruncateCollectionRequest;
class TruncateCollectionRequestDefaultTypeInternal;
extern TruncateCollectionRequestDefaultTypeInternal _TruncateCollectionRequest_default_instance_;
class TruncateCollectionResponse;
class TruncateCollectionResponseDefaultTypeInternal;
extern TruncateCollectionResponseDefaultTypeInternal _TruncateCollectionResponse_default_instance_;
class UpdateAliasResponse;
class UpdateAliasResponseDefaultTypeInternal;
extern UpdateAliasResponseDefaultTypeInternal _UpdateAliasResponse_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
class UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
class UpsertRequest;
class UpsertRequestDefaultTypeInternal;
extern UpsertRequestDefaultTypeInternal _UpsertRequest_default_instance_;
class UpsertResponse;
class UpsertResponseDefaultTypeInternal;
extern UpsertResponseDefaultTypeInternal _UpsertResponse_default_instance_;
class VectorArray;
class VectorArrayDefaultTypeInternal;
extern VectorArrayDefaultTypeInternal _VectorArray_default_instance_;
}  // namespace olama
PROTOBUF_NAMESPACE_OPEN
template<> ::olama::AddAliasRequest* Arena::CreateMaybeMessage<::olama::AddAliasRequest>(Arena*);
template<> ::olama::AliasItem* Arena::CreateMaybeMessage<::olama::AliasItem>(Arena*);
template<> ::olama::CollectionConf* Arena::CreateMaybeMessage<::olama::CollectionConf>(Arena*);
template<> ::olama::CollectionConf_FieldMetasEntry_DoNotUse* Arena::CreateMaybeMessage<::olama::CollectionConf_FieldMetasEntry_DoNotUse>(Arena*);
template<> ::olama::CollectionConf_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::olama::CollectionConf_OptionsEntry_DoNotUse>(Arena*);
template<> ::olama::CollectionState* Arena::CreateMaybeMessage<::olama::CollectionState>(Arena*);
template<> ::olama::CreateCollectionRequest* Arena::CreateMaybeMessage<::olama::CreateCollectionRequest>(Arena*);
template<> ::olama::CreateCollectionRequest_IndexesEntry_DoNotUse* Arena::CreateMaybeMessage<::olama::CreateCollectionRequest_IndexesEntry_DoNotUse>(Arena*);
template<> ::olama::CreateCollectionResponse* Arena::CreateMaybeMessage<::olama::CreateCollectionResponse>(Arena*);
template<> ::olama::DatabaseItem* Arena::CreateMaybeMessage<::olama::DatabaseItem>(Arena*);
template<> ::olama::DatabaseRequest* Arena::CreateMaybeMessage<::olama::DatabaseRequest>(Arena*);
template<> ::olama::DatabaseResponse* Arena::CreateMaybeMessage<::olama::DatabaseResponse>(Arena*);
template<> ::olama::DatabaseResponse_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::olama::DatabaseResponse_InfoEntry_DoNotUse>(Arena*);
template<> ::olama::DeleteRequest* Arena::CreateMaybeMessage<::olama::DeleteRequest>(Arena*);
template<> ::olama::DeleteResponse* Arena::CreateMaybeMessage<::olama::DeleteResponse>(Arena*);
template<> ::olama::DescribeCollectionRequest* Arena::CreateMaybeMessage<::olama::DescribeCollectionRequest>(Arena*);
template<> ::olama::DescribeCollectionResponse* Arena::CreateMaybeMessage<::olama::DescribeCollectionResponse>(Arena*);
template<> ::olama::Document* Arena::CreateMaybeMessage<::olama::Document>(Arena*);
template<> ::olama::Document_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::olama::Document_FieldsEntry_DoNotUse>(Arena*);
template<> ::olama::DropCollectionRequest* Arena::CreateMaybeMessage<::olama::DropCollectionRequest>(Arena*);
template<> ::olama::DropCollectionResponse* Arena::CreateMaybeMessage<::olama::DropCollectionResponse>(Arena*);
template<> ::olama::EmbeddingExtraInfo* Arena::CreateMaybeMessage<::olama::EmbeddingExtraInfo>(Arena*);
template<> ::olama::EmbeddingParams* Arena::CreateMaybeMessage<::olama::EmbeddingParams>(Arena*);
template<> ::olama::Field* Arena::CreateMaybeMessage<::olama::Field>(Arena*);
template<> ::olama::FieldMeta* Arena::CreateMaybeMessage<::olama::FieldMeta>(Arena*);
template<> ::olama::Field_StringArray* Arena::CreateMaybeMessage<::olama::Field_StringArray>(Arena*);
template<> ::olama::Filter* Arena::CreateMaybeMessage<::olama::Filter>(Arena*);
template<> ::olama::GetAliasRequest* Arena::CreateMaybeMessage<::olama::GetAliasRequest>(Arena*);
template<> ::olama::GetAliasResponse* Arena::CreateMaybeMessage<::olama::GetAliasResponse>(Arena*);
template<> ::olama::IndexColumn* Arena::CreateMaybeMessage<::olama::IndexColumn>(Arena*);
template<> ::olama::IndexParams* Arena::CreateMaybeMessage<::olama::IndexParams>(Arena*);
template<> ::olama::IndexStatus* Arena::CreateMaybeMessage<::olama::IndexStatus>(Arena*);
template<> ::olama::ListCollectionsRequest* Arena::CreateMaybeMessage<::olama::ListCollectionsRequest>(Arena*);
template<> ::olama::ListCollectionsResponse* Arena::CreateMaybeMessage<::olama::ListCollectionsResponse>(Arena*);
template<> ::olama::QueryCond* Arena::CreateMaybeMessage<::olama::QueryCond>(Arena*);
template<> ::olama::QueryRequest* Arena::CreateMaybeMessage<::olama::QueryRequest>(Arena*);
template<> ::olama::QueryResponse* Arena::CreateMaybeMessage<::olama::QueryResponse>(Arena*);
template<> ::olama::RebuildIndexRequest* Arena::CreateMaybeMessage<::olama::RebuildIndexRequest>(Arena*);
template<> ::olama::RebuildIndexResponse* Arena::CreateMaybeMessage<::olama::RebuildIndexResponse>(Arena*);
template<> ::olama::RemoveAliasRequest* Arena::CreateMaybeMessage<::olama::RemoveAliasRequest>(Arena*);
template<> ::olama::SearchCond* Arena::CreateMaybeMessage<::olama::SearchCond>(Arena*);
template<> ::olama::SearchParams* Arena::CreateMaybeMessage<::olama::SearchParams>(Arena*);
template<> ::olama::SearchRequest* Arena::CreateMaybeMessage<::olama::SearchRequest>(Arena*);
template<> ::olama::SearchResponse* Arena::CreateMaybeMessage<::olama::SearchResponse>(Arena*);
template<> ::olama::SearchResult* Arena::CreateMaybeMessage<::olama::SearchResult>(Arena*);
template<> ::olama::Shard* Arena::CreateMaybeMessage<::olama::Shard>(Arena*);
template<> ::olama::ShardCollectionState* Arena::CreateMaybeMessage<::olama::ShardCollectionState>(Arena*);
template<> ::olama::ShardConf* Arena::CreateMaybeMessage<::olama::ShardConf>(Arena*);
template<> ::olama::ShardState* Arena::CreateMaybeMessage<::olama::ShardState>(Arena*);
template<> ::olama::TTLConfig* Arena::CreateMaybeMessage<::olama::TTLConfig>(Arena*);
template<> ::olama::TruncateCollectionRequest* Arena::CreateMaybeMessage<::olama::TruncateCollectionRequest>(Arena*);
template<> ::olama::TruncateCollectionResponse* Arena::CreateMaybeMessage<::olama::TruncateCollectionResponse>(Arena*);
template<> ::olama::UpdateAliasResponse* Arena::CreateMaybeMessage<::olama::UpdateAliasResponse>(Arena*);
template<> ::olama::UpdateRequest* Arena::CreateMaybeMessage<::olama::UpdateRequest>(Arena*);
template<> ::olama::UpdateResponse* Arena::CreateMaybeMessage<::olama::UpdateResponse>(Arena*);
template<> ::olama::UpsertRequest* Arena::CreateMaybeMessage<::olama::UpsertRequest>(Arena*);
template<> ::olama::UpsertResponse* Arena::CreateMaybeMessage<::olama::UpsertResponse>(Arena*);
template<> ::olama::VectorArray* Arena::CreateMaybeMessage<::olama::VectorArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace olama {

enum ShardDataState : int {
  SHARD_INDEX_READY = 0,
  SHARD_INDEX_TRAINING = 1,
  SHARD_INDEX_BUILDING = 2,
  SHARD_INDEX_FAILED = 3,
  ShardDataState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShardDataState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShardDataState_IsValid(int value);
constexpr ShardDataState ShardDataState_MIN = SHARD_INDEX_READY;
constexpr ShardDataState ShardDataState_MAX = SHARD_INDEX_FAILED;
constexpr int ShardDataState_ARRAYSIZE = ShardDataState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShardDataState_descriptor();
template<typename T>
inline const std::string& ShardDataState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShardDataState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShardDataState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShardDataState_descriptor(), enum_t_value);
}
inline bool ShardDataState_Parse(
    const std::string& name, ShardDataState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShardDataState>(
    ShardDataState_descriptor(), name, value);
}
enum DataType : int {
  BASE = 0,
  AI_DOC = 1,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = BASE;
constexpr DataType DataType_MAX = AI_DOC;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum IndexMetricType : int {
  INDEX_METRIC_INNER_PRODUCT = 0,
  INDEX_METRIC_L2 = 1,
  INDEX_METRIC_COSINE = 2,
  INDEX_METRIC_HAMMING = 3,
  IndexMetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IndexMetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IndexMetricType_IsValid(int value);
constexpr IndexMetricType IndexMetricType_MIN = INDEX_METRIC_INNER_PRODUCT;
constexpr IndexMetricType IndexMetricType_MAX = INDEX_METRIC_HAMMING;
constexpr int IndexMetricType_ARRAYSIZE = IndexMetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexMetricType_descriptor();
template<typename T>
inline const std::string& IndexMetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexMetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexMetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexMetricType_descriptor(), enum_t_value);
}
inline bool IndexMetricType_Parse(
    const std::string& name, IndexMetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexMetricType>(
    IndexMetricType_descriptor(), name, value);
}
enum IndexEngineType : int {
  ENGINE_FAISS_VECTOR = 0,
  ENGINE_FAISS_BINARY = 1,
  ENGINE_HNSWLIB = 3,
  IndexEngineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IndexEngineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IndexEngineType_IsValid(int value);
constexpr IndexEngineType IndexEngineType_MIN = ENGINE_FAISS_VECTOR;
constexpr IndexEngineType IndexEngineType_MAX = ENGINE_HNSWLIB;
constexpr int IndexEngineType_ARRAYSIZE = IndexEngineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexEngineType_descriptor();
template<typename T>
inline const std::string& IndexEngineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexEngineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexEngineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexEngineType_descriptor(), enum_t_value);
}
inline bool IndexEngineType_Parse(
    const std::string& name, IndexEngineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexEngineType>(
    IndexEngineType_descriptor(), name, value);
}
enum FieldType : int {
  TYPE_STRING = 0,
  TYPE_ARRAY = 1,
  TYPE_UINT64 = 2,
  FieldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FieldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = TYPE_STRING;
constexpr FieldType FieldType_MAX = TYPE_UINT64;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template<typename T>
inline const std::string& FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldType_descriptor(), enum_t_value);
}
inline bool FieldType_Parse(
    const std::string& name, FieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
enum FieldElementType : int {
  ELEMENT_TYPE_STRING = 0,
  FieldElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FieldElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FieldElementType_IsValid(int value);
constexpr FieldElementType FieldElementType_MIN = ELEMENT_TYPE_STRING;
constexpr FieldElementType FieldElementType_MAX = ELEMENT_TYPE_STRING;
constexpr int FieldElementType_ARRAYSIZE = FieldElementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldElementType_descriptor();
template<typename T>
inline const std::string& FieldElementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldElementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldElementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldElementType_descriptor(), enum_t_value);
}
inline bool FieldElementType_Parse(
    const std::string& name, FieldElementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldElementType>(
    FieldElementType_descriptor(), name, value);
}
// ===================================================================

class Document_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_FieldsEntry_DoNotUse, 
    std::string, ::olama::Field,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_FieldsEntry_DoNotUse, 
    std::string, ::olama::Field,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Document_FieldsEntry_DoNotUse();
  Document_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_FieldsEntry_DoNotUse& other);
  static const Document_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_FieldsEntry_DoNotUse*>(&_Document_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "olama.Document.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Document :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const final {
    return CreateMaybeMessage<Document>(nullptr);
  }

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.Document";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kFieldsFieldNumber = 4,
    kIdFieldNumber = 1,
    kFromPeerFieldNumber = 6,
    kDocInfoFieldNumber = 9,
    kIndexIdFieldNumber = 5,
    kScoreFieldNumber = 3,
    kShardIdxFieldNumber = 7,
    kVectorOffsetFieldNumber = 8,
  };
  // repeated float vector = 2;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  float _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vector() const;
  void _internal_add_vector(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vector();
  public:
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector();

  // map<string, .olama.Field> fields = 4;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >*
      mutable_fields();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string from_peer = 6;
  void clear_from_peer();
  const std::string& from_peer() const;
  void set_from_peer(const std::string& value);
  void set_from_peer(std::string&& value);
  void set_from_peer(const char* value);
  void set_from_peer(const char* value, size_t size);
  std::string* mutable_from_peer();
  std::string* release_from_peer();
  void set_allocated_from_peer(std::string* from_peer);
  private:
  const std::string& _internal_from_peer() const;
  void _internal_set_from_peer(const std::string& value);
  std::string* _internal_mutable_from_peer();
  public:

  // bytes doc_info = 9;
  void clear_doc_info();
  const std::string& doc_info() const;
  void set_doc_info(const std::string& value);
  void set_doc_info(std::string&& value);
  void set_doc_info(const char* value);
  void set_doc_info(const void* value, size_t size);
  std::string* mutable_doc_info();
  std::string* release_doc_info();
  void set_allocated_doc_info(std::string* doc_info);
  private:
  const std::string& _internal_doc_info() const;
  void _internal_set_doc_info(const std::string& value);
  std::string* _internal_mutable_doc_info();
  public:

  // uint64 index_id = 5;
  void clear_index_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_id() const;
  void set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_id() const;
  void _internal_set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float score = 3;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // int32 shard_idx = 7;
  void clear_shard_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx() const;
  void set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_idx() const;
  void _internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 vector_offset = 8;
  void clear_vector_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 vector_offset() const;
  void set_vector_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vector_offset() const;
  void _internal_set_vector_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.Document)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_;
  mutable std::atomic<int> _vector_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_FieldsEntry_DoNotUse,
      std::string, ::olama::Field,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_peer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_id_;
  float score_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vector_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class Field_StringArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.Field.StringArray) */ {
 public:
  Field_StringArray();
  virtual ~Field_StringArray();

  Field_StringArray(const Field_StringArray& from);
  Field_StringArray(Field_StringArray&& from) noexcept
    : Field_StringArray() {
    *this = ::std::move(from);
  }

  inline Field_StringArray& operator=(const Field_StringArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field_StringArray& operator=(Field_StringArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Field_StringArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field_StringArray* internal_default_instance() {
    return reinterpret_cast<const Field_StringArray*>(
               &_Field_StringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Field_StringArray& a, Field_StringArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Field_StringArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Field_StringArray* New() const final {
    return CreateMaybeMessage<Field_StringArray>(nullptr);
  }

  Field_StringArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Field_StringArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Field_StringArray& from);
  void MergeFrom(const Field_StringArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field_StringArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.Field.StringArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrArrFieldNumber = 1,
  };
  // repeated bytes str_arr = 1;
  int str_arr_size() const;
  private:
  int _internal_str_arr_size() const;
  public:
  void clear_str_arr();
  const std::string& str_arr(int index) const;
  std::string* mutable_str_arr(int index);
  void set_str_arr(int index, const std::string& value);
  void set_str_arr(int index, std::string&& value);
  void set_str_arr(int index, const char* value);
  void set_str_arr(int index, const void* value, size_t size);
  std::string* add_str_arr();
  void add_str_arr(const std::string& value);
  void add_str_arr(std::string&& value);
  void add_str_arr(const char* value);
  void add_str_arr(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_arr();
  private:
  const std::string& _internal_str_arr(int index) const;
  std::string* _internal_add_str_arr();
  public:

  // @@protoc_insertion_point(class_scope:olama.Field.StringArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class Field :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Field& default_instance();

  enum OneofValCase {
    kValStr = 1,
    kValU64 = 2,
    kValDouble = 3,
    kValStrArr = 4,
    ONEOF_VAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(nullptr);
  }

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.Field";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Field_StringArray StringArray;

  // accessors -------------------------------------------------------

  enum : int {
    kValStrFieldNumber = 1,
    kValU64FieldNumber = 2,
    kValDoubleFieldNumber = 3,
    kValStrArrFieldNumber = 4,
  };
  // bytes val_str = 1;
  private:
  bool _internal_has_val_str() const;
  public:
  void clear_val_str();
  const std::string& val_str() const;
  void set_val_str(const std::string& value);
  void set_val_str(std::string&& value);
  void set_val_str(const char* value);
  void set_val_str(const void* value, size_t size);
  std::string* mutable_val_str();
  std::string* release_val_str();
  void set_allocated_val_str(std::string* val_str);
  private:
  const std::string& _internal_val_str() const;
  void _internal_set_val_str(const std::string& value);
  std::string* _internal_mutable_val_str();
  public:

  // uint64 val_u64 = 2;
  private:
  bool _internal_has_val_u64() const;
  public:
  void clear_val_u64();
  ::PROTOBUF_NAMESPACE_ID::uint64 val_u64() const;
  void set_val_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_val_u64() const;
  void _internal_set_val_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double val_double = 3;
  private:
  bool _internal_has_val_double() const;
  public:
  void clear_val_double();
  double val_double() const;
  void set_val_double(double value);
  private:
  double _internal_val_double() const;
  void _internal_set_val_double(double value);
  public:

  // .olama.Field.StringArray val_str_arr = 4;
  bool has_val_str_arr() const;
  private:
  bool _internal_has_val_str_arr() const;
  public:
  void clear_val_str_arr();
  const ::olama::Field_StringArray& val_str_arr() const;
  ::olama::Field_StringArray* release_val_str_arr();
  ::olama::Field_StringArray* mutable_val_str_arr();
  void set_allocated_val_str_arr(::olama::Field_StringArray* val_str_arr);
  private:
  const ::olama::Field_StringArray& _internal_val_str_arr() const;
  ::olama::Field_StringArray* _internal_mutable_val_str_arr();
  public:

  void clear_oneof_val();
  OneofValCase oneof_val_case() const;
  // @@protoc_insertion_point(class_scope:olama.Field)
 private:
  class _Internal;
  void set_has_val_str();
  void set_has_val_u64();
  void set_has_val_double();
  void set_has_val_str_arr();

  inline bool has_oneof_val() const;
  inline void clear_has_oneof_val();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union OneofValUnion {
    OneofValUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_str_;
    ::PROTOBUF_NAMESPACE_ID::uint64 val_u64_;
    double val_double_;
    ::olama::Field_StringArray* val_str_arr_;
  } oneof_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class ShardState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.ShardState) */ {
 public:
  ShardState();
  virtual ~ShardState();

  ShardState(const ShardState& from);
  ShardState(ShardState&& from) noexcept
    : ShardState() {
    *this = ::std::move(from);
  }

  inline ShardState& operator=(const ShardState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardState& operator=(ShardState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardState* internal_default_instance() {
    return reinterpret_cast<const ShardState*>(
               &_ShardState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShardState& a, ShardState& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardState* New() const final {
    return CreateMaybeMessage<ShardState>(nullptr);
  }

  ShardState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardState& from);
  void MergeFrom(const ShardState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.ShardState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstimateIndexMemSizeFieldNumber = 2,
    kDataStateFieldNumber = 1,
    kSnapshotingFieldNumber = 3,
    kLastAppliedIndexFieldNumber = 4,
    kLastAppliedTermFieldNumber = 5,
    kIdSeedFieldNumber = 6,
    kAddedItemsFieldNumber = 7,
    kDataStateChangeTimeFieldNumber = 8,
  };
  // uint64 estimate_index_mem_size = 2;
  void clear_estimate_index_mem_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 estimate_index_mem_size() const;
  void set_estimate_index_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_estimate_index_mem_size() const;
  void _internal_set_estimate_index_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .olama.ShardDataState data_state = 1;
  void clear_data_state();
  ::olama::ShardDataState data_state() const;
  void set_data_state(::olama::ShardDataState value);
  private:
  ::olama::ShardDataState _internal_data_state() const;
  void _internal_set_data_state(::olama::ShardDataState value);
  public:

  // bool snapshoting = 3;
  void clear_snapshoting();
  bool snapshoting() const;
  void set_snapshoting(bool value);
  private:
  bool _internal_snapshoting() const;
  void _internal_set_snapshoting(bool value);
  public:

  // int64 last_applied_index = 4;
  void clear_last_applied_index();
  ::PROTOBUF_NAMESPACE_ID::int64 last_applied_index() const;
  void set_last_applied_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_applied_index() const;
  void _internal_set_last_applied_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_applied_term = 5;
  void clear_last_applied_term();
  ::PROTOBUF_NAMESPACE_ID::int64 last_applied_term() const;
  void set_last_applied_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_applied_term() const;
  void _internal_set_last_applied_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id_seed = 6;
  void clear_id_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 id_seed() const;
  void set_id_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id_seed() const;
  void _internal_set_id_seed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 added_items = 7;
  void clear_added_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 added_items() const;
  void set_added_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_added_items() const;
  void _internal_set_added_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 data_state_change_time = 8;
  void clear_data_state_change_time();
  ::PROTOBUF_NAMESPACE_ID::int64 data_state_change_time() const;
  void set_data_state_change_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_state_change_time() const;
  void _internal_set_data_state_change_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.ShardState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 estimate_index_mem_size_;
  int data_state_;
  bool snapshoting_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_applied_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_applied_term_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_seed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 added_items_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_state_change_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class Shard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.Shard) */ {
 public:
  Shard();
  virtual ~Shard();

  Shard(const Shard& from);
  Shard(Shard&& from) noexcept
    : Shard() {
    *this = ::std::move(from);
  }

  inline Shard& operator=(const Shard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shard& operator=(Shard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shard* internal_default_instance() {
    return reinterpret_cast<const Shard*>(
               &_Shard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Shard& a, Shard& b) {
    a.Swap(&b);
  }
  inline void Swap(Shard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shard* New() const final {
    return CreateMaybeMessage<Shard>(nullptr);
  }

  Shard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shard& from);
  void MergeFrom(const Shard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.Shard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 6,
    kCollectionFieldNumber = 1,
    kFromNodeFieldNumber = 7,
    kStateFieldNumber = 5,
    kShardIdxFieldNumber = 2,
    kIsLeaderFieldNumber = 3,
    kFollowingFieldNumber = 4,
    kVersionFieldNumber = 8,
  };
  // repeated string nodes = 6;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  const std::string& nodes(int index) const;
  std::string* mutable_nodes(int index);
  void set_nodes(int index, const std::string& value);
  void set_nodes(int index, std::string&& value);
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const char* value, size_t size);
  std::string* add_nodes();
  void add_nodes(const std::string& value);
  void add_nodes(std::string&& value);
  void add_nodes(const char* value);
  void add_nodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nodes();
  private:
  const std::string& _internal_nodes(int index) const;
  std::string* _internal_add_nodes();
  public:

  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string from_node = 7;
  void clear_from_node();
  const std::string& from_node() const;
  void set_from_node(const std::string& value);
  void set_from_node(std::string&& value);
  void set_from_node(const char* value);
  void set_from_node(const char* value, size_t size);
  std::string* mutable_from_node();
  std::string* release_from_node();
  void set_allocated_from_node(std::string* from_node);
  private:
  const std::string& _internal_from_node() const;
  void _internal_set_from_node(const std::string& value);
  std::string* _internal_mutable_from_node();
  public:

  // .olama.ShardState state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::olama::ShardState& state() const;
  ::olama::ShardState* release_state();
  ::olama::ShardState* mutable_state();
  void set_allocated_state(::olama::ShardState* state);
  private:
  const ::olama::ShardState& _internal_state() const;
  ::olama::ShardState* _internal_mutable_state();
  public:

  // int32 shard_idx = 2;
  void clear_shard_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx() const;
  void set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_idx() const;
  void _internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_leader = 3;
  void clear_is_leader();
  bool is_leader() const;
  void set_is_leader(bool value);
  private:
  bool _internal_is_leader() const;
  void _internal_set_is_leader(bool value);
  public:

  // bool following = 4;
  void clear_following();
  bool following() const;
  void set_following(bool value);
  private:
  bool _internal_following() const;
  void _internal_set_following(bool value);
  public:

  // int64 version = 8;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.Shard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_node_;
  ::olama::ShardState* state_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx_;
  bool is_leader_;
  bool following_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class AliasItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.AliasItem) */ {
 public:
  AliasItem();
  virtual ~AliasItem();

  AliasItem(const AliasItem& from);
  AliasItem(AliasItem&& from) noexcept
    : AliasItem() {
    *this = ::std::move(from);
  }

  inline AliasItem& operator=(const AliasItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AliasItem& operator=(AliasItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AliasItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AliasItem* internal_default_instance() {
    return reinterpret_cast<const AliasItem*>(
               &_AliasItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AliasItem& a, AliasItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AliasItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AliasItem* New() const final {
    return CreateMaybeMessage<AliasItem>(nullptr);
  }

  AliasItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AliasItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AliasItem& from);
  void MergeFrom(const AliasItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AliasItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.AliasItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasFieldNumber = 1,
    kCollectionFieldNumber = 2,
  };
  // string alias = 1;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // @@protoc_insertion_point(class_scope:olama.AliasItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DatabaseItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DatabaseItem) */ {
 public:
  DatabaseItem();
  virtual ~DatabaseItem();

  DatabaseItem(const DatabaseItem& from);
  DatabaseItem(DatabaseItem&& from) noexcept
    : DatabaseItem() {
    *this = ::std::move(from);
  }

  inline DatabaseItem& operator=(const DatabaseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseItem& operator=(DatabaseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatabaseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseItem* internal_default_instance() {
    return reinterpret_cast<const DatabaseItem*>(
               &_DatabaseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DatabaseItem& a, DatabaseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseItem* New() const final {
    return CreateMaybeMessage<DatabaseItem>(nullptr);
  }

  DatabaseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatabaseItem& from);
  void MergeFrom(const DatabaseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DatabaseItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateTimeFieldNumber = 1,
    kDbTypeFieldNumber = 2,
  };
  // int64 create_time = 1;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .olama.DataType db_type = 2;
  void clear_db_type();
  ::olama::DataType db_type() const;
  void set_db_type(::olama::DataType value);
  private:
  ::olama::DataType _internal_db_type() const;
  void _internal_set_db_type(::olama::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DatabaseItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  int db_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class EmbeddingParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.EmbeddingParams) */ {
 public:
  EmbeddingParams();
  virtual ~EmbeddingParams();

  EmbeddingParams(const EmbeddingParams& from);
  EmbeddingParams(EmbeddingParams&& from) noexcept
    : EmbeddingParams() {
    *this = ::std::move(from);
  }

  inline EmbeddingParams& operator=(const EmbeddingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbeddingParams& operator=(EmbeddingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbeddingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbeddingParams* internal_default_instance() {
    return reinterpret_cast<const EmbeddingParams*>(
               &_EmbeddingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EmbeddingParams& a, EmbeddingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbeddingParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbeddingParams* New() const final {
    return CreateMaybeMessage<EmbeddingParams>(nullptr);
  }

  EmbeddingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbeddingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbeddingParams& from);
  void MergeFrom(const EmbeddingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbeddingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.EmbeddingParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kVectorFieldFieldNumber = 2,
    kModelNameFieldNumber = 3,
  };
  // string field = 1;
  void clear_field();
  const std::string& field() const;
  void set_field(const std::string& value);
  void set_field(std::string&& value);
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // string vector_field = 2;
  void clear_vector_field();
  const std::string& vector_field() const;
  void set_vector_field(const std::string& value);
  void set_vector_field(std::string&& value);
  void set_vector_field(const char* value);
  void set_vector_field(const char* value, size_t size);
  std::string* mutable_vector_field();
  std::string* release_vector_field();
  void set_allocated_vector_field(std::string* vector_field);
  private:
  const std::string& _internal_vector_field() const;
  void _internal_set_vector_field(const std::string& value);
  std::string* _internal_mutable_vector_field();
  public:

  // string model_name = 3;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:olama.EmbeddingParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class CollectionConf_FieldMetasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CollectionConf_FieldMetasEntry_DoNotUse, 
    std::string, ::olama::FieldMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CollectionConf_FieldMetasEntry_DoNotUse, 
    std::string, ::olama::FieldMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CollectionConf_FieldMetasEntry_DoNotUse();
  CollectionConf_FieldMetasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CollectionConf_FieldMetasEntry_DoNotUse& other);
  static const CollectionConf_FieldMetasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CollectionConf_FieldMetasEntry_DoNotUse*>(&_CollectionConf_FieldMetasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "olama.CollectionConf.FieldMetasEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class CollectionConf_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CollectionConf_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CollectionConf_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CollectionConf_OptionsEntry_DoNotUse();
  CollectionConf_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CollectionConf_OptionsEntry_DoNotUse& other);
  static const CollectionConf_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CollectionConf_OptionsEntry_DoNotUse*>(&_CollectionConf_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "olama.CollectionConf.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "olama.CollectionConf.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class CollectionConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.CollectionConf) */ {
 public:
  CollectionConf();
  virtual ~CollectionConf();

  CollectionConf(const CollectionConf& from);
  CollectionConf(CollectionConf&& from) noexcept
    : CollectionConf() {
    *this = ::std::move(from);
  }

  inline CollectionConf& operator=(const CollectionConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionConf& operator=(CollectionConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionConf* internal_default_instance() {
    return reinterpret_cast<const CollectionConf*>(
               &_CollectionConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CollectionConf& a, CollectionConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionConf* New() const final {
    return CreateMaybeMessage<CollectionConf>(nullptr);
  }

  CollectionConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionConf& from);
  void MergeFrom(const CollectionConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.CollectionConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldMetasFieldNumber = 15,
    kOptionsFieldNumber = 16,
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kModelDescFieldNumber = 12,
    kEmbeddingParamsFieldNumber = 18,
    kTtlConfigFieldNumber = 21,
    kNumberOfShardsFieldNumber = 4,
    kNumberOfReplicasFieldNumber = 5,
    kDimensionFieldNumber = 6,
    kMetricFieldNumber = 7,
    kNprobeFieldNumber = 8,
    kEngineFieldNumber = 11,
    kNlistFieldNumber = 17,
    kDataTypeFieldNumber = 19,
    kVersionFieldNumber = 20,
  };
  // map<string, .olama.FieldMeta> field_metas = 15;
  int field_metas_size() const;
  private:
  int _internal_field_metas_size() const;
  public:
  void clear_field_metas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >&
      _internal_field_metas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >*
      _internal_mutable_field_metas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >&
      field_metas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >*
      mutable_field_metas();

  // map<string, string> options = 16;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string model_desc = 12;
  void clear_model_desc();
  const std::string& model_desc() const;
  void set_model_desc(const std::string& value);
  void set_model_desc(std::string&& value);
  void set_model_desc(const char* value);
  void set_model_desc(const char* value, size_t size);
  std::string* mutable_model_desc();
  std::string* release_model_desc();
  void set_allocated_model_desc(std::string* model_desc);
  private:
  const std::string& _internal_model_desc() const;
  void _internal_set_model_desc(const std::string& value);
  std::string* _internal_mutable_model_desc();
  public:

  // .olama.EmbeddingParams embedding_params = 18;
  bool has_embedding_params() const;
  private:
  bool _internal_has_embedding_params() const;
  public:
  void clear_embedding_params();
  const ::olama::EmbeddingParams& embedding_params() const;
  ::olama::EmbeddingParams* release_embedding_params();
  ::olama::EmbeddingParams* mutable_embedding_params();
  void set_allocated_embedding_params(::olama::EmbeddingParams* embedding_params);
  private:
  const ::olama::EmbeddingParams& _internal_embedding_params() const;
  ::olama::EmbeddingParams* _internal_mutable_embedding_params();
  public:

  // .olama.TTLConfig ttlConfig = 21;
  bool has_ttlconfig() const;
  private:
  bool _internal_has_ttlconfig() const;
  public:
  void clear_ttlconfig();
  const ::olama::TTLConfig& ttlconfig() const;
  ::olama::TTLConfig* release_ttlconfig();
  ::olama::TTLConfig* mutable_ttlconfig();
  void set_allocated_ttlconfig(::olama::TTLConfig* ttlconfig);
  private:
  const ::olama::TTLConfig& _internal_ttlconfig() const;
  ::olama::TTLConfig* _internal_mutable_ttlconfig();
  public:

  // uint32 number_of_shards = 4;
  void clear_number_of_shards();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_shards() const;
  void set_number_of_shards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_shards() const;
  void _internal_set_number_of_shards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 number_of_replicas = 5;
  void clear_number_of_replicas();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_replicas() const;
  void set_number_of_replicas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_replicas() const;
  void _internal_set_number_of_replicas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dimension = 6;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dimension() const;
  void _internal_set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .olama.IndexMetricType metric = 7;
  void clear_metric();
  ::olama::IndexMetricType metric() const;
  void set_metric(::olama::IndexMetricType value);
  private:
  ::olama::IndexMetricType _internal_metric() const;
  void _internal_set_metric(::olama::IndexMetricType value);
  public:

  // uint32 nprobe = 8;
  void clear_nprobe();
  ::PROTOBUF_NAMESPACE_ID::uint32 nprobe() const;
  void set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nprobe() const;
  void _internal_set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .olama.IndexEngineType engine = 11;
  void clear_engine();
  ::olama::IndexEngineType engine() const;
  void set_engine(::olama::IndexEngineType value);
  private:
  ::olama::IndexEngineType _internal_engine() const;
  void _internal_set_engine(::olama::IndexEngineType value);
  public:

  // uint32 nlist = 17;
  void clear_nlist();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlist() const;
  void set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nlist() const;
  void _internal_set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .olama.DataType data_type = 19;
  void clear_data_type();
  ::olama::DataType data_type() const;
  void set_data_type(::olama::DataType value);
  private:
  ::olama::DataType _internal_data_type() const;
  void _internal_set_data_type(::olama::DataType value);
  public:

  // int64 version = 20;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.CollectionConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CollectionConf_FieldMetasEntry_DoNotUse,
      std::string, ::olama::FieldMeta,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > field_metas_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CollectionConf_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_desc_;
  ::olama::EmbeddingParams* embedding_params_;
  ::olama::TTLConfig* ttlconfig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_shards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_replicas_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension_;
  int metric_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nprobe_;
  int engine_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlist_;
  int data_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class FieldMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.FieldMeta) */ {
 public:
  FieldMeta();
  virtual ~FieldMeta();

  FieldMeta(const FieldMeta& from);
  FieldMeta(FieldMeta&& from) noexcept
    : FieldMeta() {
    *this = ::std::move(from);
  }

  inline FieldMeta& operator=(const FieldMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMeta& operator=(FieldMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMeta* internal_default_instance() {
    return reinterpret_cast<const FieldMeta*>(
               &_FieldMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FieldMeta& a, FieldMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMeta* New() const final {
    return CreateMaybeMessage<FieldMeta>(nullptr);
  }

  FieldMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMeta& from);
  void MergeFrom(const FieldMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.FieldMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldTypeFieldNumber = 1,
    kFieldElementTypeFieldNumber = 2,
  };
  // .olama.FieldType field_type = 1;
  void clear_field_type();
  ::olama::FieldType field_type() const;
  void set_field_type(::olama::FieldType value);
  private:
  ::olama::FieldType _internal_field_type() const;
  void _internal_set_field_type(::olama::FieldType value);
  public:

  // .olama.FieldElementType field_element_type = 2;
  void clear_field_element_type();
  ::olama::FieldElementType field_element_type() const;
  void set_field_element_type(::olama::FieldElementType value);
  private:
  ::olama::FieldElementType _internal_field_element_type() const;
  void _internal_set_field_element_type(::olama::FieldElementType value);
  public:

  // @@protoc_insertion_point(class_scope:olama.FieldMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int field_type_;
  int field_element_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class ShardConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.ShardConf) */ {
 public:
  ShardConf();
  virtual ~ShardConf();

  ShardConf(const ShardConf& from);
  ShardConf(ShardConf&& from) noexcept
    : ShardConf() {
    *this = ::std::move(from);
  }

  inline ShardConf& operator=(const ShardConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardConf& operator=(ShardConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardConf* internal_default_instance() {
    return reinterpret_cast<const ShardConf*>(
               &_ShardConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ShardConf& a, ShardConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardConf* New() const final {
    return CreateMaybeMessage<ShardConf>(nullptr);
  }

  ShardConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardConf& from);
  void MergeFrom(const ShardConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.ShardConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 4,
    kCollectionFieldNumber = 1,
    kConfFieldNumber = 3,
    kShardIdxFieldNumber = 2,
  };
  // repeated string nodes = 4;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  const std::string& nodes(int index) const;
  std::string* mutable_nodes(int index);
  void set_nodes(int index, const std::string& value);
  void set_nodes(int index, std::string&& value);
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const char* value, size_t size);
  std::string* add_nodes();
  void add_nodes(const std::string& value);
  void add_nodes(std::string&& value);
  void add_nodes(const char* value);
  void add_nodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nodes();
  private:
  const std::string& _internal_nodes(int index) const;
  std::string* _internal_add_nodes();
  public:

  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // .olama.CollectionConf conf = 3;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::olama::CollectionConf& conf() const;
  ::olama::CollectionConf* release_conf();
  ::olama::CollectionConf* mutable_conf();
  void set_allocated_conf(::olama::CollectionConf* conf);
  private:
  const ::olama::CollectionConf& _internal_conf() const;
  ::olama::CollectionConf* _internal_mutable_conf();
  public:

  // int32 shard_idx = 2;
  void clear_shard_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx() const;
  void set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_idx() const;
  void _internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.ShardConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::olama::CollectionConf* conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class TTLConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.TTLConfig) */ {
 public:
  TTLConfig();
  virtual ~TTLConfig();

  TTLConfig(const TTLConfig& from);
  TTLConfig(TTLConfig&& from) noexcept
    : TTLConfig() {
    *this = ::std::move(from);
  }

  inline TTLConfig& operator=(const TTLConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTLConfig& operator=(TTLConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTLConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TTLConfig* internal_default_instance() {
    return reinterpret_cast<const TTLConfig*>(
               &_TTLConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TTLConfig& a, TTLConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TTLConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTLConfig* New() const final {
    return CreateMaybeMessage<TTLConfig>(nullptr);
  }

  TTLConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTLConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTLConfig& from);
  void MergeFrom(const TTLConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTLConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.TTLConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // string timeField = 2;
  void clear_timefield();
  const std::string& timefield() const;
  void set_timefield(const std::string& value);
  void set_timefield(std::string&& value);
  void set_timefield(const char* value);
  void set_timefield(const char* value, size_t size);
  std::string* mutable_timefield();
  std::string* release_timefield();
  void set_allocated_timefield(std::string* timefield);
  private:
  const std::string& _internal_timefield() const;
  void _internal_set_timefield(const std::string& value);
  std::string* _internal_mutable_timefield();
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.TTLConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timefield_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class ShardCollectionState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.ShardCollectionState) */ {
 public:
  ShardCollectionState();
  virtual ~ShardCollectionState();

  ShardCollectionState(const ShardCollectionState& from);
  ShardCollectionState(ShardCollectionState&& from) noexcept
    : ShardCollectionState() {
    *this = ::std::move(from);
  }

  inline ShardCollectionState& operator=(const ShardCollectionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardCollectionState& operator=(ShardCollectionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardCollectionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardCollectionState* internal_default_instance() {
    return reinterpret_cast<const ShardCollectionState*>(
               &_ShardCollectionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShardCollectionState& a, ShardCollectionState& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardCollectionState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardCollectionState* New() const final {
    return CreateMaybeMessage<ShardCollectionState>(nullptr);
  }

  ShardCollectionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardCollectionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardCollectionState& from);
  void MergeFrom(const ShardCollectionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardCollectionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.ShardCollectionState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodePeersFieldNumber = 3,
    kShardsFieldNumber = 8,
    kLeaderFieldNumber = 2,
    kAllocateStartMsFieldNumber = 4,
    kAllocateStopMsFieldNumber = 5,
    kLeaderMsFieldNumber = 6,
    kShardIdxFieldNumber = 1,
    kAllocatingFieldNumber = 7,
    kCreatingFieldNumber = 9,
    kRemovingFieldNumber = 10,
  };
  // repeated string node_peers = 3;
  int node_peers_size() const;
  private:
  int _internal_node_peers_size() const;
  public:
  void clear_node_peers();
  const std::string& node_peers(int index) const;
  std::string* mutable_node_peers(int index);
  void set_node_peers(int index, const std::string& value);
  void set_node_peers(int index, std::string&& value);
  void set_node_peers(int index, const char* value);
  void set_node_peers(int index, const char* value, size_t size);
  std::string* add_node_peers();
  void add_node_peers(const std::string& value);
  void add_node_peers(std::string&& value);
  void add_node_peers(const char* value);
  void add_node_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& node_peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_node_peers();
  private:
  const std::string& _internal_node_peers(int index) const;
  std::string* _internal_add_node_peers();
  public:

  // repeated .olama.Shard shards = 8;
  int shards_size() const;
  private:
  int _internal_shards_size() const;
  public:
  void clear_shards();
  ::olama::Shard* mutable_shards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Shard >*
      mutable_shards();
  private:
  const ::olama::Shard& _internal_shards(int index) const;
  ::olama::Shard* _internal_add_shards();
  public:
  const ::olama::Shard& shards(int index) const;
  ::olama::Shard* add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Shard >&
      shards() const;

  // string leader = 2;
  void clear_leader();
  const std::string& leader() const;
  void set_leader(const std::string& value);
  void set_leader(std::string&& value);
  void set_leader(const char* value);
  void set_leader(const char* value, size_t size);
  std::string* mutable_leader();
  std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // int64 allocate_start_ms = 4;
  void clear_allocate_start_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 allocate_start_ms() const;
  void set_allocate_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_allocate_start_ms() const;
  void _internal_set_allocate_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 allocate_stop_ms = 5;
  void clear_allocate_stop_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 allocate_stop_ms() const;
  void set_allocate_stop_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_allocate_stop_ms() const;
  void _internal_set_allocate_stop_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 leader_ms = 6;
  void clear_leader_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 leader_ms() const;
  void set_leader_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leader_ms() const;
  void _internal_set_leader_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 shard_idx = 1;
  void clear_shard_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx() const;
  void set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_idx() const;
  void _internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool allocating = 7;
  void clear_allocating();
  bool allocating() const;
  void set_allocating(bool value);
  private:
  bool _internal_allocating() const;
  void _internal_set_allocating(bool value);
  public:

  // bool creating = 9;
  void clear_creating();
  bool creating() const;
  void set_creating(bool value);
  private:
  bool _internal_creating() const;
  void _internal_set_creating(bool value);
  public:

  // bool removing = 10;
  void clear_removing();
  bool removing() const;
  void set_removing(bool value);
  private:
  bool _internal_removing() const;
  void _internal_set_removing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.ShardCollectionState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> node_peers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Shard > shards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
  ::PROTOBUF_NAMESPACE_ID::int64 allocate_start_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 allocate_stop_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_idx_;
  bool allocating_;
  bool creating_;
  bool removing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class CollectionState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.CollectionState) */ {
 public:
  CollectionState();
  virtual ~CollectionState();

  CollectionState(const CollectionState& from);
  CollectionState(CollectionState&& from) noexcept
    : CollectionState() {
    *this = ::std::move(from);
  }

  inline CollectionState& operator=(const CollectionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionState& operator=(CollectionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectionState* internal_default_instance() {
    return reinterpret_cast<const CollectionState*>(
               &_CollectionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CollectionState& a, CollectionState& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectionState* New() const final {
    return CreateMaybeMessage<CollectionState>(nullptr);
  }

  CollectionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectionState& from);
  void MergeFrom(const CollectionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.CollectionState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardsFieldNumber = 3,
    kCollectionFieldNumber = 1,
    kConfFieldNumber = 2,
    kReqFieldNumber = 6,
    kSizeFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
    kIndexStateFieldNumber = 8,
  };
  // repeated .olama.ShardCollectionState shards = 3;
  int shards_size() const;
  private:
  int _internal_shards_size() const;
  public:
  void clear_shards();
  ::olama::ShardCollectionState* mutable_shards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::ShardCollectionState >*
      mutable_shards();
  private:
  const ::olama::ShardCollectionState& _internal_shards(int index) const;
  ::olama::ShardCollectionState* _internal_add_shards();
  public:
  const ::olama::ShardCollectionState& shards(int index) const;
  ::olama::ShardCollectionState* add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::ShardCollectionState >&
      shards() const;

  // string collection = 1;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // .olama.CollectionConf conf = 2;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::olama::CollectionConf& conf() const;
  ::olama::CollectionConf* release_conf();
  ::olama::CollectionConf* mutable_conf();
  void set_allocated_conf(::olama::CollectionConf* conf);
  private:
  const ::olama::CollectionConf& _internal_conf() const;
  ::olama::CollectionConf* _internal_mutable_conf();
  public:

  // .olama.CreateCollectionRequest req = 6;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::olama::CreateCollectionRequest& req() const;
  ::olama::CreateCollectionRequest* release_req();
  ::olama::CreateCollectionRequest* mutable_req();
  void set_allocated_req(::olama::CreateCollectionRequest* req);
  private:
  const ::olama::CreateCollectionRequest& _internal_req() const;
  ::olama::CreateCollectionRequest* _internal_mutable_req();
  public:

  // uint64 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 create_time = 5;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .olama.ShardDataState index_state = 8;
  void clear_index_state();
  ::olama::ShardDataState index_state() const;
  void set_index_state(::olama::ShardDataState value);
  private:
  ::olama::ShardDataState _internal_index_state() const;
  void _internal_set_index_state(::olama::ShardDataState value);
  public:

  // @@protoc_insertion_point(class_scope:olama.CollectionState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::ShardCollectionState > shards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::olama::CollectionConf* conf_;
  ::olama::CreateCollectionRequest* req_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  int index_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class AddAliasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.AddAliasRequest) */ {
 public:
  AddAliasRequest();
  virtual ~AddAliasRequest();

  AddAliasRequest(const AddAliasRequest& from);
  AddAliasRequest(AddAliasRequest&& from) noexcept
    : AddAliasRequest() {
    *this = ::std::move(from);
  }

  inline AddAliasRequest& operator=(const AddAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAliasRequest& operator=(AddAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAliasRequest* internal_default_instance() {
    return reinterpret_cast<const AddAliasRequest*>(
               &_AddAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddAliasRequest& a, AddAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAliasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAliasRequest* New() const final {
    return CreateMaybeMessage<AddAliasRequest>(nullptr);
  }

  AddAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAliasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddAliasRequest& from);
  void MergeFrom(const AddAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAliasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.AddAliasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kAliasFieldNumber = 3,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // @@protoc_insertion_point(class_scope:olama.AddAliasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class RemoveAliasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.RemoveAliasRequest) */ {
 public:
  RemoveAliasRequest();
  virtual ~RemoveAliasRequest();

  RemoveAliasRequest(const RemoveAliasRequest& from);
  RemoveAliasRequest(RemoveAliasRequest&& from) noexcept
    : RemoveAliasRequest() {
    *this = ::std::move(from);
  }

  inline RemoveAliasRequest& operator=(const RemoveAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAliasRequest& operator=(RemoveAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAliasRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveAliasRequest*>(
               &_RemoveAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemoveAliasRequest& a, RemoveAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAliasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAliasRequest* New() const final {
    return CreateMaybeMessage<RemoveAliasRequest>(nullptr);
  }

  RemoveAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAliasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAliasRequest& from);
  void MergeFrom(const RemoveAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAliasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.RemoveAliasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kAliasFieldNumber = 2,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // @@protoc_insertion_point(class_scope:olama.RemoveAliasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class UpdateAliasResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.UpdateAliasResponse) */ {
 public:
  UpdateAliasResponse();
  virtual ~UpdateAliasResponse();

  UpdateAliasResponse(const UpdateAliasResponse& from);
  UpdateAliasResponse(UpdateAliasResponse&& from) noexcept
    : UpdateAliasResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAliasResponse& operator=(const UpdateAliasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAliasResponse& operator=(UpdateAliasResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAliasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAliasResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAliasResponse*>(
               &_UpdateAliasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateAliasResponse& a, UpdateAliasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAliasResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAliasResponse* New() const final {
    return CreateMaybeMessage<UpdateAliasResponse>(nullptr);
  }

  UpdateAliasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAliasResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAliasResponse& from);
  void MergeFrom(const UpdateAliasResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAliasResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.UpdateAliasResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.UpdateAliasResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class GetAliasRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.GetAliasRequest) */ {
 public:
  GetAliasRequest();
  virtual ~GetAliasRequest();

  GetAliasRequest(const GetAliasRequest& from);
  GetAliasRequest(GetAliasRequest&& from) noexcept
    : GetAliasRequest() {
    *this = ::std::move(from);
  }

  inline GetAliasRequest& operator=(const GetAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAliasRequest& operator=(GetAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAliasRequest* internal_default_instance() {
    return reinterpret_cast<const GetAliasRequest*>(
               &_GetAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetAliasRequest& a, GetAliasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAliasRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAliasRequest* New() const final {
    return CreateMaybeMessage<GetAliasRequest>(nullptr);
  }

  GetAliasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAliasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAliasRequest& from);
  void MergeFrom(const GetAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAliasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.GetAliasRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kAliasFieldNumber = 2,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // @@protoc_insertion_point(class_scope:olama.GetAliasRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class GetAliasResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.GetAliasResponse) */ {
 public:
  GetAliasResponse();
  virtual ~GetAliasResponse();

  GetAliasResponse(const GetAliasResponse& from);
  GetAliasResponse(GetAliasResponse&& from) noexcept
    : GetAliasResponse() {
    *this = ::std::move(from);
  }

  inline GetAliasResponse& operator=(const GetAliasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAliasResponse& operator=(GetAliasResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAliasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAliasResponse* internal_default_instance() {
    return reinterpret_cast<const GetAliasResponse*>(
               &_GetAliasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAliasResponse& a, GetAliasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAliasResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAliasResponse* New() const final {
    return CreateMaybeMessage<GetAliasResponse>(nullptr);
  }

  GetAliasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAliasResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAliasResponse& from);
  void MergeFrom(const GetAliasResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAliasResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.GetAliasResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasesFieldNumber = 4,
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // repeated .olama.AliasItem aliases = 4;
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;
  public:
  void clear_aliases();
  ::olama::AliasItem* mutable_aliases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::AliasItem >*
      mutable_aliases();
  private:
  const ::olama::AliasItem& _internal_aliases(int index) const;
  ::olama::AliasItem* _internal_add_aliases();
  public:
  const ::olama::AliasItem& aliases(int index) const;
  ::olama::AliasItem* add_aliases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::AliasItem >&
      aliases() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.GetAliasResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::AliasItem > aliases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DescribeCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DescribeCollectionRequest) */ {
 public:
  DescribeCollectionRequest();
  virtual ~DescribeCollectionRequest();

  DescribeCollectionRequest(const DescribeCollectionRequest& from);
  DescribeCollectionRequest(DescribeCollectionRequest&& from) noexcept
    : DescribeCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DescribeCollectionRequest& operator=(const DescribeCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeCollectionRequest& operator=(DescribeCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DescribeCollectionRequest*>(
               &_DescribeCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DescribeCollectionRequest& a, DescribeCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeCollectionRequest* New() const final {
    return CreateMaybeMessage<DescribeCollectionRequest>(nullptr);
  }

  DescribeCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeCollectionRequest& from);
  void MergeFrom(const DescribeCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DescribeCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kTransferFieldNumber = 3,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // bool transfer = 3;
  void clear_transfer();
  bool transfer() const;
  void set_transfer(bool value);
  private:
  bool _internal_transfer() const;
  void _internal_set_transfer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DescribeCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  bool transfer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DescribeCollectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DescribeCollectionResponse) */ {
 public:
  DescribeCollectionResponse();
  virtual ~DescribeCollectionResponse();

  DescribeCollectionResponse(const DescribeCollectionResponse& from);
  DescribeCollectionResponse(DescribeCollectionResponse&& from) noexcept
    : DescribeCollectionResponse() {
    *this = ::std::move(from);
  }

  inline DescribeCollectionResponse& operator=(const DescribeCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribeCollectionResponse& operator=(DescribeCollectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribeCollectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribeCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const DescribeCollectionResponse*>(
               &_DescribeCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DescribeCollectionResponse& a, DescribeCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribeCollectionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribeCollectionResponse* New() const final {
    return CreateMaybeMessage<DescribeCollectionResponse>(nullptr);
  }

  DescribeCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribeCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribeCollectionResponse& from);
  void MergeFrom(const DescribeCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribeCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DescribeCollectionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kCollectionFieldNumber = 4,
    kStateFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // .olama.CreateCollectionRequest collection = 4;
  bool has_collection() const;
  private:
  bool _internal_has_collection() const;
  public:
  void clear_collection();
  const ::olama::CreateCollectionRequest& collection() const;
  ::olama::CreateCollectionRequest* release_collection();
  ::olama::CreateCollectionRequest* mutable_collection();
  void set_allocated_collection(::olama::CreateCollectionRequest* collection);
  private:
  const ::olama::CreateCollectionRequest& _internal_collection() const;
  ::olama::CreateCollectionRequest* _internal_mutable_collection();
  public:

  // .olama.CollectionState state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::olama::CollectionState& state() const;
  ::olama::CollectionState* release_state();
  ::olama::CollectionState* mutable_state();
  void set_allocated_state(::olama::CollectionState* state);
  private:
  const ::olama::CollectionState& _internal_state() const;
  ::olama::CollectionState* _internal_mutable_state();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DescribeCollectionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::olama::CreateCollectionRequest* collection_;
  ::olama::CollectionState* state_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class ListCollectionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.ListCollectionsRequest) */ {
 public:
  ListCollectionsRequest();
  virtual ~ListCollectionsRequest();

  ListCollectionsRequest(const ListCollectionsRequest& from);
  ListCollectionsRequest(ListCollectionsRequest&& from) noexcept
    : ListCollectionsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollectionsRequest& operator=(const ListCollectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollectionsRequest& operator=(ListCollectionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollectionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollectionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollectionsRequest*>(
               &_ListCollectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListCollectionsRequest& a, ListCollectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollectionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollectionsRequest* New() const final {
    return CreateMaybeMessage<ListCollectionsRequest>(nullptr);
  }

  ListCollectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollectionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollectionsRequest& from);
  void MergeFrom(const ListCollectionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollectionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.ListCollectionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kTransferFieldNumber = 2,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // bool transfer = 2;
  void clear_transfer();
  bool transfer() const;
  void set_transfer(bool value);
  private:
  bool _internal_transfer() const;
  void _internal_set_transfer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.ListCollectionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  bool transfer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class ListCollectionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.ListCollectionsResponse) */ {
 public:
  ListCollectionsResponse();
  virtual ~ListCollectionsResponse();

  ListCollectionsResponse(const ListCollectionsResponse& from);
  ListCollectionsResponse(ListCollectionsResponse&& from) noexcept
    : ListCollectionsResponse() {
    *this = ::std::move(from);
  }

  inline ListCollectionsResponse& operator=(const ListCollectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollectionsResponse& operator=(ListCollectionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollectionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollectionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCollectionsResponse*>(
               &_ListCollectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListCollectionsResponse& a, ListCollectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollectionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollectionsResponse* New() const final {
    return CreateMaybeMessage<ListCollectionsResponse>(nullptr);
  }

  ListCollectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollectionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollectionsResponse& from);
  void MergeFrom(const ListCollectionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollectionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.ListCollectionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionsFieldNumber = 4,
    kStatesFieldNumber = 5,
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // repeated .olama.CreateCollectionRequest collections = 4;
  int collections_size() const;
  private:
  int _internal_collections_size() const;
  public:
  void clear_collections();
  ::olama::CreateCollectionRequest* mutable_collections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CreateCollectionRequest >*
      mutable_collections();
  private:
  const ::olama::CreateCollectionRequest& _internal_collections(int index) const;
  ::olama::CreateCollectionRequest* _internal_add_collections();
  public:
  const ::olama::CreateCollectionRequest& collections(int index) const;
  ::olama::CreateCollectionRequest* add_collections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CreateCollectionRequest >&
      collections() const;

  // repeated .olama.CollectionState states = 5;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::olama::CollectionState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CollectionState >*
      mutable_states();
  private:
  const ::olama::CollectionState& _internal_states(int index) const;
  ::olama::CollectionState* _internal_add_states();
  public:
  const ::olama::CollectionState& states(int index) const;
  ::olama::CollectionState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CollectionState >&
      states() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.ListCollectionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CreateCollectionRequest > collections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CollectionState > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class IndexParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.IndexParams) */ {
 public:
  IndexParams();
  virtual ~IndexParams();

  IndexParams(const IndexParams& from);
  IndexParams(IndexParams&& from) noexcept
    : IndexParams() {
    *this = ::std::move(from);
  }

  inline IndexParams& operator=(const IndexParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexParams& operator=(IndexParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexParams* internal_default_instance() {
    return reinterpret_cast<const IndexParams*>(
               &_IndexParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(IndexParams& a, IndexParams& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexParams* New() const final {
    return CreateMaybeMessage<IndexParams>(nullptr);
  }

  IndexParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexParams& from);
  void MergeFrom(const IndexParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.IndexParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 1,
    kEfConstructionFieldNumber = 2,
    kNprobeFieldNumber = 3,
    kNlistFieldNumber = 4,
  };
  // uint32 M = 1;
  void clear_m();
  ::PROTOBUF_NAMESPACE_ID::uint32 m() const;
  void set_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_m() const;
  void _internal_set_m(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 efConstruction = 2;
  void clear_efconstruction();
  ::PROTOBUF_NAMESPACE_ID::uint32 efconstruction() const;
  void set_efconstruction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_efconstruction() const;
  void _internal_set_efconstruction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nprobe = 3;
  void clear_nprobe();
  ::PROTOBUF_NAMESPACE_ID::uint32 nprobe() const;
  void set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nprobe() const;
  void _internal_set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nlist = 4;
  void clear_nlist();
  ::PROTOBUF_NAMESPACE_ID::uint32 nlist() const;
  void set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nlist() const;
  void _internal_set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.IndexParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 efconstruction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nprobe_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class IndexColumn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.IndexColumn) */ {
 public:
  IndexColumn();
  virtual ~IndexColumn();

  IndexColumn(const IndexColumn& from);
  IndexColumn(IndexColumn&& from) noexcept
    : IndexColumn() {
    *this = ::std::move(from);
  }

  inline IndexColumn& operator=(const IndexColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexColumn& operator=(IndexColumn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexColumn* internal_default_instance() {
    return reinterpret_cast<const IndexColumn*>(
               &_IndexColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(IndexColumn& a, IndexColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexColumn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexColumn* New() const final {
    return CreateMaybeMessage<IndexColumn>(nullptr);
  }

  IndexColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexColumn& from);
  void MergeFrom(const IndexColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.IndexColumn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 1,
    kFieldTypeFieldNumber = 2,
    kIndexTypeFieldNumber = 3,
    kMetricTypeFieldNumber = 5,
    kFieldElementTypeFieldNumber = 9,
    kParamsFieldNumber = 8,
    kDimensionFieldNumber = 4,
  };
  // string fieldName = 1;
  void clear_fieldname();
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);
  private:
  const std::string& _internal_fieldname() const;
  void _internal_set_fieldname(const std::string& value);
  std::string* _internal_mutable_fieldname();
  public:

  // string fieldType = 2;
  void clear_fieldtype();
  const std::string& fieldtype() const;
  void set_fieldtype(const std::string& value);
  void set_fieldtype(std::string&& value);
  void set_fieldtype(const char* value);
  void set_fieldtype(const char* value, size_t size);
  std::string* mutable_fieldtype();
  std::string* release_fieldtype();
  void set_allocated_fieldtype(std::string* fieldtype);
  private:
  const std::string& _internal_fieldtype() const;
  void _internal_set_fieldtype(const std::string& value);
  std::string* _internal_mutable_fieldtype();
  public:

  // string indexType = 3;
  void clear_indextype();
  const std::string& indextype() const;
  void set_indextype(const std::string& value);
  void set_indextype(std::string&& value);
  void set_indextype(const char* value);
  void set_indextype(const char* value, size_t size);
  std::string* mutable_indextype();
  std::string* release_indextype();
  void set_allocated_indextype(std::string* indextype);
  private:
  const std::string& _internal_indextype() const;
  void _internal_set_indextype(const std::string& value);
  std::string* _internal_mutable_indextype();
  public:

  // string metricType = 5;
  void clear_metrictype();
  const std::string& metrictype() const;
  void set_metrictype(const std::string& value);
  void set_metrictype(std::string&& value);
  void set_metrictype(const char* value);
  void set_metrictype(const char* value, size_t size);
  std::string* mutable_metrictype();
  std::string* release_metrictype();
  void set_allocated_metrictype(std::string* metrictype);
  private:
  const std::string& _internal_metrictype() const;
  void _internal_set_metrictype(const std::string& value);
  std::string* _internal_mutable_metrictype();
  public:

  // string fieldElementType = 9;
  void clear_fieldelementtype();
  const std::string& fieldelementtype() const;
  void set_fieldelementtype(const std::string& value);
  void set_fieldelementtype(std::string&& value);
  void set_fieldelementtype(const char* value);
  void set_fieldelementtype(const char* value, size_t size);
  std::string* mutable_fieldelementtype();
  std::string* release_fieldelementtype();
  void set_allocated_fieldelementtype(std::string* fieldelementtype);
  private:
  const std::string& _internal_fieldelementtype() const;
  void _internal_set_fieldelementtype(const std::string& value);
  std::string* _internal_mutable_fieldelementtype();
  public:

  // .olama.IndexParams params = 8;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::olama::IndexParams& params() const;
  ::olama::IndexParams* release_params();
  ::olama::IndexParams* mutable_params();
  void set_allocated_params(::olama::IndexParams* params);
  private:
  const ::olama::IndexParams& _internal_params() const;
  ::olama::IndexParams* _internal_mutable_params();
  public:

  // uint32 dimension = 4;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dimension() const;
  void _internal_set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.IndexColumn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indextype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metrictype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldelementtype_;
  ::olama::IndexParams* params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class IndexStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.IndexStatus) */ {
 public:
  IndexStatus();
  virtual ~IndexStatus();

  IndexStatus(const IndexStatus& from);
  IndexStatus(IndexStatus&& from) noexcept
    : IndexStatus() {
    *this = ::std::move(from);
  }

  inline IndexStatus& operator=(const IndexStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexStatus& operator=(IndexStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexStatus* internal_default_instance() {
    return reinterpret_cast<const IndexStatus*>(
               &_IndexStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(IndexStatus& a, IndexStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexStatus* New() const final {
    return CreateMaybeMessage<IndexStatus>(nullptr);
  }

  IndexStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexStatus& from);
  void MergeFrom(const IndexStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.IndexStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kProgressFieldNumber = 2,
    kStartTimeFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string progress = 2;
  void clear_progress();
  const std::string& progress() const;
  void set_progress(const std::string& value);
  void set_progress(std::string&& value);
  void set_progress(const char* value);
  void set_progress(const char* value, size_t size);
  std::string* mutable_progress();
  std::string* release_progress();
  void set_allocated_progress(std::string* progress);
  private:
  const std::string& _internal_progress() const;
  void _internal_set_progress(const std::string& value);
  std::string* _internal_mutable_progress();
  public:

  // string startTime = 3;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // @@protoc_insertion_point(class_scope:olama.IndexStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr progress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionRequest_IndexesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateCollectionRequest_IndexesEntry_DoNotUse, 
    std::string, ::olama::IndexColumn,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateCollectionRequest_IndexesEntry_DoNotUse, 
    std::string, ::olama::IndexColumn,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CreateCollectionRequest_IndexesEntry_DoNotUse();
  CreateCollectionRequest_IndexesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateCollectionRequest_IndexesEntry_DoNotUse& other);
  static const CreateCollectionRequest_IndexesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateCollectionRequest_IndexesEntry_DoNotUse*>(&_CreateCollectionRequest_IndexesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "olama.CreateCollectionRequest.IndexesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[29];
  }

  public:
};

// -------------------------------------------------------------------

class CreateCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.CreateCollectionRequest) */ {
 public:
  CreateCollectionRequest();
  virtual ~CreateCollectionRequest();

  CreateCollectionRequest(const CreateCollectionRequest& from);
  CreateCollectionRequest(CreateCollectionRequest&& from) noexcept
    : CreateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateCollectionRequest& operator=(const CreateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionRequest& operator=(CreateCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionRequest*>(
               &_CreateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CreateCollectionRequest& a, CreateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCollectionRequest* New() const final {
    return CreateMaybeMessage<CreateCollectionRequest>(nullptr);
  }

  CreateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCollectionRequest& from);
  void MergeFrom(const CreateCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.CreateCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIndexesFieldNumber = 8,
    kAliasListFieldNumber = 10,
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kCreateTimeFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kIndexStatusFieldNumber = 9,
    kEmbeddingParamsFieldNumber = 11,
    kTtlConfigFieldNumber = 13,
    kReplicaNumFieldNumber = 3,
    kShardNumFieldNumber = 4,
    kSizeFieldNumber = 5,
    kVersionFieldNumber = 12,
  };
  // map<string, .olama.IndexColumn> indexes = 8;
  int indexes_size() const;
  private:
  int _internal_indexes_size() const;
  public:
  void clear_indexes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >&
      _internal_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >*
      _internal_mutable_indexes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >&
      indexes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >*
      mutable_indexes();

  // repeated string alias_list = 10;
  int alias_list_size() const;
  private:
  int _internal_alias_list_size() const;
  public:
  void clear_alias_list();
  const std::string& alias_list(int index) const;
  std::string* mutable_alias_list(int index);
  void set_alias_list(int index, const std::string& value);
  void set_alias_list(int index, std::string&& value);
  void set_alias_list(int index, const char* value);
  void set_alias_list(int index, const char* value, size_t size);
  std::string* add_alias_list();
  void add_alias_list(const std::string& value);
  void add_alias_list(std::string&& value);
  void add_alias_list(const char* value);
  void add_alias_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alias_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alias_list();
  private:
  const std::string& _internal_alias_list(int index) const;
  std::string* _internal_add_alias_list();
  public:

  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string createTime = 6;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // string description = 7;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .olama.IndexStatus indexStatus = 9;
  bool has_indexstatus() const;
  private:
  bool _internal_has_indexstatus() const;
  public:
  void clear_indexstatus();
  const ::olama::IndexStatus& indexstatus() const;
  ::olama::IndexStatus* release_indexstatus();
  ::olama::IndexStatus* mutable_indexstatus();
  void set_allocated_indexstatus(::olama::IndexStatus* indexstatus);
  private:
  const ::olama::IndexStatus& _internal_indexstatus() const;
  ::olama::IndexStatus* _internal_mutable_indexstatus();
  public:

  // .olama.EmbeddingParams embeddingParams = 11;
  bool has_embeddingparams() const;
  private:
  bool _internal_has_embeddingparams() const;
  public:
  void clear_embeddingparams();
  const ::olama::EmbeddingParams& embeddingparams() const;
  ::olama::EmbeddingParams* release_embeddingparams();
  ::olama::EmbeddingParams* mutable_embeddingparams();
  void set_allocated_embeddingparams(::olama::EmbeddingParams* embeddingparams);
  private:
  const ::olama::EmbeddingParams& _internal_embeddingparams() const;
  ::olama::EmbeddingParams* _internal_mutable_embeddingparams();
  public:

  // .olama.TTLConfig ttlConfig = 13;
  bool has_ttlconfig() const;
  private:
  bool _internal_has_ttlconfig() const;
  public:
  void clear_ttlconfig();
  const ::olama::TTLConfig& ttlconfig() const;
  ::olama::TTLConfig* release_ttlconfig();
  ::olama::TTLConfig* mutable_ttlconfig();
  void set_allocated_ttlconfig(::olama::TTLConfig* ttlconfig);
  private:
  const ::olama::TTLConfig& _internal_ttlconfig() const;
  ::olama::TTLConfig* _internal_mutable_ttlconfig();
  public:

  // uint32 replicaNum = 3;
  void clear_replicanum();
  ::PROTOBUF_NAMESPACE_ID::uint32 replicanum() const;
  void set_replicanum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replicanum() const;
  void _internal_set_replicanum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shardNum = 4;
  void clear_shardnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 shardnum() const;
  void set_shardnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shardnum() const;
  void _internal_set_shardnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 version = 12;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.CreateCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateCollectionRequest_IndexesEntry_DoNotUse,
      std::string, ::olama::IndexColumn,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > indexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alias_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::olama::IndexStatus* indexstatus_;
  ::olama::EmbeddingParams* embeddingparams_;
  ::olama::TTLConfig* ttlconfig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replicanum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shardnum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.CreateCollectionResponse) */ {
 public:
  CreateCollectionResponse();
  virtual ~CreateCollectionResponse();

  CreateCollectionResponse(const CreateCollectionResponse& from);
  CreateCollectionResponse(CreateCollectionResponse&& from) noexcept
    : CreateCollectionResponse() {
    *this = ::std::move(from);
  }

  inline CreateCollectionResponse& operator=(const CreateCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionResponse& operator=(CreateCollectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCollectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionResponse*>(
               &_CreateCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CreateCollectionResponse& a, CreateCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCollectionResponse* New() const final {
    return CreateMaybeMessage<CreateCollectionResponse>(nullptr);
  }

  CreateCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCollectionResponse& from);
  void MergeFrom(const CreateCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.CreateCollectionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.CreateCollectionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DropCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DropCollectionRequest) */ {
 public:
  DropCollectionRequest();
  virtual ~DropCollectionRequest();

  DropCollectionRequest(const DropCollectionRequest& from);
  DropCollectionRequest(DropCollectionRequest&& from) noexcept
    : DropCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DropCollectionRequest& operator=(const DropCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCollectionRequest& operator=(DropCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DropCollectionRequest*>(
               &_DropCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DropCollectionRequest& a, DropCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCollectionRequest* New() const final {
    return CreateMaybeMessage<DropCollectionRequest>(nullptr);
  }

  DropCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCollectionRequest& from);
  void MergeFrom(const DropCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DropCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kForceFieldNumber = 3,
    kWithoutAliasFieldNumber = 4,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // bool without_alias = 4;
  void clear_without_alias();
  bool without_alias() const;
  void set_without_alias(bool value);
  private:
  bool _internal_without_alias() const;
  void _internal_set_without_alias(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DropCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  bool force_;
  bool without_alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DropCollectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DropCollectionResponse) */ {
 public:
  DropCollectionResponse();
  virtual ~DropCollectionResponse();

  DropCollectionResponse(const DropCollectionResponse& from);
  DropCollectionResponse(DropCollectionResponse&& from) noexcept
    : DropCollectionResponse() {
    *this = ::std::move(from);
  }

  inline DropCollectionResponse& operator=(const DropCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropCollectionResponse& operator=(DropCollectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropCollectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const DropCollectionResponse*>(
               &_DropCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DropCollectionResponse& a, DropCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DropCollectionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropCollectionResponse* New() const final {
    return CreateMaybeMessage<DropCollectionResponse>(nullptr);
  }

  DropCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropCollectionResponse& from);
  void MergeFrom(const DropCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DropCollectionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DropCollectionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class TruncateCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.TruncateCollectionRequest) */ {
 public:
  TruncateCollectionRequest();
  virtual ~TruncateCollectionRequest();

  TruncateCollectionRequest(const TruncateCollectionRequest& from);
  TruncateCollectionRequest(TruncateCollectionRequest&& from) noexcept
    : TruncateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline TruncateCollectionRequest& operator=(const TruncateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncateCollectionRequest& operator=(TruncateCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TruncateCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const TruncateCollectionRequest*>(
               &_TruncateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TruncateCollectionRequest& a, TruncateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncateCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TruncateCollectionRequest* New() const final {
    return CreateMaybeMessage<TruncateCollectionRequest>(nullptr);
  }

  TruncateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TruncateCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TruncateCollectionRequest& from);
  void MergeFrom(const TruncateCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncateCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.TruncateCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kOnlyTruncateAnnIndexFieldNumber = 3,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // bool only_truncate_ann_index = 3;
  void clear_only_truncate_ann_index();
  bool only_truncate_ann_index() const;
  void set_only_truncate_ann_index(bool value);
  private:
  bool _internal_only_truncate_ann_index() const;
  void _internal_set_only_truncate_ann_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.TruncateCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  bool only_truncate_ann_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class TruncateCollectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.TruncateCollectionResponse) */ {
 public:
  TruncateCollectionResponse();
  virtual ~TruncateCollectionResponse();

  TruncateCollectionResponse(const TruncateCollectionResponse& from);
  TruncateCollectionResponse(TruncateCollectionResponse&& from) noexcept
    : TruncateCollectionResponse() {
    *this = ::std::move(from);
  }

  inline TruncateCollectionResponse& operator=(const TruncateCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TruncateCollectionResponse& operator=(TruncateCollectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TruncateCollectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const TruncateCollectionResponse*>(
               &_TruncateCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TruncateCollectionResponse& a, TruncateCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TruncateCollectionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TruncateCollectionResponse* New() const final {
    return CreateMaybeMessage<TruncateCollectionResponse>(nullptr);
  }

  TruncateCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TruncateCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TruncateCollectionResponse& from);
  void MergeFrom(const TruncateCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TruncateCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.TruncateCollectionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.TruncateCollectionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class RebuildIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.RebuildIndexRequest) */ {
 public:
  RebuildIndexRequest();
  virtual ~RebuildIndexRequest();

  RebuildIndexRequest(const RebuildIndexRequest& from);
  RebuildIndexRequest(RebuildIndexRequest&& from) noexcept
    : RebuildIndexRequest() {
    *this = ::std::move(from);
  }

  inline RebuildIndexRequest& operator=(const RebuildIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildIndexRequest& operator=(RebuildIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebuildIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RebuildIndexRequest* internal_default_instance() {
    return reinterpret_cast<const RebuildIndexRequest*>(
               &_RebuildIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RebuildIndexRequest& a, RebuildIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildIndexRequest* New() const final {
    return CreateMaybeMessage<RebuildIndexRequest>(nullptr);
  }

  RebuildIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebuildIndexRequest& from);
  void MergeFrom(const RebuildIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.RebuildIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kThrottleFieldNumber = 4,
    kDropBeforeRebuildFieldNumber = 3,
    kDisableTrainFieldNumber = 5,
    kForceRebuildFieldNumber = 6,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // int32 throttle = 4;
  void clear_throttle();
  ::PROTOBUF_NAMESPACE_ID::int32 throttle() const;
  void set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throttle() const;
  void _internal_set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool dropBeforeRebuild = 3;
  void clear_dropbeforerebuild();
  bool dropbeforerebuild() const;
  void set_dropbeforerebuild(bool value);
  private:
  bool _internal_dropbeforerebuild() const;
  void _internal_set_dropbeforerebuild(bool value);
  public:

  // bool disable_train = 5;
  void clear_disable_train();
  bool disable_train() const;
  void set_disable_train(bool value);
  private:
  bool _internal_disable_train() const;
  void _internal_set_disable_train(bool value);
  public:

  // bool force_rebuild = 6;
  void clear_force_rebuild();
  bool force_rebuild() const;
  void set_force_rebuild(bool value);
  private:
  bool _internal_force_rebuild() const;
  void _internal_set_force_rebuild(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.RebuildIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::int32 throttle_;
  bool dropbeforerebuild_;
  bool disable_train_;
  bool force_rebuild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class RebuildIndexResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.RebuildIndexResponse) */ {
 public:
  RebuildIndexResponse();
  virtual ~RebuildIndexResponse();

  RebuildIndexResponse(const RebuildIndexResponse& from);
  RebuildIndexResponse(RebuildIndexResponse&& from) noexcept
    : RebuildIndexResponse() {
    *this = ::std::move(from);
  }

  inline RebuildIndexResponse& operator=(const RebuildIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildIndexResponse& operator=(RebuildIndexResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebuildIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RebuildIndexResponse* internal_default_instance() {
    return reinterpret_cast<const RebuildIndexResponse*>(
               &_RebuildIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RebuildIndexResponse& a, RebuildIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildIndexResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildIndexResponse* New() const final {
    return CreateMaybeMessage<RebuildIndexResponse>(nullptr);
  }

  RebuildIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebuildIndexResponse& from);
  void MergeFrom(const RebuildIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.RebuildIndexResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdsFieldNumber = 4,
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // repeated string task_ids = 4;
  int task_ids_size() const;
  private:
  int _internal_task_ids_size() const;
  public:
  void clear_task_ids();
  const std::string& task_ids(int index) const;
  std::string* mutable_task_ids(int index);
  void set_task_ids(int index, const std::string& value);
  void set_task_ids(int index, std::string&& value);
  void set_task_ids(int index, const char* value);
  void set_task_ids(int index, const char* value, size_t size);
  std::string* add_task_ids();
  void add_task_ids(const std::string& value);
  void add_task_ids(std::string&& value);
  void add_task_ids(const char* value);
  void add_task_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_ids();
  private:
  const std::string& _internal_task_ids(int index) const;
  std::string* _internal_add_task_ids();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.RebuildIndexResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class UpsertRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.UpsertRequest) */ {
 public:
  UpsertRequest();
  virtual ~UpsertRequest();

  UpsertRequest(const UpsertRequest& from);
  UpsertRequest(UpsertRequest&& from) noexcept
    : UpsertRequest() {
    *this = ::std::move(from);
  }

  inline UpsertRequest& operator=(const UpsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpsertRequest& operator=(UpsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpsertRequest* internal_default_instance() {
    return reinterpret_cast<const UpsertRequest*>(
               &_UpsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(UpsertRequest& a, UpsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpsertRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpsertRequest* New() const final {
    return CreateMaybeMessage<UpsertRequest>(nullptr);
  }

  UpsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpsertRequest& from);
  void MergeFrom(const UpsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.UpsertRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsFieldNumber = 4,
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kBuildIndexFieldNumber = 3,
  };
  // repeated .olama.Document documents = 4;
  int documents_size() const;
  private:
  int _internal_documents_size() const;
  public:
  void clear_documents();
  ::olama::Document* mutable_documents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >*
      mutable_documents();
  private:
  const ::olama::Document& _internal_documents(int index) const;
  ::olama::Document* _internal_add_documents();
  public:
  const ::olama::Document& documents(int index) const;
  ::olama::Document* add_documents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >&
      documents() const;

  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // bool buildIndex = 3;
  void clear_buildindex();
  bool buildindex() const;
  void set_buildindex(bool value);
  private:
  bool _internal_buildindex() const;
  void _internal_set_buildindex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.UpsertRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document > documents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  bool buildindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class EmbeddingExtraInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.EmbeddingExtraInfo) */ {
 public:
  EmbeddingExtraInfo();
  virtual ~EmbeddingExtraInfo();

  EmbeddingExtraInfo(const EmbeddingExtraInfo& from);
  EmbeddingExtraInfo(EmbeddingExtraInfo&& from) noexcept
    : EmbeddingExtraInfo() {
    *this = ::std::move(from);
  }

  inline EmbeddingExtraInfo& operator=(const EmbeddingExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbeddingExtraInfo& operator=(EmbeddingExtraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbeddingExtraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbeddingExtraInfo* internal_default_instance() {
    return reinterpret_cast<const EmbeddingExtraInfo*>(
               &_EmbeddingExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(EmbeddingExtraInfo& a, EmbeddingExtraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbeddingExtraInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbeddingExtraInfo* New() const final {
    return CreateMaybeMessage<EmbeddingExtraInfo>(nullptr);
  }

  EmbeddingExtraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbeddingExtraInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbeddingExtraInfo& from);
  void MergeFrom(const EmbeddingExtraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbeddingExtraInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.EmbeddingExtraInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenUsedFieldNumber = 1,
  };
  // uint64 token_used = 1;
  void clear_token_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_used() const;
  void set_token_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_used() const;
  void _internal_set_token_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.EmbeddingExtraInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_used_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class UpsertResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.UpsertResponse) */ {
 public:
  UpsertResponse();
  virtual ~UpsertResponse();

  UpsertResponse(const UpsertResponse& from);
  UpsertResponse(UpsertResponse&& from) noexcept
    : UpsertResponse() {
    *this = ::std::move(from);
  }

  inline UpsertResponse& operator=(const UpsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpsertResponse& operator=(UpsertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpsertResponse* internal_default_instance() {
    return reinterpret_cast<const UpsertResponse*>(
               &_UpsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UpsertResponse& a, UpsertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpsertResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpsertResponse* New() const final {
    return CreateMaybeMessage<UpsertResponse>(nullptr);
  }

  UpsertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpsertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpsertResponse& from);
  void MergeFrom(const UpsertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpsertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.UpsertResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kWarningFieldNumber = 5,
    kEmbeddingExtraInfoFieldNumber = 6,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // string warning = 5;
  void clear_warning();
  const std::string& warning() const;
  void set_warning(const std::string& value);
  void set_warning(std::string&& value);
  void set_warning(const char* value);
  void set_warning(const char* value, size_t size);
  std::string* mutable_warning();
  std::string* release_warning();
  void set_allocated_warning(std::string* warning);
  private:
  const std::string& _internal_warning() const;
  void _internal_set_warning(const std::string& value);
  std::string* _internal_mutable_warning();
  public:

  // .olama.EmbeddingExtraInfo embedding_extra_info = 6;
  bool has_embedding_extra_info() const;
  private:
  bool _internal_has_embedding_extra_info() const;
  public:
  void clear_embedding_extra_info();
  const ::olama::EmbeddingExtraInfo& embedding_extra_info() const;
  ::olama::EmbeddingExtraInfo* release_embedding_extra_info();
  ::olama::EmbeddingExtraInfo* mutable_embedding_extra_info();
  void set_allocated_embedding_extra_info(::olama::EmbeddingExtraInfo* embedding_extra_info);
  private:
  const ::olama::EmbeddingExtraInfo& _internal_embedding_extra_info() const;
  ::olama::EmbeddingExtraInfo* _internal_mutable_embedding_extra_info();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.UpsertResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warning_;
  ::olama::EmbeddingExtraInfo* embedding_extra_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.UpdateRequest) */ {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.UpdateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kQueryFieldNumber = 3,
    kUpdateFieldNumber = 4,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // .olama.QueryCond query = 3;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::olama::QueryCond& query() const;
  ::olama::QueryCond* release_query();
  ::olama::QueryCond* mutable_query();
  void set_allocated_query(::olama::QueryCond* query);
  private:
  const ::olama::QueryCond& _internal_query() const;
  ::olama::QueryCond* _internal_mutable_query();
  public:

  // .olama.Document update = 4;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::olama::Document& update() const;
  ::olama::Document* release_update();
  ::olama::Document* mutable_update();
  void set_allocated_update(::olama::Document* update);
  private:
  const ::olama::Document& _internal_update() const;
  ::olama::Document* _internal_mutable_update();
  public:

  // @@protoc_insertion_point(class_scope:olama.UpdateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::olama::QueryCond* query_;
  ::olama::Document* update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.UpdateResponse) */ {
 public:
  UpdateResponse();
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const final {
    return CreateMaybeMessage<UpdateResponse>(nullptr);
  }

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.UpdateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kWarningFieldNumber = 5,
    kEmbeddingExtraInfoFieldNumber = 6,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // string warning = 5;
  void clear_warning();
  const std::string& warning() const;
  void set_warning(const std::string& value);
  void set_warning(std::string&& value);
  void set_warning(const char* value);
  void set_warning(const char* value, size_t size);
  std::string* mutable_warning();
  std::string* release_warning();
  void set_allocated_warning(std::string* warning);
  private:
  const std::string& _internal_warning() const;
  void _internal_set_warning(const std::string& value);
  std::string* _internal_mutable_warning();
  public:

  // .olama.EmbeddingExtraInfo embedding_extra_info = 6;
  bool has_embedding_extra_info() const;
  private:
  bool _internal_has_embedding_extra_info() const;
  public:
  void clear_embedding_extra_info();
  const ::olama::EmbeddingExtraInfo& embedding_extra_info() const;
  ::olama::EmbeddingExtraInfo* release_embedding_extra_info();
  ::olama::EmbeddingExtraInfo* mutable_embedding_extra_info();
  void set_allocated_embedding_extra_info(::olama::EmbeddingExtraInfo* embedding_extra_info);
  private:
  const ::olama::EmbeddingExtraInfo& _internal_embedding_extra_info() const;
  ::olama::EmbeddingExtraInfo* _internal_mutable_embedding_extra_info();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.UpdateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warning_;
  ::olama::EmbeddingExtraInfo* embedding_extra_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kQueryFieldNumber = 3,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // .olama.QueryCond query = 3;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::olama::QueryCond& query() const;
  ::olama::QueryCond* release_query();
  ::olama::QueryCond* mutable_query();
  void set_allocated_query(::olama::QueryCond* query);
  private:
  const ::olama::QueryCond& _internal_query() const;
  ::olama::QueryCond* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:olama.DeleteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::olama::QueryCond* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(nullptr);
  }

  DeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DeleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kAffectedCountFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 affectedCount = 4;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DeleteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class QueryCond :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.QueryCond) */ {
 public:
  QueryCond();
  virtual ~QueryCond();

  QueryCond(const QueryCond& from);
  QueryCond(QueryCond&& from) noexcept
    : QueryCond() {
    *this = ::std::move(from);
  }

  inline QueryCond& operator=(const QueryCond& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCond& operator=(QueryCond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryCond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryCond* internal_default_instance() {
    return reinterpret_cast<const QueryCond*>(
               &_QueryCond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(QueryCond& a, QueryCond& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCond* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryCond* New() const final {
    return CreateMaybeMessage<QueryCond>(nullptr);
  }

  QueryCond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryCond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryCond& from);
  void MergeFrom(const QueryCond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.QueryCond";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentIdsFieldNumber = 1,
    kIndexIdsFieldNumber = 2,
    kOutputFieldsFieldNumber = 7,
    kFilterFieldNumber = 4,
    kLimitFieldNumber = 5,
    kOffsetFieldNumber = 6,
    kRetrieveVectorFieldNumber = 3,
  };
  // repeated string documentIds = 1;
  int documentids_size() const;
  private:
  int _internal_documentids_size() const;
  public:
  void clear_documentids();
  const std::string& documentids(int index) const;
  std::string* mutable_documentids(int index);
  void set_documentids(int index, const std::string& value);
  void set_documentids(int index, std::string&& value);
  void set_documentids(int index, const char* value);
  void set_documentids(int index, const char* value, size_t size);
  std::string* add_documentids();
  void add_documentids(const std::string& value);
  void add_documentids(std::string&& value);
  void add_documentids(const char* value);
  void add_documentids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& documentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_documentids();
  private:
  const std::string& _internal_documentids(int index) const;
  std::string* _internal_add_documentids();
  public:

  // repeated uint64 indexIds = 2;
  int indexids_size() const;
  private:
  int _internal_indexids_size() const;
  public:
  void clear_indexids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indexids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_indexids() const;
  void _internal_add_indexids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_indexids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 indexids(int index) const;
  void set_indexids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_indexids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      indexids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_indexids();

  // repeated string outputFields = 7;
  int outputfields_size() const;
  private:
  int _internal_outputfields_size() const;
  public:
  void clear_outputfields();
  const std::string& outputfields(int index) const;
  std::string* mutable_outputfields(int index);
  void set_outputfields(int index, const std::string& value);
  void set_outputfields(int index, std::string&& value);
  void set_outputfields(int index, const char* value);
  void set_outputfields(int index, const char* value, size_t size);
  std::string* add_outputfields();
  void add_outputfields(const std::string& value);
  void add_outputfields(std::string&& value);
  void add_outputfields(const char* value);
  void add_outputfields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputfields();
  private:
  const std::string& _internal_outputfields(int index) const;
  std::string* _internal_add_outputfields();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int64 limit = 5;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 6;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool retrieveVector = 3;
  void clear_retrievevector();
  bool retrievevector() const;
  void set_retrievevector(bool value);
  private:
  bool _internal_retrievevector() const;
  void _internal_set_retrievevector(bool value);
  public:

  // @@protoc_insertion_point(class_scope:olama.QueryCond)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> documentids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > indexids_;
  mutable std::atomic<int> _indexids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputfields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  bool retrievevector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.QueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kReadConsistencyFieldNumber = 4,
    kQueryFieldNumber = 3,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string readConsistency = 4;
  void clear_readconsistency();
  const std::string& readconsistency() const;
  void set_readconsistency(const std::string& value);
  void set_readconsistency(std::string&& value);
  void set_readconsistency(const char* value);
  void set_readconsistency(const char* value, size_t size);
  std::string* mutable_readconsistency();
  std::string* release_readconsistency();
  void set_allocated_readconsistency(std::string* readconsistency);
  private:
  const std::string& _internal_readconsistency() const;
  void _internal_set_readconsistency(const std::string& value);
  std::string* _internal_mutable_readconsistency();
  public:

  // .olama.QueryCond query = 3;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::olama::QueryCond& query() const;
  ::olama::QueryCond* release_query();
  ::olama::QueryCond* mutable_query();
  void set_allocated_query(::olama::QueryCond* query);
  private:
  const ::olama::QueryCond& _internal_query() const;
  ::olama::QueryCond* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:olama.QueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr readconsistency_;
  ::olama::QueryCond* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(nullptr);
  }

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.QueryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsFieldNumber = 4,
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kCountFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // repeated .olama.Document documents = 4;
  int documents_size() const;
  private:
  int _internal_documents_size() const;
  public:
  void clear_documents();
  ::olama::Document* mutable_documents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >*
      mutable_documents();
  private:
  const ::olama::Document& _internal_documents(int index) const;
  ::olama::Document* _internal_add_documents();
  public:
  const ::olama::Document& documents(int index) const;
  ::olama::Document* add_documents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >&
      documents() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.QueryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document > documents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class SearchResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.SearchResult) */ {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResult* New() const final {
    return CreateMaybeMessage<SearchResult>(nullptr);
  }

  SearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.SearchResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsFieldNumber = 1,
  };
  // repeated .olama.Document documents = 1;
  int documents_size() const;
  private:
  int _internal_documents_size() const;
  public:
  void clear_documents();
  ::olama::Document* mutable_documents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >*
      mutable_documents();
  private:
  const ::olama::Document& _internal_documents(int index) const;
  ::olama::Document* _internal_add_documents();
  public:
  const ::olama::Document& documents(int index) const;
  ::olama::Document* add_documents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >&
      documents() const;

  // @@protoc_insertion_point(class_scope:olama.SearchResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document > documents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class SearchParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.SearchParams) */ {
 public:
  SearchParams();
  virtual ~SearchParams();

  SearchParams(const SearchParams& from);
  SearchParams(SearchParams&& from) noexcept
    : SearchParams() {
    *this = ::std::move(from);
  }

  inline SearchParams& operator=(const SearchParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchParams& operator=(SearchParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchParams* internal_default_instance() {
    return reinterpret_cast<const SearchParams*>(
               &_SearchParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SearchParams& a, SearchParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchParams* New() const final {
    return CreateMaybeMessage<SearchParams>(nullptr);
  }

  SearchParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchParams& from);
  void MergeFrom(const SearchParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.SearchParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNprobeFieldNumber = 1,
    kEfFieldNumber = 2,
    kRadiusFieldNumber = 3,
  };
  // uint32 nprobe = 1;
  void clear_nprobe();
  ::PROTOBUF_NAMESPACE_ID::uint32 nprobe() const;
  void set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nprobe() const;
  void _internal_set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ef = 2;
  void clear_ef();
  ::PROTOBUF_NAMESPACE_ID::uint32 ef() const;
  void set_ef(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ef() const;
  void _internal_set_ef(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float radius = 3;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:olama.SearchParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nprobe_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ef_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class VectorArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.VectorArray) */ {
 public:
  VectorArray();
  virtual ~VectorArray();

  VectorArray(const VectorArray& from);
  VectorArray(VectorArray&& from) noexcept
    : VectorArray() {
    *this = ::std::move(from);
  }

  inline VectorArray& operator=(const VectorArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorArray& operator=(VectorArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorArray* internal_default_instance() {
    return reinterpret_cast<const VectorArray*>(
               &_VectorArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(VectorArray& a, VectorArray& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorArray* New() const final {
    return CreateMaybeMessage<VectorArray>(nullptr);
  }

  VectorArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorArray& from);
  void MergeFrom(const VectorArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.VectorArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated float vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  float _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vector() const;
  void _internal_add_vector(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vector();
  public:
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector();

  // @@protoc_insertion_point(class_scope:olama.VectorArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_;
  mutable std::atomic<int> _vector_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class SearchCond :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.SearchCond) */ {
 public:
  SearchCond();
  virtual ~SearchCond();

  SearchCond(const SearchCond& from);
  SearchCond(SearchCond&& from) noexcept
    : SearchCond() {
    *this = ::std::move(from);
  }

  inline SearchCond& operator=(const SearchCond& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchCond& operator=(SearchCond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchCond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchCond* internal_default_instance() {
    return reinterpret_cast<const SearchCond*>(
               &_SearchCond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SearchCond& a, SearchCond& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchCond* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchCond* New() const final {
    return CreateMaybeMessage<SearchCond>(nullptr);
  }

  SearchCond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchCond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchCond& from);
  void MergeFrom(const SearchCond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchCond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.SearchCond";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorsFieldNumber = 1,
    kDocumentIdsFieldNumber = 2,
    kOutputfieldsFieldNumber = 7,
    kEmbeddingItemsFieldNumber = 8,
    kFilterFieldNumber = 4,
    kParamsFieldNumber = 3,
    kRetrieveVectorFieldNumber = 5,
    kLimitFieldNumber = 6,
  };
  // repeated .olama.VectorArray vectors = 1;
  int vectors_size() const;
  private:
  int _internal_vectors_size() const;
  public:
  void clear_vectors();
  ::olama::VectorArray* mutable_vectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::VectorArray >*
      mutable_vectors();
  private:
  const ::olama::VectorArray& _internal_vectors(int index) const;
  ::olama::VectorArray* _internal_add_vectors();
  public:
  const ::olama::VectorArray& vectors(int index) const;
  ::olama::VectorArray* add_vectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::VectorArray >&
      vectors() const;

  // repeated string documentIds = 2;
  int documentids_size() const;
  private:
  int _internal_documentids_size() const;
  public:
  void clear_documentids();
  const std::string& documentids(int index) const;
  std::string* mutable_documentids(int index);
  void set_documentids(int index, const std::string& value);
  void set_documentids(int index, std::string&& value);
  void set_documentids(int index, const char* value);
  void set_documentids(int index, const char* value, size_t size);
  std::string* add_documentids();
  void add_documentids(const std::string& value);
  void add_documentids(std::string&& value);
  void add_documentids(const char* value);
  void add_documentids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& documentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_documentids();
  private:
  const std::string& _internal_documentids(int index) const;
  std::string* _internal_add_documentids();
  public:

  // repeated string outputfields = 7;
  int outputfields_size() const;
  private:
  int _internal_outputfields_size() const;
  public:
  void clear_outputfields();
  const std::string& outputfields(int index) const;
  std::string* mutable_outputfields(int index);
  void set_outputfields(int index, const std::string& value);
  void set_outputfields(int index, std::string&& value);
  void set_outputfields(int index, const char* value);
  void set_outputfields(int index, const char* value, size_t size);
  std::string* add_outputfields();
  void add_outputfields(const std::string& value);
  void add_outputfields(std::string&& value);
  void add_outputfields(const char* value);
  void add_outputfields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputfields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputfields();
  private:
  const std::string& _internal_outputfields(int index) const;
  std::string* _internal_add_outputfields();
  public:

  // repeated string embeddingItems = 8;
  int embeddingitems_size() const;
  private:
  int _internal_embeddingitems_size() const;
  public:
  void clear_embeddingitems();
  const std::string& embeddingitems(int index) const;
  std::string* mutable_embeddingitems(int index);
  void set_embeddingitems(int index, const std::string& value);
  void set_embeddingitems(int index, std::string&& value);
  void set_embeddingitems(int index, const char* value);
  void set_embeddingitems(int index, const char* value, size_t size);
  std::string* add_embeddingitems();
  void add_embeddingitems(const std::string& value);
  void add_embeddingitems(std::string&& value);
  void add_embeddingitems(const char* value);
  void add_embeddingitems(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& embeddingitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_embeddingitems();
  private:
  const std::string& _internal_embeddingitems(int index) const;
  std::string* _internal_add_embeddingitems();
  public:

  // string filter = 4;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .olama.SearchParams params = 3;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::olama::SearchParams& params() const;
  ::olama::SearchParams* release_params();
  ::olama::SearchParams* mutable_params();
  void set_allocated_params(::olama::SearchParams* params);
  private:
  const ::olama::SearchParams& _internal_params() const;
  ::olama::SearchParams* _internal_mutable_params();
  public:

  // bool retrieveVector = 5;
  void clear_retrievevector();
  bool retrievevector() const;
  void set_retrievevector(bool value);
  private:
  bool _internal_retrievevector() const;
  void _internal_set_retrievevector(bool value);
  public:

  // uint32 limit = 6;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.SearchCond)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::VectorArray > vectors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> documentids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputfields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> embeddingitems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::olama::SearchParams* params_;
  bool retrievevector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.SearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kReadConsistencyFieldNumber = 4,
    kSearchFieldNumber = 3,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string readConsistency = 4;
  void clear_readconsistency();
  const std::string& readconsistency() const;
  void set_readconsistency(const std::string& value);
  void set_readconsistency(std::string&& value);
  void set_readconsistency(const char* value);
  void set_readconsistency(const char* value, size_t size);
  std::string* mutable_readconsistency();
  std::string* release_readconsistency();
  void set_allocated_readconsistency(std::string* readconsistency);
  private:
  const std::string& _internal_readconsistency() const;
  void _internal_set_readconsistency(const std::string& value);
  std::string* _internal_mutable_readconsistency();
  public:

  // .olama.SearchCond search = 3;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const ::olama::SearchCond& search() const;
  ::olama::SearchCond* release_search();
  ::olama::SearchCond* mutable_search();
  void set_allocated_search(::olama::SearchCond* search);
  private:
  const ::olama::SearchCond& _internal_search() const;
  ::olama::SearchCond* _internal_mutable_search();
  public:

  // @@protoc_insertion_point(class_scope:olama.SearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr readconsistency_;
  ::olama::SearchCond* search_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class Filter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.Filter) */ {
 public:
  Filter();
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.Filter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string expr = 1;
  void clear_expr();
  const std::string& expr() const;
  void set_expr(const std::string& value);
  void set_expr(std::string&& value);
  void set_expr(const char* value);
  void set_expr(const char* value, size_t size);
  std::string* mutable_expr();
  std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.Filter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
  float radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.SearchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 4,
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kWarningFieldNumber = 5,
    kEmbeddingExtraInfoFieldNumber = 6,
    kCodeFieldNumber = 1,
  };
  // repeated .olama.SearchResult results = 4;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::olama::SearchResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::SearchResult >*
      mutable_results();
  private:
  const ::olama::SearchResult& _internal_results(int index) const;
  ::olama::SearchResult* _internal_add_results();
  public:
  const ::olama::SearchResult& results(int index) const;
  ::olama::SearchResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::SearchResult >&
      results() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // string warning = 5;
  void clear_warning();
  const std::string& warning() const;
  void set_warning(const std::string& value);
  void set_warning(std::string&& value);
  void set_warning(const char* value);
  void set_warning(const char* value, size_t size);
  std::string* mutable_warning();
  std::string* release_warning();
  void set_allocated_warning(std::string* warning);
  private:
  const std::string& _internal_warning() const;
  void _internal_set_warning(const std::string& value);
  std::string* _internal_mutable_warning();
  public:

  // .olama.EmbeddingExtraInfo embedding_extra_info = 6;
  bool has_embedding_extra_info() const;
  private:
  bool _internal_has_embedding_extra_info() const;
  public:
  void clear_embedding_extra_info();
  const ::olama::EmbeddingExtraInfo& embedding_extra_info() const;
  ::olama::EmbeddingExtraInfo* release_embedding_extra_info();
  ::olama::EmbeddingExtraInfo* mutable_embedding_extra_info();
  void set_allocated_embedding_extra_info(::olama::EmbeddingExtraInfo* embedding_extra_info);
  private:
  const ::olama::EmbeddingExtraInfo& _internal_embedding_extra_info() const;
  ::olama::EmbeddingExtraInfo* _internal_mutable_embedding_extra_info();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.SearchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::SearchResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warning_;
  ::olama::EmbeddingExtraInfo* embedding_extra_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DatabaseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DatabaseRequest) */ {
 public:
  DatabaseRequest();
  virtual ~DatabaseRequest();

  DatabaseRequest(const DatabaseRequest& from);
  DatabaseRequest(DatabaseRequest&& from) noexcept
    : DatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DatabaseRequest& operator=(const DatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseRequest& operator=(DatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DatabaseRequest*>(
               &_DatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DatabaseRequest& a, DatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseRequest* New() const final {
    return CreateMaybeMessage<DatabaseRequest>(nullptr);
  }

  DatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatabaseRequest& from);
  void MergeFrom(const DatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DatabaseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseFieldNumber = 1,
    kDbTypeFieldNumber = 2,
  };
  // string database = 1;
  void clear_database();
  const std::string& database() const;
  void set_database(const std::string& value);
  void set_database(std::string&& value);
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  std::string* mutable_database();
  std::string* release_database();
  void set_allocated_database(std::string* database);
  private:
  const std::string& _internal_database() const;
  void _internal_set_database(const std::string& value);
  std::string* _internal_mutable_database();
  public:

  // .olama.DataType dbType = 2;
  void clear_dbtype();
  ::olama::DataType dbtype() const;
  void set_dbtype(::olama::DataType value);
  private:
  ::olama::DataType _internal_dbtype() const;
  void _internal_set_dbtype(::olama::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DatabaseRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_;
  int dbtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// -------------------------------------------------------------------

class DatabaseResponse_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DatabaseResponse_InfoEntry_DoNotUse, 
    std::string, ::olama::DatabaseItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DatabaseResponse_InfoEntry_DoNotUse, 
    std::string, ::olama::DatabaseItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DatabaseResponse_InfoEntry_DoNotUse();
  DatabaseResponse_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DatabaseResponse_InfoEntry_DoNotUse& other);
  static const DatabaseResponse_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DatabaseResponse_InfoEntry_DoNotUse*>(&_DatabaseResponse_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "olama.DatabaseResponse.InfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[56];
  }

  public:
};

// -------------------------------------------------------------------

class DatabaseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:olama.DatabaseResponse) */ {
 public:
  DatabaseResponse();
  virtual ~DatabaseResponse();

  DatabaseResponse(const DatabaseResponse& from);
  DatabaseResponse(DatabaseResponse&& from) noexcept
    : DatabaseResponse() {
    *this = ::std::move(from);
  }

  inline DatabaseResponse& operator=(const DatabaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseResponse& operator=(DatabaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatabaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseResponse* internal_default_instance() {
    return reinterpret_cast<const DatabaseResponse*>(
               &_DatabaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(DatabaseResponse& a, DatabaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseResponse* New() const final {
    return CreateMaybeMessage<DatabaseResponse>(nullptr);
  }

  DatabaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatabaseResponse& from);
  void MergeFrom(const DatabaseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "olama.DatabaseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_olama_2eproto);
    return ::descriptor_table_olama_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 4,
    kInfoFieldNumber = 6,
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kAffectedCountFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // repeated string databases = 4;
  int databases_size() const;
  private:
  int _internal_databases_size() const;
  public:
  void clear_databases();
  const std::string& databases(int index) const;
  std::string* mutable_databases(int index);
  void set_databases(int index, const std::string& value);
  void set_databases(int index, std::string&& value);
  void set_databases(int index, const char* value);
  void set_databases(int index, const char* value, size_t size);
  std::string* add_databases();
  void add_databases(const std::string& value);
  void add_databases(std::string&& value);
  void add_databases(const char* value);
  void add_databases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& databases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_databases();
  private:
  const std::string& _internal_databases(int index) const;
  std::string* _internal_add_databases();
  public:

  // map<string, .olama.DatabaseItem> info = 6;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >*
      mutable_info();

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // uint64 affectedCount = 5;
  void clear_affectedcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount() const;
  void set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_affectedcount() const;
  void _internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:olama.DatabaseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> databases_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DatabaseResponse_InfoEntry_DoNotUse,
      std::string, ::olama::DatabaseItem,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 affectedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_olama_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Document

// string id = 1;
inline void Document::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Document::id() const {
  // @@protoc_insertion_point(field_get:olama.Document.id)
  return _internal_id();
}
inline void Document::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:olama.Document.id)
}
inline std::string* Document::mutable_id() {
  // @@protoc_insertion_point(field_mutable:olama.Document.id)
  return _internal_mutable_id();
}
inline const std::string& Document::_internal_id() const {
  return id_.GetNoArena();
}
inline void Document::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Document.id)
}
inline void Document::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Document.id)
}
inline void Document::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Document.id)
}
inline std::string* Document::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document::release_id() {
  // @@protoc_insertion_point(field_release:olama.Document.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:olama.Document.id)
}

// repeated float vector = 2;
inline int Document::_internal_vector_size() const {
  return vector_.size();
}
inline int Document::vector_size() const {
  return _internal_vector_size();
}
inline void Document::clear_vector() {
  vector_.Clear();
}
inline float Document::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline float Document::vector(int index) const {
  // @@protoc_insertion_point(field_get:olama.Document.vector)
  return _internal_vector(index);
}
inline void Document::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:olama.Document.vector)
}
inline void Document::_internal_add_vector(float value) {
  vector_.Add(value);
}
inline void Document::add_vector(float value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:olama.Document.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Document::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Document::vector() const {
  // @@protoc_insertion_point(field_list:olama.Document.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Document::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Document::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:olama.Document.vector)
  return _internal_mutable_vector();
}

// float score = 3;
inline void Document::clear_score() {
  score_ = 0;
}
inline float Document::_internal_score() const {
  return score_;
}
inline float Document::score() const {
  // @@protoc_insertion_point(field_get:olama.Document.score)
  return _internal_score();
}
inline void Document::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Document::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:olama.Document.score)
}

// map<string, .olama.Field> fields = 4;
inline int Document::_internal_fields_size() const {
  return fields_.size();
}
inline int Document::fields_size() const {
  return _internal_fields_size();
}
inline void Document::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >&
Document::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >&
Document::fields() const {
  // @@protoc_insertion_point(field_map:olama.Document.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >*
Document::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::Field >*
Document::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:olama.Document.fields)
  return _internal_mutable_fields();
}

// uint64 index_id = 5;
inline void Document::clear_index_id() {
  index_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Document::_internal_index_id() const {
  return index_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Document::index_id() const {
  // @@protoc_insertion_point(field_get:olama.Document.index_id)
  return _internal_index_id();
}
inline void Document::_internal_set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_id_ = value;
}
inline void Document::set_index_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_id(value);
  // @@protoc_insertion_point(field_set:olama.Document.index_id)
}

// string from_peer = 6;
inline void Document::clear_from_peer() {
  from_peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Document::from_peer() const {
  // @@protoc_insertion_point(field_get:olama.Document.from_peer)
  return _internal_from_peer();
}
inline void Document::set_from_peer(const std::string& value) {
  _internal_set_from_peer(value);
  // @@protoc_insertion_point(field_set:olama.Document.from_peer)
}
inline std::string* Document::mutable_from_peer() {
  // @@protoc_insertion_point(field_mutable:olama.Document.from_peer)
  return _internal_mutable_from_peer();
}
inline const std::string& Document::_internal_from_peer() const {
  return from_peer_.GetNoArena();
}
inline void Document::_internal_set_from_peer(const std::string& value) {
  
  from_peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document::set_from_peer(std::string&& value) {
  
  from_peer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Document.from_peer)
}
inline void Document::set_from_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Document.from_peer)
}
inline void Document::set_from_peer(const char* value, size_t size) {
  
  from_peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Document.from_peer)
}
inline std::string* Document::_internal_mutable_from_peer() {
  
  return from_peer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document::release_from_peer() {
  // @@protoc_insertion_point(field_release:olama.Document.from_peer)
  
  return from_peer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_from_peer(std::string* from_peer) {
  if (from_peer != nullptr) {
    
  } else {
    
  }
  from_peer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_peer);
  // @@protoc_insertion_point(field_set_allocated:olama.Document.from_peer)
}

// int32 shard_idx = 7;
inline void Document::clear_shard_idx() {
  shard_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Document::_internal_shard_idx() const {
  return shard_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Document::shard_idx() const {
  // @@protoc_insertion_point(field_get:olama.Document.shard_idx)
  return _internal_shard_idx();
}
inline void Document::_internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_idx_ = value;
}
inline void Document::set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_idx(value);
  // @@protoc_insertion_point(field_set:olama.Document.shard_idx)
}

// uint64 vector_offset = 8;
inline void Document::clear_vector_offset() {
  vector_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Document::_internal_vector_offset() const {
  return vector_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Document::vector_offset() const {
  // @@protoc_insertion_point(field_get:olama.Document.vector_offset)
  return _internal_vector_offset();
}
inline void Document::_internal_set_vector_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vector_offset_ = value;
}
inline void Document::set_vector_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vector_offset(value);
  // @@protoc_insertion_point(field_set:olama.Document.vector_offset)
}

// bytes doc_info = 9;
inline void Document::clear_doc_info() {
  doc_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Document::doc_info() const {
  // @@protoc_insertion_point(field_get:olama.Document.doc_info)
  return _internal_doc_info();
}
inline void Document::set_doc_info(const std::string& value) {
  _internal_set_doc_info(value);
  // @@protoc_insertion_point(field_set:olama.Document.doc_info)
}
inline std::string* Document::mutable_doc_info() {
  // @@protoc_insertion_point(field_mutable:olama.Document.doc_info)
  return _internal_mutable_doc_info();
}
inline const std::string& Document::_internal_doc_info() const {
  return doc_info_.GetNoArena();
}
inline void Document::_internal_set_doc_info(const std::string& value) {
  
  doc_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document::set_doc_info(std::string&& value) {
  
  doc_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Document.doc_info)
}
inline void Document::set_doc_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Document.doc_info)
}
inline void Document::set_doc_info(const void* value, size_t size) {
  
  doc_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Document.doc_info)
}
inline std::string* Document::_internal_mutable_doc_info() {
  
  return doc_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document::release_doc_info() {
  // @@protoc_insertion_point(field_release:olama.Document.doc_info)
  
  return doc_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_doc_info(std::string* doc_info) {
  if (doc_info != nullptr) {
    
  } else {
    
  }
  doc_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_info);
  // @@protoc_insertion_point(field_set_allocated:olama.Document.doc_info)
}

// -------------------------------------------------------------------

// Field_StringArray

// repeated bytes str_arr = 1;
inline int Field_StringArray::_internal_str_arr_size() const {
  return str_arr_.size();
}
inline int Field_StringArray::str_arr_size() const {
  return _internal_str_arr_size();
}
inline void Field_StringArray::clear_str_arr() {
  str_arr_.Clear();
}
inline std::string* Field_StringArray::add_str_arr() {
  // @@protoc_insertion_point(field_add_mutable:olama.Field.StringArray.str_arr)
  return _internal_add_str_arr();
}
inline const std::string& Field_StringArray::_internal_str_arr(int index) const {
  return str_arr_.Get(index);
}
inline const std::string& Field_StringArray::str_arr(int index) const {
  // @@protoc_insertion_point(field_get:olama.Field.StringArray.str_arr)
  return _internal_str_arr(index);
}
inline std::string* Field_StringArray::mutable_str_arr(int index) {
  // @@protoc_insertion_point(field_mutable:olama.Field.StringArray.str_arr)
  return str_arr_.Mutable(index);
}
inline void Field_StringArray::set_str_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.Field.StringArray.str_arr)
  str_arr_.Mutable(index)->assign(value);
}
inline void Field_StringArray::set_str_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.Field.StringArray.str_arr)
  str_arr_.Mutable(index)->assign(std::move(value));
}
inline void Field_StringArray::set_str_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.Field.StringArray.str_arr)
}
inline void Field_StringArray::set_str_arr(int index, const void* value, size_t size) {
  str_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.Field.StringArray.str_arr)
}
inline std::string* Field_StringArray::_internal_add_str_arr() {
  return str_arr_.Add();
}
inline void Field_StringArray::add_str_arr(const std::string& value) {
  str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.Field.StringArray.str_arr)
}
inline void Field_StringArray::add_str_arr(std::string&& value) {
  str_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.Field.StringArray.str_arr)
}
inline void Field_StringArray::add_str_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.Field.StringArray.str_arr)
}
inline void Field_StringArray::add_str_arr(const void* value, size_t size) {
  str_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.Field.StringArray.str_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Field_StringArray::str_arr() const {
  // @@protoc_insertion_point(field_list:olama.Field.StringArray.str_arr)
  return str_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Field_StringArray::mutable_str_arr() {
  // @@protoc_insertion_point(field_mutable_list:olama.Field.StringArray.str_arr)
  return &str_arr_;
}

// -------------------------------------------------------------------

// Field

// bytes val_str = 1;
inline bool Field::_internal_has_val_str() const {
  return oneof_val_case() == kValStr;
}
inline void Field::set_has_val_str() {
  _oneof_case_[0] = kValStr;
}
inline void Field::clear_val_str() {
  if (_internal_has_val_str()) {
    oneof_val_.val_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_val();
  }
}
inline const std::string& Field::val_str() const {
  // @@protoc_insertion_point(field_get:olama.Field.val_str)
  return _internal_val_str();
}
inline void Field::set_val_str(const std::string& value) {
  _internal_set_val_str(value);
  // @@protoc_insertion_point(field_set:olama.Field.val_str)
}
inline std::string* Field::mutable_val_str() {
  // @@protoc_insertion_point(field_mutable:olama.Field.val_str)
  return _internal_mutable_val_str();
}
inline const std::string& Field::_internal_val_str() const {
  if (_internal_has_val_str()) {
    return oneof_val_.val_str_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Field::_internal_set_val_str(const std::string& value) {
  if (!_internal_has_val_str()) {
    clear_oneof_val();
    set_has_val_str();
    oneof_val_.val_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_val_.val_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Field::set_val_str(std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.Field.val_str)
  if (!_internal_has_val_str()) {
    clear_oneof_val();
    set_has_val_str();
    oneof_val_.val_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_val_.val_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Field.val_str)
}
inline void Field::set_val_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_val_str()) {
    clear_oneof_val();
    set_has_val_str();
    oneof_val_.val_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_val_.val_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Field.val_str)
}
inline void Field::set_val_str(const void* value, size_t size) {
  if (!_internal_has_val_str()) {
    clear_oneof_val();
    set_has_val_str();
    oneof_val_.val_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_val_.val_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Field.val_str)
}
inline std::string* Field::_internal_mutable_val_str() {
  if (!_internal_has_val_str()) {
    clear_oneof_val();
    set_has_val_str();
    oneof_val_.val_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return oneof_val_.val_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Field::release_val_str() {
  // @@protoc_insertion_point(field_release:olama.Field.val_str)
  if (_internal_has_val_str()) {
    clear_has_oneof_val();
    return oneof_val_.val_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Field::set_allocated_val_str(std::string* val_str) {
  if (has_oneof_val()) {
    clear_oneof_val();
  }
  if (val_str != nullptr) {
    set_has_val_str();
    oneof_val_.val_str_.UnsafeSetDefault(val_str);
  }
  // @@protoc_insertion_point(field_set_allocated:olama.Field.val_str)
}

// uint64 val_u64 = 2;
inline bool Field::_internal_has_val_u64() const {
  return oneof_val_case() == kValU64;
}
inline void Field::set_has_val_u64() {
  _oneof_case_[0] = kValU64;
}
inline void Field::clear_val_u64() {
  if (_internal_has_val_u64()) {
    oneof_val_.val_u64_ = PROTOBUF_ULONGLONG(0);
    clear_has_oneof_val();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Field::_internal_val_u64() const {
  if (_internal_has_val_u64()) {
    return oneof_val_.val_u64_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Field::_internal_set_val_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_val_u64()) {
    clear_oneof_val();
    set_has_val_u64();
  }
  oneof_val_.val_u64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Field::val_u64() const {
  // @@protoc_insertion_point(field_get:olama.Field.val_u64)
  return _internal_val_u64();
}
inline void Field::set_val_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_val_u64(value);
  // @@protoc_insertion_point(field_set:olama.Field.val_u64)
}

// double val_double = 3;
inline bool Field::_internal_has_val_double() const {
  return oneof_val_case() == kValDouble;
}
inline void Field::set_has_val_double() {
  _oneof_case_[0] = kValDouble;
}
inline void Field::clear_val_double() {
  if (_internal_has_val_double()) {
    oneof_val_.val_double_ = 0;
    clear_has_oneof_val();
  }
}
inline double Field::_internal_val_double() const {
  if (_internal_has_val_double()) {
    return oneof_val_.val_double_;
  }
  return 0;
}
inline void Field::_internal_set_val_double(double value) {
  if (!_internal_has_val_double()) {
    clear_oneof_val();
    set_has_val_double();
  }
  oneof_val_.val_double_ = value;
}
inline double Field::val_double() const {
  // @@protoc_insertion_point(field_get:olama.Field.val_double)
  return _internal_val_double();
}
inline void Field::set_val_double(double value) {
  _internal_set_val_double(value);
  // @@protoc_insertion_point(field_set:olama.Field.val_double)
}

// .olama.Field.StringArray val_str_arr = 4;
inline bool Field::_internal_has_val_str_arr() const {
  return oneof_val_case() == kValStrArr;
}
inline bool Field::has_val_str_arr() const {
  return _internal_has_val_str_arr();
}
inline void Field::set_has_val_str_arr() {
  _oneof_case_[0] = kValStrArr;
}
inline void Field::clear_val_str_arr() {
  if (_internal_has_val_str_arr()) {
    delete oneof_val_.val_str_arr_;
    clear_has_oneof_val();
  }
}
inline ::olama::Field_StringArray* Field::release_val_str_arr() {
  // @@protoc_insertion_point(field_release:olama.Field.val_str_arr)
  if (_internal_has_val_str_arr()) {
    clear_has_oneof_val();
      ::olama::Field_StringArray* temp = oneof_val_.val_str_arr_;
    oneof_val_.val_str_arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::olama::Field_StringArray& Field::_internal_val_str_arr() const {
  return _internal_has_val_str_arr()
      ? *oneof_val_.val_str_arr_
      : *reinterpret_cast< ::olama::Field_StringArray*>(&::olama::_Field_StringArray_default_instance_);
}
inline const ::olama::Field_StringArray& Field::val_str_arr() const {
  // @@protoc_insertion_point(field_get:olama.Field.val_str_arr)
  return _internal_val_str_arr();
}
inline ::olama::Field_StringArray* Field::_internal_mutable_val_str_arr() {
  if (!_internal_has_val_str_arr()) {
    clear_oneof_val();
    set_has_val_str_arr();
    oneof_val_.val_str_arr_ = CreateMaybeMessage< ::olama::Field_StringArray >(
        GetArenaNoVirtual());
  }
  return oneof_val_.val_str_arr_;
}
inline ::olama::Field_StringArray* Field::mutable_val_str_arr() {
  // @@protoc_insertion_point(field_mutable:olama.Field.val_str_arr)
  return _internal_mutable_val_str_arr();
}

inline bool Field::has_oneof_val() const {
  return oneof_val_case() != ONEOF_VAL_NOT_SET;
}
inline void Field::clear_has_oneof_val() {
  _oneof_case_[0] = ONEOF_VAL_NOT_SET;
}
inline Field::OneofValCase Field::oneof_val_case() const {
  return Field::OneofValCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ShardState

// .olama.ShardDataState data_state = 1;
inline void ShardState::clear_data_state() {
  data_state_ = 0;
}
inline ::olama::ShardDataState ShardState::_internal_data_state() const {
  return static_cast< ::olama::ShardDataState >(data_state_);
}
inline ::olama::ShardDataState ShardState::data_state() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.data_state)
  return _internal_data_state();
}
inline void ShardState::_internal_set_data_state(::olama::ShardDataState value) {
  
  data_state_ = value;
}
inline void ShardState::set_data_state(::olama::ShardDataState value) {
  _internal_set_data_state(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.data_state)
}

// uint64 estimate_index_mem_size = 2;
inline void ShardState::clear_estimate_index_mem_size() {
  estimate_index_mem_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardState::_internal_estimate_index_mem_size() const {
  return estimate_index_mem_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardState::estimate_index_mem_size() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.estimate_index_mem_size)
  return _internal_estimate_index_mem_size();
}
inline void ShardState::_internal_set_estimate_index_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  estimate_index_mem_size_ = value;
}
inline void ShardState::set_estimate_index_mem_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_estimate_index_mem_size(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.estimate_index_mem_size)
}

// bool snapshoting = 3;
inline void ShardState::clear_snapshoting() {
  snapshoting_ = false;
}
inline bool ShardState::_internal_snapshoting() const {
  return snapshoting_;
}
inline bool ShardState::snapshoting() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.snapshoting)
  return _internal_snapshoting();
}
inline void ShardState::_internal_set_snapshoting(bool value) {
  
  snapshoting_ = value;
}
inline void ShardState::set_snapshoting(bool value) {
  _internal_set_snapshoting(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.snapshoting)
}

// int64 last_applied_index = 4;
inline void ShardState::clear_last_applied_index() {
  last_applied_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::_internal_last_applied_index() const {
  return last_applied_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::last_applied_index() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.last_applied_index)
  return _internal_last_applied_index();
}
inline void ShardState::_internal_set_last_applied_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_applied_index_ = value;
}
inline void ShardState::set_last_applied_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_applied_index(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.last_applied_index)
}

// int64 last_applied_term = 5;
inline void ShardState::clear_last_applied_term() {
  last_applied_term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::_internal_last_applied_term() const {
  return last_applied_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::last_applied_term() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.last_applied_term)
  return _internal_last_applied_term();
}
inline void ShardState::_internal_set_last_applied_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_applied_term_ = value;
}
inline void ShardState::set_last_applied_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_applied_term(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.last_applied_term)
}

// int64 id_seed = 6;
inline void ShardState::clear_id_seed() {
  id_seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::_internal_id_seed() const {
  return id_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::id_seed() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.id_seed)
  return _internal_id_seed();
}
inline void ShardState::_internal_set_id_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_seed_ = value;
}
inline void ShardState::set_id_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id_seed(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.id_seed)
}

// uint64 added_items = 7;
inline void ShardState::clear_added_items() {
  added_items_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardState::_internal_added_items() const {
  return added_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardState::added_items() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.added_items)
  return _internal_added_items();
}
inline void ShardState::_internal_set_added_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  added_items_ = value;
}
inline void ShardState::set_added_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_added_items(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.added_items)
}

// int64 data_state_change_time = 8;
inline void ShardState::clear_data_state_change_time() {
  data_state_change_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::_internal_data_state_change_time() const {
  return data_state_change_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardState::data_state_change_time() const {
  // @@protoc_insertion_point(field_get:olama.ShardState.data_state_change_time)
  return _internal_data_state_change_time();
}
inline void ShardState::_internal_set_data_state_change_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_state_change_time_ = value;
}
inline void ShardState::set_data_state_change_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_state_change_time(value);
  // @@protoc_insertion_point(field_set:olama.ShardState.data_state_change_time)
}

// -------------------------------------------------------------------

// Shard

// string collection = 1;
inline void Shard::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shard::collection() const {
  // @@protoc_insertion_point(field_get:olama.Shard.collection)
  return _internal_collection();
}
inline void Shard::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.Shard.collection)
}
inline std::string* Shard::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.Shard.collection)
  return _internal_mutable_collection();
}
inline const std::string& Shard::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void Shard::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shard::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Shard.collection)
}
inline void Shard::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Shard.collection)
}
inline void Shard::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Shard.collection)
}
inline std::string* Shard::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shard::release_collection() {
  // @@protoc_insertion_point(field_release:olama.Shard.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shard::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.Shard.collection)
}

// int32 shard_idx = 2;
inline void Shard::clear_shard_idx() {
  shard_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shard::_internal_shard_idx() const {
  return shard_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shard::shard_idx() const {
  // @@protoc_insertion_point(field_get:olama.Shard.shard_idx)
  return _internal_shard_idx();
}
inline void Shard::_internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_idx_ = value;
}
inline void Shard::set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_idx(value);
  // @@protoc_insertion_point(field_set:olama.Shard.shard_idx)
}

// bool is_leader = 3;
inline void Shard::clear_is_leader() {
  is_leader_ = false;
}
inline bool Shard::_internal_is_leader() const {
  return is_leader_;
}
inline bool Shard::is_leader() const {
  // @@protoc_insertion_point(field_get:olama.Shard.is_leader)
  return _internal_is_leader();
}
inline void Shard::_internal_set_is_leader(bool value) {
  
  is_leader_ = value;
}
inline void Shard::set_is_leader(bool value) {
  _internal_set_is_leader(value);
  // @@protoc_insertion_point(field_set:olama.Shard.is_leader)
}

// bool following = 4;
inline void Shard::clear_following() {
  following_ = false;
}
inline bool Shard::_internal_following() const {
  return following_;
}
inline bool Shard::following() const {
  // @@protoc_insertion_point(field_get:olama.Shard.following)
  return _internal_following();
}
inline void Shard::_internal_set_following(bool value) {
  
  following_ = value;
}
inline void Shard::set_following(bool value) {
  _internal_set_following(value);
  // @@protoc_insertion_point(field_set:olama.Shard.following)
}

// .olama.ShardState state = 5;
inline bool Shard::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Shard::has_state() const {
  return _internal_has_state();
}
inline void Shard::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::olama::ShardState& Shard::_internal_state() const {
  const ::olama::ShardState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::ShardState*>(
      &::olama::_ShardState_default_instance_);
}
inline const ::olama::ShardState& Shard::state() const {
  // @@protoc_insertion_point(field_get:olama.Shard.state)
  return _internal_state();
}
inline ::olama::ShardState* Shard::release_state() {
  // @@protoc_insertion_point(field_release:olama.Shard.state)
  
  ::olama::ShardState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::olama::ShardState* Shard::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::ShardState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::olama::ShardState* Shard::mutable_state() {
  // @@protoc_insertion_point(field_mutable:olama.Shard.state)
  return _internal_mutable_state();
}
inline void Shard::set_allocated_state(::olama::ShardState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:olama.Shard.state)
}

// repeated string nodes = 6;
inline int Shard::_internal_nodes_size() const {
  return nodes_.size();
}
inline int Shard::nodes_size() const {
  return _internal_nodes_size();
}
inline void Shard::clear_nodes() {
  nodes_.Clear();
}
inline std::string* Shard::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:olama.Shard.nodes)
  return _internal_add_nodes();
}
inline const std::string& Shard::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const std::string& Shard::nodes(int index) const {
  // @@protoc_insertion_point(field_get:olama.Shard.nodes)
  return _internal_nodes(index);
}
inline std::string* Shard::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:olama.Shard.nodes)
  return nodes_.Mutable(index);
}
inline void Shard::set_nodes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.Shard.nodes)
  nodes_.Mutable(index)->assign(value);
}
inline void Shard::set_nodes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.Shard.nodes)
  nodes_.Mutable(index)->assign(std::move(value));
}
inline void Shard::set_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.Shard.nodes)
}
inline void Shard::set_nodes(int index, const char* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.Shard.nodes)
}
inline std::string* Shard::_internal_add_nodes() {
  return nodes_.Add();
}
inline void Shard::add_nodes(const std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.Shard.nodes)
}
inline void Shard::add_nodes(std::string&& value) {
  nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.Shard.nodes)
}
inline void Shard::add_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.Shard.nodes)
}
inline void Shard::add_nodes(const char* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.Shard.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Shard::nodes() const {
  // @@protoc_insertion_point(field_list:olama.Shard.nodes)
  return nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Shard::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:olama.Shard.nodes)
  return &nodes_;
}

// string from_node = 7;
inline void Shard::clear_from_node() {
  from_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Shard::from_node() const {
  // @@protoc_insertion_point(field_get:olama.Shard.from_node)
  return _internal_from_node();
}
inline void Shard::set_from_node(const std::string& value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:olama.Shard.from_node)
}
inline std::string* Shard::mutable_from_node() {
  // @@protoc_insertion_point(field_mutable:olama.Shard.from_node)
  return _internal_mutable_from_node();
}
inline const std::string& Shard::_internal_from_node() const {
  return from_node_.GetNoArena();
}
inline void Shard::_internal_set_from_node(const std::string& value) {
  
  from_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Shard::set_from_node(std::string&& value) {
  
  from_node_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Shard.from_node)
}
inline void Shard::set_from_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Shard.from_node)
}
inline void Shard::set_from_node(const char* value, size_t size) {
  
  from_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Shard.from_node)
}
inline std::string* Shard::_internal_mutable_from_node() {
  
  return from_node_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Shard::release_from_node() {
  // @@protoc_insertion_point(field_release:olama.Shard.from_node)
  
  return from_node_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Shard::set_allocated_from_node(std::string* from_node) {
  if (from_node != nullptr) {
    
  } else {
    
  }
  from_node_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_node);
  // @@protoc_insertion_point(field_set_allocated:olama.Shard.from_node)
}

// int64 version = 8;
inline void Shard::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Shard::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Shard::version() const {
  // @@protoc_insertion_point(field_get:olama.Shard.version)
  return _internal_version();
}
inline void Shard::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void Shard::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:olama.Shard.version)
}

// -------------------------------------------------------------------

// AliasItem

// string alias = 1;
inline void AliasItem::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AliasItem::alias() const {
  // @@protoc_insertion_point(field_get:olama.AliasItem.alias)
  return _internal_alias();
}
inline void AliasItem::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:olama.AliasItem.alias)
}
inline std::string* AliasItem::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:olama.AliasItem.alias)
  return _internal_mutable_alias();
}
inline const std::string& AliasItem::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void AliasItem::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AliasItem::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.AliasItem.alias)
}
inline void AliasItem::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.AliasItem.alias)
}
inline void AliasItem::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.AliasItem.alias)
}
inline std::string* AliasItem::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AliasItem::release_alias() {
  // @@protoc_insertion_point(field_release:olama.AliasItem.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AliasItem::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:olama.AliasItem.alias)
}

// string collection = 2;
inline void AliasItem::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AliasItem::collection() const {
  // @@protoc_insertion_point(field_get:olama.AliasItem.collection)
  return _internal_collection();
}
inline void AliasItem::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.AliasItem.collection)
}
inline std::string* AliasItem::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.AliasItem.collection)
  return _internal_mutable_collection();
}
inline const std::string& AliasItem::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void AliasItem::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AliasItem::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.AliasItem.collection)
}
inline void AliasItem::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.AliasItem.collection)
}
inline void AliasItem::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.AliasItem.collection)
}
inline std::string* AliasItem::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AliasItem::release_collection() {
  // @@protoc_insertion_point(field_release:olama.AliasItem.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AliasItem::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.AliasItem.collection)
}

// -------------------------------------------------------------------

// DatabaseItem

// int64 create_time = 1;
inline void DatabaseItem::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatabaseItem::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatabaseItem::create_time() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseItem.create_time)
  return _internal_create_time();
}
inline void DatabaseItem::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
}
inline void DatabaseItem::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseItem.create_time)
}

// .olama.DataType db_type = 2;
inline void DatabaseItem::clear_db_type() {
  db_type_ = 0;
}
inline ::olama::DataType DatabaseItem::_internal_db_type() const {
  return static_cast< ::olama::DataType >(db_type_);
}
inline ::olama::DataType DatabaseItem::db_type() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseItem.db_type)
  return _internal_db_type();
}
inline void DatabaseItem::_internal_set_db_type(::olama::DataType value) {
  
  db_type_ = value;
}
inline void DatabaseItem::set_db_type(::olama::DataType value) {
  _internal_set_db_type(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseItem.db_type)
}

// -------------------------------------------------------------------

// EmbeddingParams

// string field = 1;
inline void EmbeddingParams::clear_field() {
  field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmbeddingParams::field() const {
  // @@protoc_insertion_point(field_get:olama.EmbeddingParams.field)
  return _internal_field();
}
inline void EmbeddingParams::set_field(const std::string& value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:olama.EmbeddingParams.field)
}
inline std::string* EmbeddingParams::mutable_field() {
  // @@protoc_insertion_point(field_mutable:olama.EmbeddingParams.field)
  return _internal_mutable_field();
}
inline const std::string& EmbeddingParams::_internal_field() const {
  return field_.GetNoArena();
}
inline void EmbeddingParams::_internal_set_field(const std::string& value) {
  
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbeddingParams::set_field(std::string&& value) {
  
  field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.EmbeddingParams.field)
}
inline void EmbeddingParams::set_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.EmbeddingParams.field)
}
inline void EmbeddingParams::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.EmbeddingParams.field)
}
inline std::string* EmbeddingParams::_internal_mutable_field() {
  
  return field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbeddingParams::release_field() {
  // @@protoc_insertion_point(field_release:olama.EmbeddingParams.field)
  
  return field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbeddingParams::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:olama.EmbeddingParams.field)
}

// string vector_field = 2;
inline void EmbeddingParams::clear_vector_field() {
  vector_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmbeddingParams::vector_field() const {
  // @@protoc_insertion_point(field_get:olama.EmbeddingParams.vector_field)
  return _internal_vector_field();
}
inline void EmbeddingParams::set_vector_field(const std::string& value) {
  _internal_set_vector_field(value);
  // @@protoc_insertion_point(field_set:olama.EmbeddingParams.vector_field)
}
inline std::string* EmbeddingParams::mutable_vector_field() {
  // @@protoc_insertion_point(field_mutable:olama.EmbeddingParams.vector_field)
  return _internal_mutable_vector_field();
}
inline const std::string& EmbeddingParams::_internal_vector_field() const {
  return vector_field_.GetNoArena();
}
inline void EmbeddingParams::_internal_set_vector_field(const std::string& value) {
  
  vector_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbeddingParams::set_vector_field(std::string&& value) {
  
  vector_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.EmbeddingParams.vector_field)
}
inline void EmbeddingParams::set_vector_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vector_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.EmbeddingParams.vector_field)
}
inline void EmbeddingParams::set_vector_field(const char* value, size_t size) {
  
  vector_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.EmbeddingParams.vector_field)
}
inline std::string* EmbeddingParams::_internal_mutable_vector_field() {
  
  return vector_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbeddingParams::release_vector_field() {
  // @@protoc_insertion_point(field_release:olama.EmbeddingParams.vector_field)
  
  return vector_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbeddingParams::set_allocated_vector_field(std::string* vector_field) {
  if (vector_field != nullptr) {
    
  } else {
    
  }
  vector_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vector_field);
  // @@protoc_insertion_point(field_set_allocated:olama.EmbeddingParams.vector_field)
}

// string model_name = 3;
inline void EmbeddingParams::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EmbeddingParams::model_name() const {
  // @@protoc_insertion_point(field_get:olama.EmbeddingParams.model_name)
  return _internal_model_name();
}
inline void EmbeddingParams::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:olama.EmbeddingParams.model_name)
}
inline std::string* EmbeddingParams::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:olama.EmbeddingParams.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& EmbeddingParams::_internal_model_name() const {
  return model_name_.GetNoArena();
}
inline void EmbeddingParams::_internal_set_model_name(const std::string& value) {
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EmbeddingParams::set_model_name(std::string&& value) {
  
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.EmbeddingParams.model_name)
}
inline void EmbeddingParams::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.EmbeddingParams.model_name)
}
inline void EmbeddingParams::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.EmbeddingParams.model_name)
}
inline std::string* EmbeddingParams::_internal_mutable_model_name() {
  
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EmbeddingParams::release_model_name() {
  // @@protoc_insertion_point(field_release:olama.EmbeddingParams.model_name)
  
  return model_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EmbeddingParams::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:olama.EmbeddingParams.model_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CollectionConf

// string database = 1;
inline void CollectionConf::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionConf::database() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.database)
  return _internal_database();
}
inline void CollectionConf::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.database)
}
inline std::string* CollectionConf::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionConf.database)
  return _internal_mutable_database();
}
inline const std::string& CollectionConf::_internal_database() const {
  return database_.GetNoArena();
}
inline void CollectionConf::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectionConf::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CollectionConf.database)
}
inline void CollectionConf::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CollectionConf.database)
}
inline void CollectionConf::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CollectionConf.database)
}
inline std::string* CollectionConf::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionConf::release_database() {
  // @@protoc_insertion_point(field_release:olama.CollectionConf.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionConf::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionConf.database)
}

// string collection = 2;
inline void CollectionConf::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionConf::collection() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.collection)
  return _internal_collection();
}
inline void CollectionConf::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.collection)
}
inline std::string* CollectionConf::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionConf.collection)
  return _internal_mutable_collection();
}
inline const std::string& CollectionConf::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void CollectionConf::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectionConf::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CollectionConf.collection)
}
inline void CollectionConf::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CollectionConf.collection)
}
inline void CollectionConf::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CollectionConf.collection)
}
inline std::string* CollectionConf::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionConf::release_collection() {
  // @@protoc_insertion_point(field_release:olama.CollectionConf.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionConf::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionConf.collection)
}

// string description = 3;
inline void CollectionConf::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionConf::description() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.description)
  return _internal_description();
}
inline void CollectionConf::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.description)
}
inline std::string* CollectionConf::mutable_description() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionConf.description)
  return _internal_mutable_description();
}
inline const std::string& CollectionConf::_internal_description() const {
  return description_.GetNoArena();
}
inline void CollectionConf::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectionConf::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CollectionConf.description)
}
inline void CollectionConf::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CollectionConf.description)
}
inline void CollectionConf::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CollectionConf.description)
}
inline std::string* CollectionConf::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionConf::release_description() {
  // @@protoc_insertion_point(field_release:olama.CollectionConf.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionConf::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionConf.description)
}

// uint32 number_of_shards = 4;
inline void CollectionConf::clear_number_of_shards() {
  number_of_shards_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::_internal_number_of_shards() const {
  return number_of_shards_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::number_of_shards() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.number_of_shards)
  return _internal_number_of_shards();
}
inline void CollectionConf::_internal_set_number_of_shards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_of_shards_ = value;
}
inline void CollectionConf::set_number_of_shards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_shards(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.number_of_shards)
}

// uint32 number_of_replicas = 5;
inline void CollectionConf::clear_number_of_replicas() {
  number_of_replicas_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::_internal_number_of_replicas() const {
  return number_of_replicas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::number_of_replicas() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.number_of_replicas)
  return _internal_number_of_replicas();
}
inline void CollectionConf::_internal_set_number_of_replicas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_of_replicas_ = value;
}
inline void CollectionConf::set_number_of_replicas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_replicas(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.number_of_replicas)
}

// uint32 dimension = 6;
inline void CollectionConf::clear_dimension() {
  dimension_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::_internal_dimension() const {
  return dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::dimension() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.dimension)
  return _internal_dimension();
}
inline void CollectionConf::_internal_set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dimension_ = value;
}
inline void CollectionConf::set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.dimension)
}

// .olama.IndexMetricType metric = 7;
inline void CollectionConf::clear_metric() {
  metric_ = 0;
}
inline ::olama::IndexMetricType CollectionConf::_internal_metric() const {
  return static_cast< ::olama::IndexMetricType >(metric_);
}
inline ::olama::IndexMetricType CollectionConf::metric() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.metric)
  return _internal_metric();
}
inline void CollectionConf::_internal_set_metric(::olama::IndexMetricType value) {
  
  metric_ = value;
}
inline void CollectionConf::set_metric(::olama::IndexMetricType value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.metric)
}

// uint32 nprobe = 8;
inline void CollectionConf::clear_nprobe() {
  nprobe_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::_internal_nprobe() const {
  return nprobe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::nprobe() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.nprobe)
  return _internal_nprobe();
}
inline void CollectionConf::_internal_set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nprobe_ = value;
}
inline void CollectionConf::set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nprobe(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.nprobe)
}

// .olama.IndexEngineType engine = 11;
inline void CollectionConf::clear_engine() {
  engine_ = 0;
}
inline ::olama::IndexEngineType CollectionConf::_internal_engine() const {
  return static_cast< ::olama::IndexEngineType >(engine_);
}
inline ::olama::IndexEngineType CollectionConf::engine() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.engine)
  return _internal_engine();
}
inline void CollectionConf::_internal_set_engine(::olama::IndexEngineType value) {
  
  engine_ = value;
}
inline void CollectionConf::set_engine(::olama::IndexEngineType value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.engine)
}

// string model_desc = 12;
inline void CollectionConf::clear_model_desc() {
  model_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionConf::model_desc() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.model_desc)
  return _internal_model_desc();
}
inline void CollectionConf::set_model_desc(const std::string& value) {
  _internal_set_model_desc(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.model_desc)
}
inline std::string* CollectionConf::mutable_model_desc() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionConf.model_desc)
  return _internal_mutable_model_desc();
}
inline const std::string& CollectionConf::_internal_model_desc() const {
  return model_desc_.GetNoArena();
}
inline void CollectionConf::_internal_set_model_desc(const std::string& value) {
  
  model_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectionConf::set_model_desc(std::string&& value) {
  
  model_desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CollectionConf.model_desc)
}
inline void CollectionConf::set_model_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CollectionConf.model_desc)
}
inline void CollectionConf::set_model_desc(const char* value, size_t size) {
  
  model_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CollectionConf.model_desc)
}
inline std::string* CollectionConf::_internal_mutable_model_desc() {
  
  return model_desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionConf::release_model_desc() {
  // @@protoc_insertion_point(field_release:olama.CollectionConf.model_desc)
  
  return model_desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionConf::set_allocated_model_desc(std::string* model_desc) {
  if (model_desc != nullptr) {
    
  } else {
    
  }
  model_desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_desc);
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionConf.model_desc)
}

// map<string, .olama.FieldMeta> field_metas = 15;
inline int CollectionConf::_internal_field_metas_size() const {
  return field_metas_.size();
}
inline int CollectionConf::field_metas_size() const {
  return _internal_field_metas_size();
}
inline void CollectionConf::clear_field_metas() {
  field_metas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >&
CollectionConf::_internal_field_metas() const {
  return field_metas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >&
CollectionConf::field_metas() const {
  // @@protoc_insertion_point(field_map:olama.CollectionConf.field_metas)
  return _internal_field_metas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >*
CollectionConf::_internal_mutable_field_metas() {
  return field_metas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::FieldMeta >*
CollectionConf::mutable_field_metas() {
  // @@protoc_insertion_point(field_mutable_map:olama.CollectionConf.field_metas)
  return _internal_mutable_field_metas();
}

// map<string, string> options = 16;
inline int CollectionConf::_internal_options_size() const {
  return options_.size();
}
inline int CollectionConf::options_size() const {
  return _internal_options_size();
}
inline void CollectionConf::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CollectionConf::_internal_options() const {
  return options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CollectionConf::options() const {
  // @@protoc_insertion_point(field_map:olama.CollectionConf.options)
  return _internal_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CollectionConf::_internal_mutable_options() {
  return options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CollectionConf::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:olama.CollectionConf.options)
  return _internal_mutable_options();
}

// uint32 nlist = 17;
inline void CollectionConf::clear_nlist() {
  nlist_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::_internal_nlist() const {
  return nlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollectionConf::nlist() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.nlist)
  return _internal_nlist();
}
inline void CollectionConf::_internal_set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nlist_ = value;
}
inline void CollectionConf::set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nlist(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.nlist)
}

// .olama.EmbeddingParams embedding_params = 18;
inline bool CollectionConf::_internal_has_embedding_params() const {
  return this != internal_default_instance() && embedding_params_ != nullptr;
}
inline bool CollectionConf::has_embedding_params() const {
  return _internal_has_embedding_params();
}
inline void CollectionConf::clear_embedding_params() {
  if (GetArenaNoVirtual() == nullptr && embedding_params_ != nullptr) {
    delete embedding_params_;
  }
  embedding_params_ = nullptr;
}
inline const ::olama::EmbeddingParams& CollectionConf::_internal_embedding_params() const {
  const ::olama::EmbeddingParams* p = embedding_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::EmbeddingParams*>(
      &::olama::_EmbeddingParams_default_instance_);
}
inline const ::olama::EmbeddingParams& CollectionConf::embedding_params() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.embedding_params)
  return _internal_embedding_params();
}
inline ::olama::EmbeddingParams* CollectionConf::release_embedding_params() {
  // @@protoc_insertion_point(field_release:olama.CollectionConf.embedding_params)
  
  ::olama::EmbeddingParams* temp = embedding_params_;
  embedding_params_ = nullptr;
  return temp;
}
inline ::olama::EmbeddingParams* CollectionConf::_internal_mutable_embedding_params() {
  
  if (embedding_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::EmbeddingParams>(GetArenaNoVirtual());
    embedding_params_ = p;
  }
  return embedding_params_;
}
inline ::olama::EmbeddingParams* CollectionConf::mutable_embedding_params() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionConf.embedding_params)
  return _internal_mutable_embedding_params();
}
inline void CollectionConf::set_allocated_embedding_params(::olama::EmbeddingParams* embedding_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete embedding_params_;
  }
  if (embedding_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      embedding_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding_params, submessage_arena);
    }
    
  } else {
    
  }
  embedding_params_ = embedding_params;
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionConf.embedding_params)
}

// .olama.DataType data_type = 19;
inline void CollectionConf::clear_data_type() {
  data_type_ = 0;
}
inline ::olama::DataType CollectionConf::_internal_data_type() const {
  return static_cast< ::olama::DataType >(data_type_);
}
inline ::olama::DataType CollectionConf::data_type() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.data_type)
  return _internal_data_type();
}
inline void CollectionConf::_internal_set_data_type(::olama::DataType value) {
  
  data_type_ = value;
}
inline void CollectionConf::set_data_type(::olama::DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.data_type)
}

// int64 version = 20;
inline void CollectionConf::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionConf::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionConf::version() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.version)
  return _internal_version();
}
inline void CollectionConf::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void CollectionConf::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:olama.CollectionConf.version)
}

// .olama.TTLConfig ttlConfig = 21;
inline bool CollectionConf::_internal_has_ttlconfig() const {
  return this != internal_default_instance() && ttlconfig_ != nullptr;
}
inline bool CollectionConf::has_ttlconfig() const {
  return _internal_has_ttlconfig();
}
inline void CollectionConf::clear_ttlconfig() {
  if (GetArenaNoVirtual() == nullptr && ttlconfig_ != nullptr) {
    delete ttlconfig_;
  }
  ttlconfig_ = nullptr;
}
inline const ::olama::TTLConfig& CollectionConf::_internal_ttlconfig() const {
  const ::olama::TTLConfig* p = ttlconfig_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::TTLConfig*>(
      &::olama::_TTLConfig_default_instance_);
}
inline const ::olama::TTLConfig& CollectionConf::ttlconfig() const {
  // @@protoc_insertion_point(field_get:olama.CollectionConf.ttlConfig)
  return _internal_ttlconfig();
}
inline ::olama::TTLConfig* CollectionConf::release_ttlconfig() {
  // @@protoc_insertion_point(field_release:olama.CollectionConf.ttlConfig)
  
  ::olama::TTLConfig* temp = ttlconfig_;
  ttlconfig_ = nullptr;
  return temp;
}
inline ::olama::TTLConfig* CollectionConf::_internal_mutable_ttlconfig() {
  
  if (ttlconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::TTLConfig>(GetArenaNoVirtual());
    ttlconfig_ = p;
  }
  return ttlconfig_;
}
inline ::olama::TTLConfig* CollectionConf::mutable_ttlconfig() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionConf.ttlConfig)
  return _internal_mutable_ttlconfig();
}
inline void CollectionConf::set_allocated_ttlconfig(::olama::TTLConfig* ttlconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ttlconfig_;
  }
  if (ttlconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ttlconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttlconfig, submessage_arena);
    }
    
  } else {
    
  }
  ttlconfig_ = ttlconfig;
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionConf.ttlConfig)
}

// -------------------------------------------------------------------

// FieldMeta

// .olama.FieldType field_type = 1;
inline void FieldMeta::clear_field_type() {
  field_type_ = 0;
}
inline ::olama::FieldType FieldMeta::_internal_field_type() const {
  return static_cast< ::olama::FieldType >(field_type_);
}
inline ::olama::FieldType FieldMeta::field_type() const {
  // @@protoc_insertion_point(field_get:olama.FieldMeta.field_type)
  return _internal_field_type();
}
inline void FieldMeta::_internal_set_field_type(::olama::FieldType value) {
  
  field_type_ = value;
}
inline void FieldMeta::set_field_type(::olama::FieldType value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:olama.FieldMeta.field_type)
}

// .olama.FieldElementType field_element_type = 2;
inline void FieldMeta::clear_field_element_type() {
  field_element_type_ = 0;
}
inline ::olama::FieldElementType FieldMeta::_internal_field_element_type() const {
  return static_cast< ::olama::FieldElementType >(field_element_type_);
}
inline ::olama::FieldElementType FieldMeta::field_element_type() const {
  // @@protoc_insertion_point(field_get:olama.FieldMeta.field_element_type)
  return _internal_field_element_type();
}
inline void FieldMeta::_internal_set_field_element_type(::olama::FieldElementType value) {
  
  field_element_type_ = value;
}
inline void FieldMeta::set_field_element_type(::olama::FieldElementType value) {
  _internal_set_field_element_type(value);
  // @@protoc_insertion_point(field_set:olama.FieldMeta.field_element_type)
}

// -------------------------------------------------------------------

// ShardConf

// string collection = 1;
inline void ShardConf::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShardConf::collection() const {
  // @@protoc_insertion_point(field_get:olama.ShardConf.collection)
  return _internal_collection();
}
inline void ShardConf::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.ShardConf.collection)
}
inline std::string* ShardConf::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.ShardConf.collection)
  return _internal_mutable_collection();
}
inline const std::string& ShardConf::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void ShardConf::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShardConf::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.ShardConf.collection)
}
inline void ShardConf::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.ShardConf.collection)
}
inline void ShardConf::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.ShardConf.collection)
}
inline std::string* ShardConf::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShardConf::release_collection() {
  // @@protoc_insertion_point(field_release:olama.ShardConf.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShardConf::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.ShardConf.collection)
}

// int32 shard_idx = 2;
inline void ShardConf::clear_shard_idx() {
  shard_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardConf::_internal_shard_idx() const {
  return shard_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardConf::shard_idx() const {
  // @@protoc_insertion_point(field_get:olama.ShardConf.shard_idx)
  return _internal_shard_idx();
}
inline void ShardConf::_internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_idx_ = value;
}
inline void ShardConf::set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_idx(value);
  // @@protoc_insertion_point(field_set:olama.ShardConf.shard_idx)
}

// .olama.CollectionConf conf = 3;
inline bool ShardConf::_internal_has_conf() const {
  return this != internal_default_instance() && conf_ != nullptr;
}
inline bool ShardConf::has_conf() const {
  return _internal_has_conf();
}
inline void ShardConf::clear_conf() {
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
}
inline const ::olama::CollectionConf& ShardConf::_internal_conf() const {
  const ::olama::CollectionConf* p = conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::CollectionConf*>(
      &::olama::_CollectionConf_default_instance_);
}
inline const ::olama::CollectionConf& ShardConf::conf() const {
  // @@protoc_insertion_point(field_get:olama.ShardConf.conf)
  return _internal_conf();
}
inline ::olama::CollectionConf* ShardConf::release_conf() {
  // @@protoc_insertion_point(field_release:olama.ShardConf.conf)
  
  ::olama::CollectionConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::olama::CollectionConf* ShardConf::_internal_mutable_conf() {
  
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::CollectionConf>(GetArenaNoVirtual());
    conf_ = p;
  }
  return conf_;
}
inline ::olama::CollectionConf* ShardConf::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:olama.ShardConf.conf)
  return _internal_mutable_conf();
}
inline void ShardConf::set_allocated_conf(::olama::CollectionConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:olama.ShardConf.conf)
}

// repeated string nodes = 4;
inline int ShardConf::_internal_nodes_size() const {
  return nodes_.size();
}
inline int ShardConf::nodes_size() const {
  return _internal_nodes_size();
}
inline void ShardConf::clear_nodes() {
  nodes_.Clear();
}
inline std::string* ShardConf::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:olama.ShardConf.nodes)
  return _internal_add_nodes();
}
inline const std::string& ShardConf::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const std::string& ShardConf::nodes(int index) const {
  // @@protoc_insertion_point(field_get:olama.ShardConf.nodes)
  return _internal_nodes(index);
}
inline std::string* ShardConf::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:olama.ShardConf.nodes)
  return nodes_.Mutable(index);
}
inline void ShardConf::set_nodes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.ShardConf.nodes)
  nodes_.Mutable(index)->assign(value);
}
inline void ShardConf::set_nodes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.ShardConf.nodes)
  nodes_.Mutable(index)->assign(std::move(value));
}
inline void ShardConf::set_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.ShardConf.nodes)
}
inline void ShardConf::set_nodes(int index, const char* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.ShardConf.nodes)
}
inline std::string* ShardConf::_internal_add_nodes() {
  return nodes_.Add();
}
inline void ShardConf::add_nodes(const std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.ShardConf.nodes)
}
inline void ShardConf::add_nodes(std::string&& value) {
  nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.ShardConf.nodes)
}
inline void ShardConf::add_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.ShardConf.nodes)
}
inline void ShardConf::add_nodes(const char* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.ShardConf.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShardConf::nodes() const {
  // @@protoc_insertion_point(field_list:olama.ShardConf.nodes)
  return nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShardConf::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:olama.ShardConf.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// TTLConfig

// bool enable = 1;
inline void TTLConfig::clear_enable() {
  enable_ = false;
}
inline bool TTLConfig::_internal_enable() const {
  return enable_;
}
inline bool TTLConfig::enable() const {
  // @@protoc_insertion_point(field_get:olama.TTLConfig.enable)
  return _internal_enable();
}
inline void TTLConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void TTLConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:olama.TTLConfig.enable)
}

// string timeField = 2;
inline void TTLConfig::clear_timefield() {
  timefield_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TTLConfig::timefield() const {
  // @@protoc_insertion_point(field_get:olama.TTLConfig.timeField)
  return _internal_timefield();
}
inline void TTLConfig::set_timefield(const std::string& value) {
  _internal_set_timefield(value);
  // @@protoc_insertion_point(field_set:olama.TTLConfig.timeField)
}
inline std::string* TTLConfig::mutable_timefield() {
  // @@protoc_insertion_point(field_mutable:olama.TTLConfig.timeField)
  return _internal_mutable_timefield();
}
inline const std::string& TTLConfig::_internal_timefield() const {
  return timefield_.GetNoArena();
}
inline void TTLConfig::_internal_set_timefield(const std::string& value) {
  
  timefield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TTLConfig::set_timefield(std::string&& value) {
  
  timefield_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.TTLConfig.timeField)
}
inline void TTLConfig::set_timefield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timefield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.TTLConfig.timeField)
}
inline void TTLConfig::set_timefield(const char* value, size_t size) {
  
  timefield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.TTLConfig.timeField)
}
inline std::string* TTLConfig::_internal_mutable_timefield() {
  
  return timefield_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TTLConfig::release_timefield() {
  // @@protoc_insertion_point(field_release:olama.TTLConfig.timeField)
  
  return timefield_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TTLConfig::set_allocated_timefield(std::string* timefield) {
  if (timefield != nullptr) {
    
  } else {
    
  }
  timefield_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timefield);
  // @@protoc_insertion_point(field_set_allocated:olama.TTLConfig.timeField)
}

// -------------------------------------------------------------------

// ShardCollectionState

// int32 shard_idx = 1;
inline void ShardCollectionState::clear_shard_idx() {
  shard_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardCollectionState::_internal_shard_idx() const {
  return shard_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardCollectionState::shard_idx() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.shard_idx)
  return _internal_shard_idx();
}
inline void ShardCollectionState::_internal_set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_idx_ = value;
}
inline void ShardCollectionState::set_shard_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_idx(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.shard_idx)
}

// string leader = 2;
inline void ShardCollectionState::clear_leader() {
  leader_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShardCollectionState::leader() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.leader)
  return _internal_leader();
}
inline void ShardCollectionState::set_leader(const std::string& value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.leader)
}
inline std::string* ShardCollectionState::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:olama.ShardCollectionState.leader)
  return _internal_mutable_leader();
}
inline const std::string& ShardCollectionState::_internal_leader() const {
  return leader_.GetNoArena();
}
inline void ShardCollectionState::_internal_set_leader(const std::string& value) {
  
  leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShardCollectionState::set_leader(std::string&& value) {
  
  leader_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.ShardCollectionState.leader)
}
inline void ShardCollectionState::set_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.ShardCollectionState.leader)
}
inline void ShardCollectionState::set_leader(const char* value, size_t size) {
  
  leader_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.ShardCollectionState.leader)
}
inline std::string* ShardCollectionState::_internal_mutable_leader() {
  
  return leader_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShardCollectionState::release_leader() {
  // @@protoc_insertion_point(field_release:olama.ShardCollectionState.leader)
  
  return leader_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShardCollectionState::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader);
  // @@protoc_insertion_point(field_set_allocated:olama.ShardCollectionState.leader)
}

// repeated string node_peers = 3;
inline int ShardCollectionState::_internal_node_peers_size() const {
  return node_peers_.size();
}
inline int ShardCollectionState::node_peers_size() const {
  return _internal_node_peers_size();
}
inline void ShardCollectionState::clear_node_peers() {
  node_peers_.Clear();
}
inline std::string* ShardCollectionState::add_node_peers() {
  // @@protoc_insertion_point(field_add_mutable:olama.ShardCollectionState.node_peers)
  return _internal_add_node_peers();
}
inline const std::string& ShardCollectionState::_internal_node_peers(int index) const {
  return node_peers_.Get(index);
}
inline const std::string& ShardCollectionState::node_peers(int index) const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.node_peers)
  return _internal_node_peers(index);
}
inline std::string* ShardCollectionState::mutable_node_peers(int index) {
  // @@protoc_insertion_point(field_mutable:olama.ShardCollectionState.node_peers)
  return node_peers_.Mutable(index);
}
inline void ShardCollectionState::set_node_peers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.node_peers)
  node_peers_.Mutable(index)->assign(value);
}
inline void ShardCollectionState::set_node_peers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.node_peers)
  node_peers_.Mutable(index)->assign(std::move(value));
}
inline void ShardCollectionState::set_node_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.ShardCollectionState.node_peers)
}
inline void ShardCollectionState::set_node_peers(int index, const char* value, size_t size) {
  node_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.ShardCollectionState.node_peers)
}
inline std::string* ShardCollectionState::_internal_add_node_peers() {
  return node_peers_.Add();
}
inline void ShardCollectionState::add_node_peers(const std::string& value) {
  node_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.ShardCollectionState.node_peers)
}
inline void ShardCollectionState::add_node_peers(std::string&& value) {
  node_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.ShardCollectionState.node_peers)
}
inline void ShardCollectionState::add_node_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.ShardCollectionState.node_peers)
}
inline void ShardCollectionState::add_node_peers(const char* value, size_t size) {
  node_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.ShardCollectionState.node_peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShardCollectionState::node_peers() const {
  // @@protoc_insertion_point(field_list:olama.ShardCollectionState.node_peers)
  return node_peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShardCollectionState::mutable_node_peers() {
  // @@protoc_insertion_point(field_mutable_list:olama.ShardCollectionState.node_peers)
  return &node_peers_;
}

// int64 allocate_start_ms = 4;
inline void ShardCollectionState::clear_allocate_start_ms() {
  allocate_start_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardCollectionState::_internal_allocate_start_ms() const {
  return allocate_start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardCollectionState::allocate_start_ms() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.allocate_start_ms)
  return _internal_allocate_start_ms();
}
inline void ShardCollectionState::_internal_set_allocate_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allocate_start_ms_ = value;
}
inline void ShardCollectionState::set_allocate_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_allocate_start_ms(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.allocate_start_ms)
}

// int64 allocate_stop_ms = 5;
inline void ShardCollectionState::clear_allocate_stop_ms() {
  allocate_stop_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardCollectionState::_internal_allocate_stop_ms() const {
  return allocate_stop_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardCollectionState::allocate_stop_ms() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.allocate_stop_ms)
  return _internal_allocate_stop_ms();
}
inline void ShardCollectionState::_internal_set_allocate_stop_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allocate_stop_ms_ = value;
}
inline void ShardCollectionState::set_allocate_stop_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_allocate_stop_ms(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.allocate_stop_ms)
}

// int64 leader_ms = 6;
inline void ShardCollectionState::clear_leader_ms() {
  leader_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardCollectionState::_internal_leader_ms() const {
  return leader_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardCollectionState::leader_ms() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.leader_ms)
  return _internal_leader_ms();
}
inline void ShardCollectionState::_internal_set_leader_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leader_ms_ = value;
}
inline void ShardCollectionState::set_leader_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leader_ms(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.leader_ms)
}

// bool allocating = 7;
inline void ShardCollectionState::clear_allocating() {
  allocating_ = false;
}
inline bool ShardCollectionState::_internal_allocating() const {
  return allocating_;
}
inline bool ShardCollectionState::allocating() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.allocating)
  return _internal_allocating();
}
inline void ShardCollectionState::_internal_set_allocating(bool value) {
  
  allocating_ = value;
}
inline void ShardCollectionState::set_allocating(bool value) {
  _internal_set_allocating(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.allocating)
}

// repeated .olama.Shard shards = 8;
inline int ShardCollectionState::_internal_shards_size() const {
  return shards_.size();
}
inline int ShardCollectionState::shards_size() const {
  return _internal_shards_size();
}
inline void ShardCollectionState::clear_shards() {
  shards_.Clear();
}
inline ::olama::Shard* ShardCollectionState::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:olama.ShardCollectionState.shards)
  return shards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Shard >*
ShardCollectionState::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:olama.ShardCollectionState.shards)
  return &shards_;
}
inline const ::olama::Shard& ShardCollectionState::_internal_shards(int index) const {
  return shards_.Get(index);
}
inline const ::olama::Shard& ShardCollectionState::shards(int index) const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.shards)
  return _internal_shards(index);
}
inline ::olama::Shard* ShardCollectionState::_internal_add_shards() {
  return shards_.Add();
}
inline ::olama::Shard* ShardCollectionState::add_shards() {
  // @@protoc_insertion_point(field_add:olama.ShardCollectionState.shards)
  return _internal_add_shards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Shard >&
ShardCollectionState::shards() const {
  // @@protoc_insertion_point(field_list:olama.ShardCollectionState.shards)
  return shards_;
}

// bool creating = 9;
inline void ShardCollectionState::clear_creating() {
  creating_ = false;
}
inline bool ShardCollectionState::_internal_creating() const {
  return creating_;
}
inline bool ShardCollectionState::creating() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.creating)
  return _internal_creating();
}
inline void ShardCollectionState::_internal_set_creating(bool value) {
  
  creating_ = value;
}
inline void ShardCollectionState::set_creating(bool value) {
  _internal_set_creating(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.creating)
}

// bool removing = 10;
inline void ShardCollectionState::clear_removing() {
  removing_ = false;
}
inline bool ShardCollectionState::_internal_removing() const {
  return removing_;
}
inline bool ShardCollectionState::removing() const {
  // @@protoc_insertion_point(field_get:olama.ShardCollectionState.removing)
  return _internal_removing();
}
inline void ShardCollectionState::_internal_set_removing(bool value) {
  
  removing_ = value;
}
inline void ShardCollectionState::set_removing(bool value) {
  _internal_set_removing(value);
  // @@protoc_insertion_point(field_set:olama.ShardCollectionState.removing)
}

// -------------------------------------------------------------------

// CollectionState

// string collection = 1;
inline void CollectionState::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectionState::collection() const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.collection)
  return _internal_collection();
}
inline void CollectionState::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.CollectionState.collection)
}
inline std::string* CollectionState::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionState.collection)
  return _internal_mutable_collection();
}
inline const std::string& CollectionState::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void CollectionState::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectionState::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CollectionState.collection)
}
inline void CollectionState::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CollectionState.collection)
}
inline void CollectionState::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CollectionState.collection)
}
inline std::string* CollectionState::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectionState::release_collection() {
  // @@protoc_insertion_point(field_release:olama.CollectionState.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectionState::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionState.collection)
}

// .olama.CollectionConf conf = 2;
inline bool CollectionState::_internal_has_conf() const {
  return this != internal_default_instance() && conf_ != nullptr;
}
inline bool CollectionState::has_conf() const {
  return _internal_has_conf();
}
inline void CollectionState::clear_conf() {
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
}
inline const ::olama::CollectionConf& CollectionState::_internal_conf() const {
  const ::olama::CollectionConf* p = conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::CollectionConf*>(
      &::olama::_CollectionConf_default_instance_);
}
inline const ::olama::CollectionConf& CollectionState::conf() const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.conf)
  return _internal_conf();
}
inline ::olama::CollectionConf* CollectionState::release_conf() {
  // @@protoc_insertion_point(field_release:olama.CollectionState.conf)
  
  ::olama::CollectionConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::olama::CollectionConf* CollectionState::_internal_mutable_conf() {
  
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::CollectionConf>(GetArenaNoVirtual());
    conf_ = p;
  }
  return conf_;
}
inline ::olama::CollectionConf* CollectionState::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionState.conf)
  return _internal_mutable_conf();
}
inline void CollectionState::set_allocated_conf(::olama::CollectionConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionState.conf)
}

// repeated .olama.ShardCollectionState shards = 3;
inline int CollectionState::_internal_shards_size() const {
  return shards_.size();
}
inline int CollectionState::shards_size() const {
  return _internal_shards_size();
}
inline void CollectionState::clear_shards() {
  shards_.Clear();
}
inline ::olama::ShardCollectionState* CollectionState::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:olama.CollectionState.shards)
  return shards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::ShardCollectionState >*
CollectionState::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:olama.CollectionState.shards)
  return &shards_;
}
inline const ::olama::ShardCollectionState& CollectionState::_internal_shards(int index) const {
  return shards_.Get(index);
}
inline const ::olama::ShardCollectionState& CollectionState::shards(int index) const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.shards)
  return _internal_shards(index);
}
inline ::olama::ShardCollectionState* CollectionState::_internal_add_shards() {
  return shards_.Add();
}
inline ::olama::ShardCollectionState* CollectionState::add_shards() {
  // @@protoc_insertion_point(field_add:olama.CollectionState.shards)
  return _internal_add_shards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::ShardCollectionState >&
CollectionState::shards() const {
  // @@protoc_insertion_point(field_list:olama.CollectionState.shards)
  return shards_;
}

// uint64 size = 4;
inline void CollectionState::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollectionState::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollectionState::size() const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.size)
  return _internal_size();
}
inline void CollectionState::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void CollectionState::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:olama.CollectionState.size)
}

// int64 create_time = 5;
inline void CollectionState::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionState::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectionState::create_time() const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.create_time)
  return _internal_create_time();
}
inline void CollectionState::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
}
inline void CollectionState::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:olama.CollectionState.create_time)
}

// .olama.CreateCollectionRequest req = 6;
inline bool CollectionState::_internal_has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline bool CollectionState::has_req() const {
  return _internal_has_req();
}
inline void CollectionState::clear_req() {
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
inline const ::olama::CreateCollectionRequest& CollectionState::_internal_req() const {
  const ::olama::CreateCollectionRequest* p = req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::CreateCollectionRequest*>(
      &::olama::_CreateCollectionRequest_default_instance_);
}
inline const ::olama::CreateCollectionRequest& CollectionState::req() const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.req)
  return _internal_req();
}
inline ::olama::CreateCollectionRequest* CollectionState::release_req() {
  // @@protoc_insertion_point(field_release:olama.CollectionState.req)
  
  ::olama::CreateCollectionRequest* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::olama::CreateCollectionRequest* CollectionState::_internal_mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::CreateCollectionRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  return req_;
}
inline ::olama::CreateCollectionRequest* CollectionState::mutable_req() {
  // @@protoc_insertion_point(field_mutable:olama.CollectionState.req)
  return _internal_mutable_req();
}
inline void CollectionState::set_allocated_req(::olama::CreateCollectionRequest* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:olama.CollectionState.req)
}

// .olama.ShardDataState index_state = 8;
inline void CollectionState::clear_index_state() {
  index_state_ = 0;
}
inline ::olama::ShardDataState CollectionState::_internal_index_state() const {
  return static_cast< ::olama::ShardDataState >(index_state_);
}
inline ::olama::ShardDataState CollectionState::index_state() const {
  // @@protoc_insertion_point(field_get:olama.CollectionState.index_state)
  return _internal_index_state();
}
inline void CollectionState::_internal_set_index_state(::olama::ShardDataState value) {
  
  index_state_ = value;
}
inline void CollectionState::set_index_state(::olama::ShardDataState value) {
  _internal_set_index_state(value);
  // @@protoc_insertion_point(field_set:olama.CollectionState.index_state)
}

// -------------------------------------------------------------------

// AddAliasRequest

// string database = 1;
inline void AddAliasRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddAliasRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.AddAliasRequest.database)
  return _internal_database();
}
inline void AddAliasRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.AddAliasRequest.database)
}
inline std::string* AddAliasRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.AddAliasRequest.database)
  return _internal_mutable_database();
}
inline const std::string& AddAliasRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void AddAliasRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddAliasRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.AddAliasRequest.database)
}
inline void AddAliasRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.AddAliasRequest.database)
}
inline void AddAliasRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.AddAliasRequest.database)
}
inline std::string* AddAliasRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddAliasRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.AddAliasRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddAliasRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.AddAliasRequest.database)
}

// string collection = 2;
inline void AddAliasRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddAliasRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.AddAliasRequest.collection)
  return _internal_collection();
}
inline void AddAliasRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.AddAliasRequest.collection)
}
inline std::string* AddAliasRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.AddAliasRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& AddAliasRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void AddAliasRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddAliasRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.AddAliasRequest.collection)
}
inline void AddAliasRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.AddAliasRequest.collection)
}
inline void AddAliasRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.AddAliasRequest.collection)
}
inline std::string* AddAliasRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddAliasRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.AddAliasRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddAliasRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.AddAliasRequest.collection)
}

// string alias = 3;
inline void AddAliasRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:olama.AddAliasRequest.alias)
  return _internal_alias();
}
inline void AddAliasRequest::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:olama.AddAliasRequest.alias)
}
inline std::string* AddAliasRequest::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:olama.AddAliasRequest.alias)
  return _internal_mutable_alias();
}
inline const std::string& AddAliasRequest::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void AddAliasRequest::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddAliasRequest::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.AddAliasRequest.alias)
}
inline void AddAliasRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.AddAliasRequest.alias)
}
inline void AddAliasRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.AddAliasRequest.alias)
}
inline std::string* AddAliasRequest::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:olama.AddAliasRequest.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:olama.AddAliasRequest.alias)
}

// -------------------------------------------------------------------

// RemoveAliasRequest

// string database = 1;
inline void RemoveAliasRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveAliasRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.RemoveAliasRequest.database)
  return _internal_database();
}
inline void RemoveAliasRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.RemoveAliasRequest.database)
}
inline std::string* RemoveAliasRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.RemoveAliasRequest.database)
  return _internal_mutable_database();
}
inline const std::string& RemoveAliasRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void RemoveAliasRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveAliasRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.RemoveAliasRequest.database)
}
inline void RemoveAliasRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.RemoveAliasRequest.database)
}
inline void RemoveAliasRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.RemoveAliasRequest.database)
}
inline std::string* RemoveAliasRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveAliasRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.RemoveAliasRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAliasRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.RemoveAliasRequest.database)
}

// string alias = 2;
inline void RemoveAliasRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:olama.RemoveAliasRequest.alias)
  return _internal_alias();
}
inline void RemoveAliasRequest::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:olama.RemoveAliasRequest.alias)
}
inline std::string* RemoveAliasRequest::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:olama.RemoveAliasRequest.alias)
  return _internal_mutable_alias();
}
inline const std::string& RemoveAliasRequest::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void RemoveAliasRequest::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveAliasRequest::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.RemoveAliasRequest.alias)
}
inline void RemoveAliasRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.RemoveAliasRequest.alias)
}
inline void RemoveAliasRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.RemoveAliasRequest.alias)
}
inline std::string* RemoveAliasRequest::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:olama.RemoveAliasRequest.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:olama.RemoveAliasRequest.alias)
}

// -------------------------------------------------------------------

// UpdateAliasResponse

// int32 code = 1;
inline void UpdateAliasResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateAliasResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateAliasResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.UpdateAliasResponse.code)
  return _internal_code();
}
inline void UpdateAliasResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UpdateAliasResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.UpdateAliasResponse.code)
}

// string msg = 2;
inline void UpdateAliasResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAliasResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.UpdateAliasResponse.msg)
  return _internal_msg();
}
inline void UpdateAliasResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.UpdateAliasResponse.msg)
}
inline std::string* UpdateAliasResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateAliasResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& UpdateAliasResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void UpdateAliasResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAliasResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateAliasResponse.msg)
}
inline void UpdateAliasResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateAliasResponse.msg)
}
inline void UpdateAliasResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateAliasResponse.msg)
}
inline std::string* UpdateAliasResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAliasResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.UpdateAliasResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAliasResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateAliasResponse.msg)
}

// string redirect = 3;
inline void UpdateAliasResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAliasResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.UpdateAliasResponse.redirect)
  return _internal_redirect();
}
inline void UpdateAliasResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.UpdateAliasResponse.redirect)
}
inline std::string* UpdateAliasResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateAliasResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& UpdateAliasResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void UpdateAliasResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAliasResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateAliasResponse.redirect)
}
inline void UpdateAliasResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateAliasResponse.redirect)
}
inline void UpdateAliasResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateAliasResponse.redirect)
}
inline std::string* UpdateAliasResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAliasResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.UpdateAliasResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAliasResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateAliasResponse.redirect)
}

// uint64 affectedCount = 4;
inline void UpdateAliasResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateAliasResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateAliasResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.UpdateAliasResponse.affectedCount)
  return _internal_affectedcount();
}
inline void UpdateAliasResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void UpdateAliasResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.UpdateAliasResponse.affectedCount)
}

// -------------------------------------------------------------------

// GetAliasRequest

// string database = 1;
inline void GetAliasRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAliasRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.GetAliasRequest.database)
  return _internal_database();
}
inline void GetAliasRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.GetAliasRequest.database)
}
inline std::string* GetAliasRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.GetAliasRequest.database)
  return _internal_mutable_database();
}
inline const std::string& GetAliasRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void GetAliasRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAliasRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.GetAliasRequest.database)
}
inline void GetAliasRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.GetAliasRequest.database)
}
inline void GetAliasRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.GetAliasRequest.database)
}
inline std::string* GetAliasRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAliasRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.GetAliasRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAliasRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.GetAliasRequest.database)
}

// string alias = 2;
inline void GetAliasRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAliasRequest::alias() const {
  // @@protoc_insertion_point(field_get:olama.GetAliasRequest.alias)
  return _internal_alias();
}
inline void GetAliasRequest::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:olama.GetAliasRequest.alias)
}
inline std::string* GetAliasRequest::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:olama.GetAliasRequest.alias)
  return _internal_mutable_alias();
}
inline const std::string& GetAliasRequest::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void GetAliasRequest::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAliasRequest::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.GetAliasRequest.alias)
}
inline void GetAliasRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.GetAliasRequest.alias)
}
inline void GetAliasRequest::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.GetAliasRequest.alias)
}
inline std::string* GetAliasRequest::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:olama.GetAliasRequest.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAliasRequest::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:olama.GetAliasRequest.alias)
}

// -------------------------------------------------------------------

// GetAliasResponse

// int32 code = 1;
inline void GetAliasResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAliasResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAliasResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.GetAliasResponse.code)
  return _internal_code();
}
inline void GetAliasResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetAliasResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.GetAliasResponse.code)
}

// string msg = 2;
inline void GetAliasResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAliasResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.GetAliasResponse.msg)
  return _internal_msg();
}
inline void GetAliasResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.GetAliasResponse.msg)
}
inline std::string* GetAliasResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.GetAliasResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetAliasResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void GetAliasResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAliasResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.GetAliasResponse.msg)
}
inline void GetAliasResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.GetAliasResponse.msg)
}
inline void GetAliasResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.GetAliasResponse.msg)
}
inline std::string* GetAliasResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAliasResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.GetAliasResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAliasResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.GetAliasResponse.msg)
}

// string redirect = 3;
inline void GetAliasResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAliasResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.GetAliasResponse.redirect)
  return _internal_redirect();
}
inline void GetAliasResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.GetAliasResponse.redirect)
}
inline std::string* GetAliasResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.GetAliasResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& GetAliasResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void GetAliasResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAliasResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.GetAliasResponse.redirect)
}
inline void GetAliasResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.GetAliasResponse.redirect)
}
inline void GetAliasResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.GetAliasResponse.redirect)
}
inline std::string* GetAliasResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAliasResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.GetAliasResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAliasResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.GetAliasResponse.redirect)
}

// repeated .olama.AliasItem aliases = 4;
inline int GetAliasResponse::_internal_aliases_size() const {
  return aliases_.size();
}
inline int GetAliasResponse::aliases_size() const {
  return _internal_aliases_size();
}
inline void GetAliasResponse::clear_aliases() {
  aliases_.Clear();
}
inline ::olama::AliasItem* GetAliasResponse::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:olama.GetAliasResponse.aliases)
  return aliases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::AliasItem >*
GetAliasResponse::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:olama.GetAliasResponse.aliases)
  return &aliases_;
}
inline const ::olama::AliasItem& GetAliasResponse::_internal_aliases(int index) const {
  return aliases_.Get(index);
}
inline const ::olama::AliasItem& GetAliasResponse::aliases(int index) const {
  // @@protoc_insertion_point(field_get:olama.GetAliasResponse.aliases)
  return _internal_aliases(index);
}
inline ::olama::AliasItem* GetAliasResponse::_internal_add_aliases() {
  return aliases_.Add();
}
inline ::olama::AliasItem* GetAliasResponse::add_aliases() {
  // @@protoc_insertion_point(field_add:olama.GetAliasResponse.aliases)
  return _internal_add_aliases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::AliasItem >&
GetAliasResponse::aliases() const {
  // @@protoc_insertion_point(field_list:olama.GetAliasResponse.aliases)
  return aliases_;
}

// -------------------------------------------------------------------

// DescribeCollectionRequest

// string database = 1;
inline void DescribeCollectionRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionRequest.database)
  return _internal_database();
}
inline void DescribeCollectionRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.DescribeCollectionRequest.database)
}
inline std::string* DescribeCollectionRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.DescribeCollectionRequest.database)
  return _internal_mutable_database();
}
inline const std::string& DescribeCollectionRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void DescribeCollectionRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribeCollectionRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DescribeCollectionRequest.database)
}
inline void DescribeCollectionRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DescribeCollectionRequest.database)
}
inline void DescribeCollectionRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DescribeCollectionRequest.database)
}
inline std::string* DescribeCollectionRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.DescribeCollectionRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.DescribeCollectionRequest.database)
}

// string collection = 2;
inline void DescribeCollectionRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionRequest.collection)
  return _internal_collection();
}
inline void DescribeCollectionRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.DescribeCollectionRequest.collection)
}
inline std::string* DescribeCollectionRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.DescribeCollectionRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& DescribeCollectionRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void DescribeCollectionRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribeCollectionRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DescribeCollectionRequest.collection)
}
inline void DescribeCollectionRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DescribeCollectionRequest.collection)
}
inline void DescribeCollectionRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DescribeCollectionRequest.collection)
}
inline std::string* DescribeCollectionRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.DescribeCollectionRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.DescribeCollectionRequest.collection)
}

// bool transfer = 3;
inline void DescribeCollectionRequest::clear_transfer() {
  transfer_ = false;
}
inline bool DescribeCollectionRequest::_internal_transfer() const {
  return transfer_;
}
inline bool DescribeCollectionRequest::transfer() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionRequest.transfer)
  return _internal_transfer();
}
inline void DescribeCollectionRequest::_internal_set_transfer(bool value) {
  
  transfer_ = value;
}
inline void DescribeCollectionRequest::set_transfer(bool value) {
  _internal_set_transfer(value);
  // @@protoc_insertion_point(field_set:olama.DescribeCollectionRequest.transfer)
}

// -------------------------------------------------------------------

// DescribeCollectionResponse

// int32 code = 1;
inline void DescribeCollectionResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DescribeCollectionResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DescribeCollectionResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionResponse.code)
  return _internal_code();
}
inline void DescribeCollectionResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DescribeCollectionResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.DescribeCollectionResponse.code)
}

// string msg = 2;
inline void DescribeCollectionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionResponse.msg)
  return _internal_msg();
}
inline void DescribeCollectionResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.DescribeCollectionResponse.msg)
}
inline std::string* DescribeCollectionResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.DescribeCollectionResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& DescribeCollectionResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void DescribeCollectionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribeCollectionResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DescribeCollectionResponse.msg)
}
inline void DescribeCollectionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DescribeCollectionResponse.msg)
}
inline void DescribeCollectionResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DescribeCollectionResponse.msg)
}
inline std::string* DescribeCollectionResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.DescribeCollectionResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.DescribeCollectionResponse.msg)
}

// string redirect = 3;
inline void DescribeCollectionResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribeCollectionResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionResponse.redirect)
  return _internal_redirect();
}
inline void DescribeCollectionResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.DescribeCollectionResponse.redirect)
}
inline std::string* DescribeCollectionResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.DescribeCollectionResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& DescribeCollectionResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void DescribeCollectionResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribeCollectionResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DescribeCollectionResponse.redirect)
}
inline void DescribeCollectionResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DescribeCollectionResponse.redirect)
}
inline void DescribeCollectionResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DescribeCollectionResponse.redirect)
}
inline std::string* DescribeCollectionResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribeCollectionResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.DescribeCollectionResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribeCollectionResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.DescribeCollectionResponse.redirect)
}

// .olama.CreateCollectionRequest collection = 4;
inline bool DescribeCollectionResponse::_internal_has_collection() const {
  return this != internal_default_instance() && collection_ != nullptr;
}
inline bool DescribeCollectionResponse::has_collection() const {
  return _internal_has_collection();
}
inline void DescribeCollectionResponse::clear_collection() {
  if (GetArenaNoVirtual() == nullptr && collection_ != nullptr) {
    delete collection_;
  }
  collection_ = nullptr;
}
inline const ::olama::CreateCollectionRequest& DescribeCollectionResponse::_internal_collection() const {
  const ::olama::CreateCollectionRequest* p = collection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::CreateCollectionRequest*>(
      &::olama::_CreateCollectionRequest_default_instance_);
}
inline const ::olama::CreateCollectionRequest& DescribeCollectionResponse::collection() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionResponse.collection)
  return _internal_collection();
}
inline ::olama::CreateCollectionRequest* DescribeCollectionResponse::release_collection() {
  // @@protoc_insertion_point(field_release:olama.DescribeCollectionResponse.collection)
  
  ::olama::CreateCollectionRequest* temp = collection_;
  collection_ = nullptr;
  return temp;
}
inline ::olama::CreateCollectionRequest* DescribeCollectionResponse::_internal_mutable_collection() {
  
  if (collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::CreateCollectionRequest>(GetArenaNoVirtual());
    collection_ = p;
  }
  return collection_;
}
inline ::olama::CreateCollectionRequest* DescribeCollectionResponse::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.DescribeCollectionResponse.collection)
  return _internal_mutable_collection();
}
inline void DescribeCollectionResponse::set_allocated_collection(::olama::CreateCollectionRequest* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collection_;
  }
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    
  } else {
    
  }
  collection_ = collection;
  // @@protoc_insertion_point(field_set_allocated:olama.DescribeCollectionResponse.collection)
}

// .olama.CollectionState state = 5;
inline bool DescribeCollectionResponse::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool DescribeCollectionResponse::has_state() const {
  return _internal_has_state();
}
inline void DescribeCollectionResponse::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::olama::CollectionState& DescribeCollectionResponse::_internal_state() const {
  const ::olama::CollectionState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::CollectionState*>(
      &::olama::_CollectionState_default_instance_);
}
inline const ::olama::CollectionState& DescribeCollectionResponse::state() const {
  // @@protoc_insertion_point(field_get:olama.DescribeCollectionResponse.state)
  return _internal_state();
}
inline ::olama::CollectionState* DescribeCollectionResponse::release_state() {
  // @@protoc_insertion_point(field_release:olama.DescribeCollectionResponse.state)
  
  ::olama::CollectionState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::olama::CollectionState* DescribeCollectionResponse::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::CollectionState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::olama::CollectionState* DescribeCollectionResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:olama.DescribeCollectionResponse.state)
  return _internal_mutable_state();
}
inline void DescribeCollectionResponse::set_allocated_state(::olama::CollectionState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:olama.DescribeCollectionResponse.state)
}

// -------------------------------------------------------------------

// ListCollectionsRequest

// string database = 1;
inline void ListCollectionsRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListCollectionsRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsRequest.database)
  return _internal_database();
}
inline void ListCollectionsRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.ListCollectionsRequest.database)
}
inline std::string* ListCollectionsRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.ListCollectionsRequest.database)
  return _internal_mutable_database();
}
inline const std::string& ListCollectionsRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void ListCollectionsRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCollectionsRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.ListCollectionsRequest.database)
}
inline void ListCollectionsRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.ListCollectionsRequest.database)
}
inline void ListCollectionsRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.ListCollectionsRequest.database)
}
inline std::string* ListCollectionsRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCollectionsRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.ListCollectionsRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCollectionsRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.ListCollectionsRequest.database)
}

// bool transfer = 2;
inline void ListCollectionsRequest::clear_transfer() {
  transfer_ = false;
}
inline bool ListCollectionsRequest::_internal_transfer() const {
  return transfer_;
}
inline bool ListCollectionsRequest::transfer() const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsRequest.transfer)
  return _internal_transfer();
}
inline void ListCollectionsRequest::_internal_set_transfer(bool value) {
  
  transfer_ = value;
}
inline void ListCollectionsRequest::set_transfer(bool value) {
  _internal_set_transfer(value);
  // @@protoc_insertion_point(field_set:olama.ListCollectionsRequest.transfer)
}

// -------------------------------------------------------------------

// ListCollectionsResponse

// int32 code = 1;
inline void ListCollectionsResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListCollectionsResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListCollectionsResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsResponse.code)
  return _internal_code();
}
inline void ListCollectionsResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ListCollectionsResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.ListCollectionsResponse.code)
}

// string msg = 2;
inline void ListCollectionsResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListCollectionsResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsResponse.msg)
  return _internal_msg();
}
inline void ListCollectionsResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.ListCollectionsResponse.msg)
}
inline std::string* ListCollectionsResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.ListCollectionsResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& ListCollectionsResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ListCollectionsResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCollectionsResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.ListCollectionsResponse.msg)
}
inline void ListCollectionsResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.ListCollectionsResponse.msg)
}
inline void ListCollectionsResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.ListCollectionsResponse.msg)
}
inline std::string* ListCollectionsResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCollectionsResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.ListCollectionsResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCollectionsResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.ListCollectionsResponse.msg)
}

// string redirect = 3;
inline void ListCollectionsResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListCollectionsResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsResponse.redirect)
  return _internal_redirect();
}
inline void ListCollectionsResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.ListCollectionsResponse.redirect)
}
inline std::string* ListCollectionsResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.ListCollectionsResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& ListCollectionsResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void ListCollectionsResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCollectionsResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.ListCollectionsResponse.redirect)
}
inline void ListCollectionsResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.ListCollectionsResponse.redirect)
}
inline void ListCollectionsResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.ListCollectionsResponse.redirect)
}
inline std::string* ListCollectionsResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCollectionsResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.ListCollectionsResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCollectionsResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.ListCollectionsResponse.redirect)
}

// repeated .olama.CreateCollectionRequest collections = 4;
inline int ListCollectionsResponse::_internal_collections_size() const {
  return collections_.size();
}
inline int ListCollectionsResponse::collections_size() const {
  return _internal_collections_size();
}
inline void ListCollectionsResponse::clear_collections() {
  collections_.Clear();
}
inline ::olama::CreateCollectionRequest* ListCollectionsResponse::mutable_collections(int index) {
  // @@protoc_insertion_point(field_mutable:olama.ListCollectionsResponse.collections)
  return collections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CreateCollectionRequest >*
ListCollectionsResponse::mutable_collections() {
  // @@protoc_insertion_point(field_mutable_list:olama.ListCollectionsResponse.collections)
  return &collections_;
}
inline const ::olama::CreateCollectionRequest& ListCollectionsResponse::_internal_collections(int index) const {
  return collections_.Get(index);
}
inline const ::olama::CreateCollectionRequest& ListCollectionsResponse::collections(int index) const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsResponse.collections)
  return _internal_collections(index);
}
inline ::olama::CreateCollectionRequest* ListCollectionsResponse::_internal_add_collections() {
  return collections_.Add();
}
inline ::olama::CreateCollectionRequest* ListCollectionsResponse::add_collections() {
  // @@protoc_insertion_point(field_add:olama.ListCollectionsResponse.collections)
  return _internal_add_collections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CreateCollectionRequest >&
ListCollectionsResponse::collections() const {
  // @@protoc_insertion_point(field_list:olama.ListCollectionsResponse.collections)
  return collections_;
}

// repeated .olama.CollectionState states = 5;
inline int ListCollectionsResponse::_internal_states_size() const {
  return states_.size();
}
inline int ListCollectionsResponse::states_size() const {
  return _internal_states_size();
}
inline void ListCollectionsResponse::clear_states() {
  states_.Clear();
}
inline ::olama::CollectionState* ListCollectionsResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:olama.ListCollectionsResponse.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CollectionState >*
ListCollectionsResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:olama.ListCollectionsResponse.states)
  return &states_;
}
inline const ::olama::CollectionState& ListCollectionsResponse::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::olama::CollectionState& ListCollectionsResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:olama.ListCollectionsResponse.states)
  return _internal_states(index);
}
inline ::olama::CollectionState* ListCollectionsResponse::_internal_add_states() {
  return states_.Add();
}
inline ::olama::CollectionState* ListCollectionsResponse::add_states() {
  // @@protoc_insertion_point(field_add:olama.ListCollectionsResponse.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::CollectionState >&
ListCollectionsResponse::states() const {
  // @@protoc_insertion_point(field_list:olama.ListCollectionsResponse.states)
  return states_;
}

// -------------------------------------------------------------------

// IndexParams

// uint32 M = 1;
inline void IndexParams::clear_m() {
  m_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::_internal_m() const {
  return m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::m() const {
  // @@protoc_insertion_point(field_get:olama.IndexParams.M)
  return _internal_m();
}
inline void IndexParams::_internal_set_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  m_ = value;
}
inline void IndexParams::set_m(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:olama.IndexParams.M)
}

// uint32 efConstruction = 2;
inline void IndexParams::clear_efconstruction() {
  efconstruction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::_internal_efconstruction() const {
  return efconstruction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::efconstruction() const {
  // @@protoc_insertion_point(field_get:olama.IndexParams.efConstruction)
  return _internal_efconstruction();
}
inline void IndexParams::_internal_set_efconstruction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  efconstruction_ = value;
}
inline void IndexParams::set_efconstruction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_efconstruction(value);
  // @@protoc_insertion_point(field_set:olama.IndexParams.efConstruction)
}

// uint32 nprobe = 3;
inline void IndexParams::clear_nprobe() {
  nprobe_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::_internal_nprobe() const {
  return nprobe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::nprobe() const {
  // @@protoc_insertion_point(field_get:olama.IndexParams.nprobe)
  return _internal_nprobe();
}
inline void IndexParams::_internal_set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nprobe_ = value;
}
inline void IndexParams::set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nprobe(value);
  // @@protoc_insertion_point(field_set:olama.IndexParams.nprobe)
}

// uint32 nlist = 4;
inline void IndexParams::clear_nlist() {
  nlist_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::_internal_nlist() const {
  return nlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexParams::nlist() const {
  // @@protoc_insertion_point(field_get:olama.IndexParams.nlist)
  return _internal_nlist();
}
inline void IndexParams::_internal_set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nlist_ = value;
}
inline void IndexParams::set_nlist(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nlist(value);
  // @@protoc_insertion_point(field_set:olama.IndexParams.nlist)
}

// -------------------------------------------------------------------

// IndexColumn

// string fieldName = 1;
inline void IndexColumn::clear_fieldname() {
  fieldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexColumn::fieldname() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.fieldName)
  return _internal_fieldname();
}
inline void IndexColumn::set_fieldname(const std::string& value) {
  _internal_set_fieldname(value);
  // @@protoc_insertion_point(field_set:olama.IndexColumn.fieldName)
}
inline std::string* IndexColumn::mutable_fieldname() {
  // @@protoc_insertion_point(field_mutable:olama.IndexColumn.fieldName)
  return _internal_mutable_fieldname();
}
inline const std::string& IndexColumn::_internal_fieldname() const {
  return fieldname_.GetNoArena();
}
inline void IndexColumn::_internal_set_fieldname(const std::string& value) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexColumn::set_fieldname(std::string&& value) {
  
  fieldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexColumn.fieldName)
}
inline void IndexColumn::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexColumn.fieldName)
}
inline void IndexColumn::set_fieldname(const char* value, size_t size) {
  
  fieldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexColumn.fieldName)
}
inline std::string* IndexColumn::_internal_mutable_fieldname() {
  
  return fieldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexColumn::release_fieldname() {
  // @@protoc_insertion_point(field_release:olama.IndexColumn.fieldName)
  
  return fieldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexColumn::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexColumn.fieldName)
}

// string fieldType = 2;
inline void IndexColumn::clear_fieldtype() {
  fieldtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexColumn::fieldtype() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.fieldType)
  return _internal_fieldtype();
}
inline void IndexColumn::set_fieldtype(const std::string& value) {
  _internal_set_fieldtype(value);
  // @@protoc_insertion_point(field_set:olama.IndexColumn.fieldType)
}
inline std::string* IndexColumn::mutable_fieldtype() {
  // @@protoc_insertion_point(field_mutable:olama.IndexColumn.fieldType)
  return _internal_mutable_fieldtype();
}
inline const std::string& IndexColumn::_internal_fieldtype() const {
  return fieldtype_.GetNoArena();
}
inline void IndexColumn::_internal_set_fieldtype(const std::string& value) {
  
  fieldtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexColumn::set_fieldtype(std::string&& value) {
  
  fieldtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexColumn.fieldType)
}
inline void IndexColumn::set_fieldtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexColumn.fieldType)
}
inline void IndexColumn::set_fieldtype(const char* value, size_t size) {
  
  fieldtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexColumn.fieldType)
}
inline std::string* IndexColumn::_internal_mutable_fieldtype() {
  
  return fieldtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexColumn::release_fieldtype() {
  // @@protoc_insertion_point(field_release:olama.IndexColumn.fieldType)
  
  return fieldtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexColumn::set_allocated_fieldtype(std::string* fieldtype) {
  if (fieldtype != nullptr) {
    
  } else {
    
  }
  fieldtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldtype);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexColumn.fieldType)
}

// string indexType = 3;
inline void IndexColumn::clear_indextype() {
  indextype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexColumn::indextype() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.indexType)
  return _internal_indextype();
}
inline void IndexColumn::set_indextype(const std::string& value) {
  _internal_set_indextype(value);
  // @@protoc_insertion_point(field_set:olama.IndexColumn.indexType)
}
inline std::string* IndexColumn::mutable_indextype() {
  // @@protoc_insertion_point(field_mutable:olama.IndexColumn.indexType)
  return _internal_mutable_indextype();
}
inline const std::string& IndexColumn::_internal_indextype() const {
  return indextype_.GetNoArena();
}
inline void IndexColumn::_internal_set_indextype(const std::string& value) {
  
  indextype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexColumn::set_indextype(std::string&& value) {
  
  indextype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexColumn.indexType)
}
inline void IndexColumn::set_indextype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  indextype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexColumn.indexType)
}
inline void IndexColumn::set_indextype(const char* value, size_t size) {
  
  indextype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexColumn.indexType)
}
inline std::string* IndexColumn::_internal_mutable_indextype() {
  
  return indextype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexColumn::release_indextype() {
  // @@protoc_insertion_point(field_release:olama.IndexColumn.indexType)
  
  return indextype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexColumn::set_allocated_indextype(std::string* indextype) {
  if (indextype != nullptr) {
    
  } else {
    
  }
  indextype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indextype);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexColumn.indexType)
}

// uint32 dimension = 4;
inline void IndexColumn::clear_dimension() {
  dimension_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexColumn::_internal_dimension() const {
  return dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexColumn::dimension() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.dimension)
  return _internal_dimension();
}
inline void IndexColumn::_internal_set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dimension_ = value;
}
inline void IndexColumn::set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:olama.IndexColumn.dimension)
}

// string metricType = 5;
inline void IndexColumn::clear_metrictype() {
  metrictype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexColumn::metrictype() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.metricType)
  return _internal_metrictype();
}
inline void IndexColumn::set_metrictype(const std::string& value) {
  _internal_set_metrictype(value);
  // @@protoc_insertion_point(field_set:olama.IndexColumn.metricType)
}
inline std::string* IndexColumn::mutable_metrictype() {
  // @@protoc_insertion_point(field_mutable:olama.IndexColumn.metricType)
  return _internal_mutable_metrictype();
}
inline const std::string& IndexColumn::_internal_metrictype() const {
  return metrictype_.GetNoArena();
}
inline void IndexColumn::_internal_set_metrictype(const std::string& value) {
  
  metrictype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexColumn::set_metrictype(std::string&& value) {
  
  metrictype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexColumn.metricType)
}
inline void IndexColumn::set_metrictype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metrictype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexColumn.metricType)
}
inline void IndexColumn::set_metrictype(const char* value, size_t size) {
  
  metrictype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexColumn.metricType)
}
inline std::string* IndexColumn::_internal_mutable_metrictype() {
  
  return metrictype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexColumn::release_metrictype() {
  // @@protoc_insertion_point(field_release:olama.IndexColumn.metricType)
  
  return metrictype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexColumn::set_allocated_metrictype(std::string* metrictype) {
  if (metrictype != nullptr) {
    
  } else {
    
  }
  metrictype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metrictype);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexColumn.metricType)
}

// .olama.IndexParams params = 8;
inline bool IndexColumn::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool IndexColumn::has_params() const {
  return _internal_has_params();
}
inline void IndexColumn::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::olama::IndexParams& IndexColumn::_internal_params() const {
  const ::olama::IndexParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::IndexParams*>(
      &::olama::_IndexParams_default_instance_);
}
inline const ::olama::IndexParams& IndexColumn::params() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.params)
  return _internal_params();
}
inline ::olama::IndexParams* IndexColumn::release_params() {
  // @@protoc_insertion_point(field_release:olama.IndexColumn.params)
  
  ::olama::IndexParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::olama::IndexParams* IndexColumn::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::IndexParams>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline ::olama::IndexParams* IndexColumn::mutable_params() {
  // @@protoc_insertion_point(field_mutable:olama.IndexColumn.params)
  return _internal_mutable_params();
}
inline void IndexColumn::set_allocated_params(::olama::IndexParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:olama.IndexColumn.params)
}

// string fieldElementType = 9;
inline void IndexColumn::clear_fieldelementtype() {
  fieldelementtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexColumn::fieldelementtype() const {
  // @@protoc_insertion_point(field_get:olama.IndexColumn.fieldElementType)
  return _internal_fieldelementtype();
}
inline void IndexColumn::set_fieldelementtype(const std::string& value) {
  _internal_set_fieldelementtype(value);
  // @@protoc_insertion_point(field_set:olama.IndexColumn.fieldElementType)
}
inline std::string* IndexColumn::mutable_fieldelementtype() {
  // @@protoc_insertion_point(field_mutable:olama.IndexColumn.fieldElementType)
  return _internal_mutable_fieldelementtype();
}
inline const std::string& IndexColumn::_internal_fieldelementtype() const {
  return fieldelementtype_.GetNoArena();
}
inline void IndexColumn::_internal_set_fieldelementtype(const std::string& value) {
  
  fieldelementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexColumn::set_fieldelementtype(std::string&& value) {
  
  fieldelementtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexColumn.fieldElementType)
}
inline void IndexColumn::set_fieldelementtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldelementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexColumn.fieldElementType)
}
inline void IndexColumn::set_fieldelementtype(const char* value, size_t size) {
  
  fieldelementtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexColumn.fieldElementType)
}
inline std::string* IndexColumn::_internal_mutable_fieldelementtype() {
  
  return fieldelementtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexColumn::release_fieldelementtype() {
  // @@protoc_insertion_point(field_release:olama.IndexColumn.fieldElementType)
  
  return fieldelementtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexColumn::set_allocated_fieldelementtype(std::string* fieldelementtype) {
  if (fieldelementtype != nullptr) {
    
  } else {
    
  }
  fieldelementtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldelementtype);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexColumn.fieldElementType)
}

// -------------------------------------------------------------------

// IndexStatus

// string status = 1;
inline void IndexStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexStatus::status() const {
  // @@protoc_insertion_point(field_get:olama.IndexStatus.status)
  return _internal_status();
}
inline void IndexStatus::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:olama.IndexStatus.status)
}
inline std::string* IndexStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable:olama.IndexStatus.status)
  return _internal_mutable_status();
}
inline const std::string& IndexStatus::_internal_status() const {
  return status_.GetNoArena();
}
inline void IndexStatus::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexStatus::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexStatus.status)
}
inline void IndexStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexStatus.status)
}
inline void IndexStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexStatus.status)
}
inline std::string* IndexStatus::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexStatus::release_status() {
  // @@protoc_insertion_point(field_release:olama.IndexStatus.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexStatus.status)
}

// string progress = 2;
inline void IndexStatus::clear_progress() {
  progress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexStatus::progress() const {
  // @@protoc_insertion_point(field_get:olama.IndexStatus.progress)
  return _internal_progress();
}
inline void IndexStatus::set_progress(const std::string& value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:olama.IndexStatus.progress)
}
inline std::string* IndexStatus::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:olama.IndexStatus.progress)
  return _internal_mutable_progress();
}
inline const std::string& IndexStatus::_internal_progress() const {
  return progress_.GetNoArena();
}
inline void IndexStatus::_internal_set_progress(const std::string& value) {
  
  progress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexStatus::set_progress(std::string&& value) {
  
  progress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexStatus.progress)
}
inline void IndexStatus::set_progress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  progress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexStatus.progress)
}
inline void IndexStatus::set_progress(const char* value, size_t size) {
  
  progress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexStatus.progress)
}
inline std::string* IndexStatus::_internal_mutable_progress() {
  
  return progress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexStatus::release_progress() {
  // @@protoc_insertion_point(field_release:olama.IndexStatus.progress)
  
  return progress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexStatus::set_allocated_progress(std::string* progress) {
  if (progress != nullptr) {
    
  } else {
    
  }
  progress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), progress);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexStatus.progress)
}

// string startTime = 3;
inline void IndexStatus::clear_starttime() {
  starttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexStatus::starttime() const {
  // @@protoc_insertion_point(field_get:olama.IndexStatus.startTime)
  return _internal_starttime();
}
inline void IndexStatus::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:olama.IndexStatus.startTime)
}
inline std::string* IndexStatus::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:olama.IndexStatus.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& IndexStatus::_internal_starttime() const {
  return starttime_.GetNoArena();
}
inline void IndexStatus::_internal_set_starttime(const std::string& value) {
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexStatus::set_starttime(std::string&& value) {
  
  starttime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.IndexStatus.startTime)
}
inline void IndexStatus::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.IndexStatus.startTime)
}
inline void IndexStatus::set_starttime(const char* value, size_t size) {
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.IndexStatus.startTime)
}
inline std::string* IndexStatus::_internal_mutable_starttime() {
  
  return starttime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexStatus::release_starttime() {
  // @@protoc_insertion_point(field_release:olama.IndexStatus.startTime)
  
  return starttime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexStatus::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime);
  // @@protoc_insertion_point(field_set_allocated:olama.IndexStatus.startTime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateCollectionRequest

// string database = 1;
inline void CreateCollectionRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.database)
  return _internal_database();
}
inline void CreateCollectionRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.database)
}
inline std::string* CreateCollectionRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.database)
  return _internal_mutable_database();
}
inline const std::string& CreateCollectionRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void CreateCollectionRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCollectionRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CreateCollectionRequest.database)
}
inline void CreateCollectionRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionRequest.database)
}
inline void CreateCollectionRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionRequest.database)
}
inline std::string* CreateCollectionRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.database)
}

// string collection = 2;
inline void CreateCollectionRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.collection)
  return _internal_collection();
}
inline void CreateCollectionRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.collection)
}
inline std::string* CreateCollectionRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& CreateCollectionRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void CreateCollectionRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCollectionRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CreateCollectionRequest.collection)
}
inline void CreateCollectionRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionRequest.collection)
}
inline void CreateCollectionRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionRequest.collection)
}
inline std::string* CreateCollectionRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.collection)
}

// uint32 replicaNum = 3;
inline void CreateCollectionRequest::clear_replicanum() {
  replicanum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCollectionRequest::_internal_replicanum() const {
  return replicanum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCollectionRequest::replicanum() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.replicaNum)
  return _internal_replicanum();
}
inline void CreateCollectionRequest::_internal_set_replicanum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  replicanum_ = value;
}
inline void CreateCollectionRequest::set_replicanum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replicanum(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.replicaNum)
}

// uint32 shardNum = 4;
inline void CreateCollectionRequest::clear_shardnum() {
  shardnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCollectionRequest::_internal_shardnum() const {
  return shardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateCollectionRequest::shardnum() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.shardNum)
  return _internal_shardnum();
}
inline void CreateCollectionRequest::_internal_set_shardnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shardnum_ = value;
}
inline void CreateCollectionRequest::set_shardnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shardnum(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.shardNum)
}

// uint64 size = 5;
inline void CreateCollectionRequest::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateCollectionRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateCollectionRequest::size() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.size)
  return _internal_size();
}
inline void CreateCollectionRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void CreateCollectionRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.size)
}

// string createTime = 6;
inline void CreateCollectionRequest::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::createtime() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.createTime)
  return _internal_createtime();
}
inline void CreateCollectionRequest::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.createTime)
}
inline std::string* CreateCollectionRequest::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& CreateCollectionRequest::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void CreateCollectionRequest::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCollectionRequest::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CreateCollectionRequest.createTime)
}
inline void CreateCollectionRequest::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionRequest.createTime)
}
inline void CreateCollectionRequest::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionRequest.createTime)
}
inline std::string* CreateCollectionRequest::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_createtime() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.createTime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.createTime)
}

// string description = 7;
inline void CreateCollectionRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionRequest::description() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.description)
  return _internal_description();
}
inline void CreateCollectionRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.description)
}
inline std::string* CreateCollectionRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.description)
  return _internal_mutable_description();
}
inline const std::string& CreateCollectionRequest::_internal_description() const {
  return description_.GetNoArena();
}
inline void CreateCollectionRequest::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCollectionRequest::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CreateCollectionRequest.description)
}
inline void CreateCollectionRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionRequest.description)
}
inline void CreateCollectionRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionRequest.description)
}
inline std::string* CreateCollectionRequest::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionRequest::release_description() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.description)
}

// map<string, .olama.IndexColumn> indexes = 8;
inline int CreateCollectionRequest::_internal_indexes_size() const {
  return indexes_.size();
}
inline int CreateCollectionRequest::indexes_size() const {
  return _internal_indexes_size();
}
inline void CreateCollectionRequest::clear_indexes() {
  indexes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >&
CreateCollectionRequest::_internal_indexes() const {
  return indexes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >&
CreateCollectionRequest::indexes() const {
  // @@protoc_insertion_point(field_map:olama.CreateCollectionRequest.indexes)
  return _internal_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >*
CreateCollectionRequest::_internal_mutable_indexes() {
  return indexes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::IndexColumn >*
CreateCollectionRequest::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_map:olama.CreateCollectionRequest.indexes)
  return _internal_mutable_indexes();
}

// .olama.IndexStatus indexStatus = 9;
inline bool CreateCollectionRequest::_internal_has_indexstatus() const {
  return this != internal_default_instance() && indexstatus_ != nullptr;
}
inline bool CreateCollectionRequest::has_indexstatus() const {
  return _internal_has_indexstatus();
}
inline void CreateCollectionRequest::clear_indexstatus() {
  if (GetArenaNoVirtual() == nullptr && indexstatus_ != nullptr) {
    delete indexstatus_;
  }
  indexstatus_ = nullptr;
}
inline const ::olama::IndexStatus& CreateCollectionRequest::_internal_indexstatus() const {
  const ::olama::IndexStatus* p = indexstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::IndexStatus*>(
      &::olama::_IndexStatus_default_instance_);
}
inline const ::olama::IndexStatus& CreateCollectionRequest::indexstatus() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.indexStatus)
  return _internal_indexstatus();
}
inline ::olama::IndexStatus* CreateCollectionRequest::release_indexstatus() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.indexStatus)
  
  ::olama::IndexStatus* temp = indexstatus_;
  indexstatus_ = nullptr;
  return temp;
}
inline ::olama::IndexStatus* CreateCollectionRequest::_internal_mutable_indexstatus() {
  
  if (indexstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::IndexStatus>(GetArenaNoVirtual());
    indexstatus_ = p;
  }
  return indexstatus_;
}
inline ::olama::IndexStatus* CreateCollectionRequest::mutable_indexstatus() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.indexStatus)
  return _internal_mutable_indexstatus();
}
inline void CreateCollectionRequest::set_allocated_indexstatus(::olama::IndexStatus* indexstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indexstatus_;
  }
  if (indexstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indexstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexstatus, submessage_arena);
    }
    
  } else {
    
  }
  indexstatus_ = indexstatus;
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.indexStatus)
}

// repeated string alias_list = 10;
inline int CreateCollectionRequest::_internal_alias_list_size() const {
  return alias_list_.size();
}
inline int CreateCollectionRequest::alias_list_size() const {
  return _internal_alias_list_size();
}
inline void CreateCollectionRequest::clear_alias_list() {
  alias_list_.Clear();
}
inline std::string* CreateCollectionRequest::add_alias_list() {
  // @@protoc_insertion_point(field_add_mutable:olama.CreateCollectionRequest.alias_list)
  return _internal_add_alias_list();
}
inline const std::string& CreateCollectionRequest::_internal_alias_list(int index) const {
  return alias_list_.Get(index);
}
inline const std::string& CreateCollectionRequest::alias_list(int index) const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.alias_list)
  return _internal_alias_list(index);
}
inline std::string* CreateCollectionRequest::mutable_alias_list(int index) {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.alias_list)
  return alias_list_.Mutable(index);
}
inline void CreateCollectionRequest::set_alias_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.alias_list)
  alias_list_.Mutable(index)->assign(value);
}
inline void CreateCollectionRequest::set_alias_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.alias_list)
  alias_list_.Mutable(index)->assign(std::move(value));
}
inline void CreateCollectionRequest::set_alias_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alias_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionRequest.alias_list)
}
inline void CreateCollectionRequest::set_alias_list(int index, const char* value, size_t size) {
  alias_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionRequest.alias_list)
}
inline std::string* CreateCollectionRequest::_internal_add_alias_list() {
  return alias_list_.Add();
}
inline void CreateCollectionRequest::add_alias_list(const std::string& value) {
  alias_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.CreateCollectionRequest.alias_list)
}
inline void CreateCollectionRequest::add_alias_list(std::string&& value) {
  alias_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.CreateCollectionRequest.alias_list)
}
inline void CreateCollectionRequest::add_alias_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alias_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.CreateCollectionRequest.alias_list)
}
inline void CreateCollectionRequest::add_alias_list(const char* value, size_t size) {
  alias_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.CreateCollectionRequest.alias_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateCollectionRequest::alias_list() const {
  // @@protoc_insertion_point(field_list:olama.CreateCollectionRequest.alias_list)
  return alias_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateCollectionRequest::mutable_alias_list() {
  // @@protoc_insertion_point(field_mutable_list:olama.CreateCollectionRequest.alias_list)
  return &alias_list_;
}

// .olama.EmbeddingParams embeddingParams = 11;
inline bool CreateCollectionRequest::_internal_has_embeddingparams() const {
  return this != internal_default_instance() && embeddingparams_ != nullptr;
}
inline bool CreateCollectionRequest::has_embeddingparams() const {
  return _internal_has_embeddingparams();
}
inline void CreateCollectionRequest::clear_embeddingparams() {
  if (GetArenaNoVirtual() == nullptr && embeddingparams_ != nullptr) {
    delete embeddingparams_;
  }
  embeddingparams_ = nullptr;
}
inline const ::olama::EmbeddingParams& CreateCollectionRequest::_internal_embeddingparams() const {
  const ::olama::EmbeddingParams* p = embeddingparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::EmbeddingParams*>(
      &::olama::_EmbeddingParams_default_instance_);
}
inline const ::olama::EmbeddingParams& CreateCollectionRequest::embeddingparams() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.embeddingParams)
  return _internal_embeddingparams();
}
inline ::olama::EmbeddingParams* CreateCollectionRequest::release_embeddingparams() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.embeddingParams)
  
  ::olama::EmbeddingParams* temp = embeddingparams_;
  embeddingparams_ = nullptr;
  return temp;
}
inline ::olama::EmbeddingParams* CreateCollectionRequest::_internal_mutable_embeddingparams() {
  
  if (embeddingparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::EmbeddingParams>(GetArenaNoVirtual());
    embeddingparams_ = p;
  }
  return embeddingparams_;
}
inline ::olama::EmbeddingParams* CreateCollectionRequest::mutable_embeddingparams() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.embeddingParams)
  return _internal_mutable_embeddingparams();
}
inline void CreateCollectionRequest::set_allocated_embeddingparams(::olama::EmbeddingParams* embeddingparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete embeddingparams_;
  }
  if (embeddingparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      embeddingparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embeddingparams, submessage_arena);
    }
    
  } else {
    
  }
  embeddingparams_ = embeddingparams;
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.embeddingParams)
}

// int64 version = 12;
inline void CreateCollectionRequest::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateCollectionRequest::version() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.version)
  return _internal_version();
}
inline void CreateCollectionRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void CreateCollectionRequest::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionRequest.version)
}

// .olama.TTLConfig ttlConfig = 13;
inline bool CreateCollectionRequest::_internal_has_ttlconfig() const {
  return this != internal_default_instance() && ttlconfig_ != nullptr;
}
inline bool CreateCollectionRequest::has_ttlconfig() const {
  return _internal_has_ttlconfig();
}
inline void CreateCollectionRequest::clear_ttlconfig() {
  if (GetArenaNoVirtual() == nullptr && ttlconfig_ != nullptr) {
    delete ttlconfig_;
  }
  ttlconfig_ = nullptr;
}
inline const ::olama::TTLConfig& CreateCollectionRequest::_internal_ttlconfig() const {
  const ::olama::TTLConfig* p = ttlconfig_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::TTLConfig*>(
      &::olama::_TTLConfig_default_instance_);
}
inline const ::olama::TTLConfig& CreateCollectionRequest::ttlconfig() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionRequest.ttlConfig)
  return _internal_ttlconfig();
}
inline ::olama::TTLConfig* CreateCollectionRequest::release_ttlconfig() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionRequest.ttlConfig)
  
  ::olama::TTLConfig* temp = ttlconfig_;
  ttlconfig_ = nullptr;
  return temp;
}
inline ::olama::TTLConfig* CreateCollectionRequest::_internal_mutable_ttlconfig() {
  
  if (ttlconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::TTLConfig>(GetArenaNoVirtual());
    ttlconfig_ = p;
  }
  return ttlconfig_;
}
inline ::olama::TTLConfig* CreateCollectionRequest::mutable_ttlconfig() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionRequest.ttlConfig)
  return _internal_mutable_ttlconfig();
}
inline void CreateCollectionRequest::set_allocated_ttlconfig(::olama::TTLConfig* ttlconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ttlconfig_;
  }
  if (ttlconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ttlconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttlconfig, submessage_arena);
    }
    
  } else {
    
  }
  ttlconfig_ = ttlconfig;
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionRequest.ttlConfig)
}

// -------------------------------------------------------------------

// CreateCollectionResponse

// int32 code = 1;
inline void CreateCollectionResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateCollectionResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateCollectionResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionResponse.code)
  return _internal_code();
}
inline void CreateCollectionResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CreateCollectionResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionResponse.code)
}

// string msg = 2;
inline void CreateCollectionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionResponse.msg)
  return _internal_msg();
}
inline void CreateCollectionResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionResponse.msg)
}
inline std::string* CreateCollectionResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& CreateCollectionResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void CreateCollectionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCollectionResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CreateCollectionResponse.msg)
}
inline void CreateCollectionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionResponse.msg)
}
inline void CreateCollectionResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionResponse.msg)
}
inline std::string* CreateCollectionResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionResponse.msg)
}

// string redirect = 3;
inline void CreateCollectionResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateCollectionResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionResponse.redirect)
  return _internal_redirect();
}
inline void CreateCollectionResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionResponse.redirect)
}
inline std::string* CreateCollectionResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.CreateCollectionResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& CreateCollectionResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void CreateCollectionResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateCollectionResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.CreateCollectionResponse.redirect)
}
inline void CreateCollectionResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.CreateCollectionResponse.redirect)
}
inline void CreateCollectionResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.CreateCollectionResponse.redirect)
}
inline std::string* CreateCollectionResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateCollectionResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.CreateCollectionResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCollectionResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.CreateCollectionResponse.redirect)
}

// uint64 affectedCount = 4;
inline void CreateCollectionResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateCollectionResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateCollectionResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.CreateCollectionResponse.affectedCount)
  return _internal_affectedcount();
}
inline void CreateCollectionResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void CreateCollectionResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.CreateCollectionResponse.affectedCount)
}

// -------------------------------------------------------------------

// DropCollectionRequest

// string database = 1;
inline void DropCollectionRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropCollectionRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionRequest.database)
  return _internal_database();
}
inline void DropCollectionRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionRequest.database)
}
inline std::string* DropCollectionRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.DropCollectionRequest.database)
  return _internal_mutable_database();
}
inline const std::string& DropCollectionRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void DropCollectionRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DropCollectionRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DropCollectionRequest.database)
}
inline void DropCollectionRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DropCollectionRequest.database)
}
inline void DropCollectionRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DropCollectionRequest.database)
}
inline std::string* DropCollectionRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropCollectionRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.DropCollectionRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropCollectionRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.DropCollectionRequest.database)
}

// string collection = 2;
inline void DropCollectionRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionRequest.collection)
  return _internal_collection();
}
inline void DropCollectionRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionRequest.collection)
}
inline std::string* DropCollectionRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.DropCollectionRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& DropCollectionRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void DropCollectionRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DropCollectionRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DropCollectionRequest.collection)
}
inline void DropCollectionRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DropCollectionRequest.collection)
}
inline void DropCollectionRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DropCollectionRequest.collection)
}
inline std::string* DropCollectionRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.DropCollectionRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropCollectionRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.DropCollectionRequest.collection)
}

// bool force = 3;
inline void DropCollectionRequest::clear_force() {
  force_ = false;
}
inline bool DropCollectionRequest::_internal_force() const {
  return force_;
}
inline bool DropCollectionRequest::force() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionRequest.force)
  return _internal_force();
}
inline void DropCollectionRequest::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void DropCollectionRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionRequest.force)
}

// bool without_alias = 4;
inline void DropCollectionRequest::clear_without_alias() {
  without_alias_ = false;
}
inline bool DropCollectionRequest::_internal_without_alias() const {
  return without_alias_;
}
inline bool DropCollectionRequest::without_alias() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionRequest.without_alias)
  return _internal_without_alias();
}
inline void DropCollectionRequest::_internal_set_without_alias(bool value) {
  
  without_alias_ = value;
}
inline void DropCollectionRequest::set_without_alias(bool value) {
  _internal_set_without_alias(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionRequest.without_alias)
}

// -------------------------------------------------------------------

// DropCollectionResponse

// int32 code = 1;
inline void DropCollectionResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropCollectionResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DropCollectionResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionResponse.code)
  return _internal_code();
}
inline void DropCollectionResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DropCollectionResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionResponse.code)
}

// string msg = 2;
inline void DropCollectionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropCollectionResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionResponse.msg)
  return _internal_msg();
}
inline void DropCollectionResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionResponse.msg)
}
inline std::string* DropCollectionResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.DropCollectionResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& DropCollectionResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void DropCollectionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DropCollectionResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DropCollectionResponse.msg)
}
inline void DropCollectionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DropCollectionResponse.msg)
}
inline void DropCollectionResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DropCollectionResponse.msg)
}
inline std::string* DropCollectionResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropCollectionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.DropCollectionResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropCollectionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.DropCollectionResponse.msg)
}

// string redirect = 3;
inline void DropCollectionResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DropCollectionResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionResponse.redirect)
  return _internal_redirect();
}
inline void DropCollectionResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionResponse.redirect)
}
inline std::string* DropCollectionResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.DropCollectionResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& DropCollectionResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void DropCollectionResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DropCollectionResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DropCollectionResponse.redirect)
}
inline void DropCollectionResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DropCollectionResponse.redirect)
}
inline void DropCollectionResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DropCollectionResponse.redirect)
}
inline std::string* DropCollectionResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DropCollectionResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.DropCollectionResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DropCollectionResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.DropCollectionResponse.redirect)
}

// uint64 affectedCount = 4;
inline void DropCollectionResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DropCollectionResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DropCollectionResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.DropCollectionResponse.affectedCount)
  return _internal_affectedcount();
}
inline void DropCollectionResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void DropCollectionResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.DropCollectionResponse.affectedCount)
}

// -------------------------------------------------------------------

// TruncateCollectionRequest

// string database = 1;
inline void TruncateCollectionRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TruncateCollectionRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionRequest.database)
  return _internal_database();
}
inline void TruncateCollectionRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionRequest.database)
}
inline std::string* TruncateCollectionRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.TruncateCollectionRequest.database)
  return _internal_mutable_database();
}
inline const std::string& TruncateCollectionRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void TruncateCollectionRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TruncateCollectionRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.TruncateCollectionRequest.database)
}
inline void TruncateCollectionRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.TruncateCollectionRequest.database)
}
inline void TruncateCollectionRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.TruncateCollectionRequest.database)
}
inline std::string* TruncateCollectionRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TruncateCollectionRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.TruncateCollectionRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateCollectionRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.TruncateCollectionRequest.database)
}

// string collection = 2;
inline void TruncateCollectionRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TruncateCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionRequest.collection)
  return _internal_collection();
}
inline void TruncateCollectionRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionRequest.collection)
}
inline std::string* TruncateCollectionRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.TruncateCollectionRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& TruncateCollectionRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void TruncateCollectionRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TruncateCollectionRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.TruncateCollectionRequest.collection)
}
inline void TruncateCollectionRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.TruncateCollectionRequest.collection)
}
inline void TruncateCollectionRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.TruncateCollectionRequest.collection)
}
inline std::string* TruncateCollectionRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TruncateCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.TruncateCollectionRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateCollectionRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.TruncateCollectionRequest.collection)
}

// bool only_truncate_ann_index = 3;
inline void TruncateCollectionRequest::clear_only_truncate_ann_index() {
  only_truncate_ann_index_ = false;
}
inline bool TruncateCollectionRequest::_internal_only_truncate_ann_index() const {
  return only_truncate_ann_index_;
}
inline bool TruncateCollectionRequest::only_truncate_ann_index() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionRequest.only_truncate_ann_index)
  return _internal_only_truncate_ann_index();
}
inline void TruncateCollectionRequest::_internal_set_only_truncate_ann_index(bool value) {
  
  only_truncate_ann_index_ = value;
}
inline void TruncateCollectionRequest::set_only_truncate_ann_index(bool value) {
  _internal_set_only_truncate_ann_index(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionRequest.only_truncate_ann_index)
}

// -------------------------------------------------------------------

// TruncateCollectionResponse

// int32 code = 1;
inline void TruncateCollectionResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TruncateCollectionResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TruncateCollectionResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionResponse.code)
  return _internal_code();
}
inline void TruncateCollectionResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void TruncateCollectionResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionResponse.code)
}

// string msg = 2;
inline void TruncateCollectionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TruncateCollectionResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionResponse.msg)
  return _internal_msg();
}
inline void TruncateCollectionResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionResponse.msg)
}
inline std::string* TruncateCollectionResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.TruncateCollectionResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& TruncateCollectionResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void TruncateCollectionResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TruncateCollectionResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.TruncateCollectionResponse.msg)
}
inline void TruncateCollectionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.TruncateCollectionResponse.msg)
}
inline void TruncateCollectionResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.TruncateCollectionResponse.msg)
}
inline std::string* TruncateCollectionResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TruncateCollectionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.TruncateCollectionResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateCollectionResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.TruncateCollectionResponse.msg)
}

// string redirect = 3;
inline void TruncateCollectionResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TruncateCollectionResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionResponse.redirect)
  return _internal_redirect();
}
inline void TruncateCollectionResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionResponse.redirect)
}
inline std::string* TruncateCollectionResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.TruncateCollectionResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& TruncateCollectionResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void TruncateCollectionResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TruncateCollectionResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.TruncateCollectionResponse.redirect)
}
inline void TruncateCollectionResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.TruncateCollectionResponse.redirect)
}
inline void TruncateCollectionResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.TruncateCollectionResponse.redirect)
}
inline std::string* TruncateCollectionResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TruncateCollectionResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.TruncateCollectionResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateCollectionResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.TruncateCollectionResponse.redirect)
}

// uint64 affectedCount = 4;
inline void TruncateCollectionResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TruncateCollectionResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TruncateCollectionResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.TruncateCollectionResponse.affectedCount)
  return _internal_affectedcount();
}
inline void TruncateCollectionResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void TruncateCollectionResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.TruncateCollectionResponse.affectedCount)
}

// -------------------------------------------------------------------

// RebuildIndexRequest

// string database = 1;
inline void RebuildIndexRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RebuildIndexRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexRequest.database)
  return _internal_database();
}
inline void RebuildIndexRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexRequest.database)
}
inline std::string* RebuildIndexRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.RebuildIndexRequest.database)
  return _internal_mutable_database();
}
inline const std::string& RebuildIndexRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void RebuildIndexRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RebuildIndexRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.RebuildIndexRequest.database)
}
inline void RebuildIndexRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.RebuildIndexRequest.database)
}
inline void RebuildIndexRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.RebuildIndexRequest.database)
}
inline std::string* RebuildIndexRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RebuildIndexRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.RebuildIndexRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RebuildIndexRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.RebuildIndexRequest.database)
}

// string collection = 2;
inline void RebuildIndexRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RebuildIndexRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexRequest.collection)
  return _internal_collection();
}
inline void RebuildIndexRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexRequest.collection)
}
inline std::string* RebuildIndexRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.RebuildIndexRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& RebuildIndexRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void RebuildIndexRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RebuildIndexRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.RebuildIndexRequest.collection)
}
inline void RebuildIndexRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.RebuildIndexRequest.collection)
}
inline void RebuildIndexRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.RebuildIndexRequest.collection)
}
inline std::string* RebuildIndexRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RebuildIndexRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.RebuildIndexRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RebuildIndexRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.RebuildIndexRequest.collection)
}

// bool dropBeforeRebuild = 3;
inline void RebuildIndexRequest::clear_dropbeforerebuild() {
  dropbeforerebuild_ = false;
}
inline bool RebuildIndexRequest::_internal_dropbeforerebuild() const {
  return dropbeforerebuild_;
}
inline bool RebuildIndexRequest::dropbeforerebuild() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexRequest.dropBeforeRebuild)
  return _internal_dropbeforerebuild();
}
inline void RebuildIndexRequest::_internal_set_dropbeforerebuild(bool value) {
  
  dropbeforerebuild_ = value;
}
inline void RebuildIndexRequest::set_dropbeforerebuild(bool value) {
  _internal_set_dropbeforerebuild(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexRequest.dropBeforeRebuild)
}

// int32 throttle = 4;
inline void RebuildIndexRequest::clear_throttle() {
  throttle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RebuildIndexRequest::_internal_throttle() const {
  return throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RebuildIndexRequest::throttle() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexRequest.throttle)
  return _internal_throttle();
}
inline void RebuildIndexRequest::_internal_set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throttle_ = value;
}
inline void RebuildIndexRequest::set_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexRequest.throttle)
}

// bool disable_train = 5;
inline void RebuildIndexRequest::clear_disable_train() {
  disable_train_ = false;
}
inline bool RebuildIndexRequest::_internal_disable_train() const {
  return disable_train_;
}
inline bool RebuildIndexRequest::disable_train() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexRequest.disable_train)
  return _internal_disable_train();
}
inline void RebuildIndexRequest::_internal_set_disable_train(bool value) {
  
  disable_train_ = value;
}
inline void RebuildIndexRequest::set_disable_train(bool value) {
  _internal_set_disable_train(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexRequest.disable_train)
}

// bool force_rebuild = 6;
inline void RebuildIndexRequest::clear_force_rebuild() {
  force_rebuild_ = false;
}
inline bool RebuildIndexRequest::_internal_force_rebuild() const {
  return force_rebuild_;
}
inline bool RebuildIndexRequest::force_rebuild() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexRequest.force_rebuild)
  return _internal_force_rebuild();
}
inline void RebuildIndexRequest::_internal_set_force_rebuild(bool value) {
  
  force_rebuild_ = value;
}
inline void RebuildIndexRequest::set_force_rebuild(bool value) {
  _internal_set_force_rebuild(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexRequest.force_rebuild)
}

// -------------------------------------------------------------------

// RebuildIndexResponse

// int32 code = 1;
inline void RebuildIndexResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RebuildIndexResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RebuildIndexResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexResponse.code)
  return _internal_code();
}
inline void RebuildIndexResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void RebuildIndexResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexResponse.code)
}

// string msg = 2;
inline void RebuildIndexResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RebuildIndexResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexResponse.msg)
  return _internal_msg();
}
inline void RebuildIndexResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexResponse.msg)
}
inline std::string* RebuildIndexResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.RebuildIndexResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& RebuildIndexResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void RebuildIndexResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RebuildIndexResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.RebuildIndexResponse.msg)
}
inline void RebuildIndexResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.RebuildIndexResponse.msg)
}
inline void RebuildIndexResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.RebuildIndexResponse.msg)
}
inline std::string* RebuildIndexResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RebuildIndexResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.RebuildIndexResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RebuildIndexResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.RebuildIndexResponse.msg)
}

// string redirect = 3;
inline void RebuildIndexResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RebuildIndexResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexResponse.redirect)
  return _internal_redirect();
}
inline void RebuildIndexResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.RebuildIndexResponse.redirect)
}
inline std::string* RebuildIndexResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.RebuildIndexResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& RebuildIndexResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void RebuildIndexResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RebuildIndexResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.RebuildIndexResponse.redirect)
}
inline void RebuildIndexResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.RebuildIndexResponse.redirect)
}
inline void RebuildIndexResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.RebuildIndexResponse.redirect)
}
inline std::string* RebuildIndexResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RebuildIndexResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.RebuildIndexResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RebuildIndexResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.RebuildIndexResponse.redirect)
}

// repeated string task_ids = 4;
inline int RebuildIndexResponse::_internal_task_ids_size() const {
  return task_ids_.size();
}
inline int RebuildIndexResponse::task_ids_size() const {
  return _internal_task_ids_size();
}
inline void RebuildIndexResponse::clear_task_ids() {
  task_ids_.Clear();
}
inline std::string* RebuildIndexResponse::add_task_ids() {
  // @@protoc_insertion_point(field_add_mutable:olama.RebuildIndexResponse.task_ids)
  return _internal_add_task_ids();
}
inline const std::string& RebuildIndexResponse::_internal_task_ids(int index) const {
  return task_ids_.Get(index);
}
inline const std::string& RebuildIndexResponse::task_ids(int index) const {
  // @@protoc_insertion_point(field_get:olama.RebuildIndexResponse.task_ids)
  return _internal_task_ids(index);
}
inline std::string* RebuildIndexResponse::mutable_task_ids(int index) {
  // @@protoc_insertion_point(field_mutable:olama.RebuildIndexResponse.task_ids)
  return task_ids_.Mutable(index);
}
inline void RebuildIndexResponse::set_task_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.RebuildIndexResponse.task_ids)
  task_ids_.Mutable(index)->assign(value);
}
inline void RebuildIndexResponse::set_task_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.RebuildIndexResponse.task_ids)
  task_ids_.Mutable(index)->assign(std::move(value));
}
inline void RebuildIndexResponse::set_task_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.RebuildIndexResponse.task_ids)
}
inline void RebuildIndexResponse::set_task_ids(int index, const char* value, size_t size) {
  task_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.RebuildIndexResponse.task_ids)
}
inline std::string* RebuildIndexResponse::_internal_add_task_ids() {
  return task_ids_.Add();
}
inline void RebuildIndexResponse::add_task_ids(const std::string& value) {
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.RebuildIndexResponse.task_ids)
}
inline void RebuildIndexResponse::add_task_ids(std::string&& value) {
  task_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.RebuildIndexResponse.task_ids)
}
inline void RebuildIndexResponse::add_task_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.RebuildIndexResponse.task_ids)
}
inline void RebuildIndexResponse::add_task_ids(const char* value, size_t size) {
  task_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.RebuildIndexResponse.task_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RebuildIndexResponse::task_ids() const {
  // @@protoc_insertion_point(field_list:olama.RebuildIndexResponse.task_ids)
  return task_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RebuildIndexResponse::mutable_task_ids() {
  // @@protoc_insertion_point(field_mutable_list:olama.RebuildIndexResponse.task_ids)
  return &task_ids_;
}

// -------------------------------------------------------------------

// UpsertRequest

// string database = 1;
inline void UpsertRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpsertRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.UpsertRequest.database)
  return _internal_database();
}
inline void UpsertRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.UpsertRequest.database)
}
inline std::string* UpsertRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.UpsertRequest.database)
  return _internal_mutable_database();
}
inline const std::string& UpsertRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void UpsertRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpsertRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpsertRequest.database)
}
inline void UpsertRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpsertRequest.database)
}
inline void UpsertRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpsertRequest.database)
}
inline std::string* UpsertRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpsertRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.UpsertRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpsertRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.UpsertRequest.database)
}

// string collection = 2;
inline void UpsertRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpsertRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.UpsertRequest.collection)
  return _internal_collection();
}
inline void UpsertRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.UpsertRequest.collection)
}
inline std::string* UpsertRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.UpsertRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& UpsertRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void UpsertRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpsertRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpsertRequest.collection)
}
inline void UpsertRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpsertRequest.collection)
}
inline void UpsertRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpsertRequest.collection)
}
inline std::string* UpsertRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpsertRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.UpsertRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpsertRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.UpsertRequest.collection)
}

// bool buildIndex = 3;
inline void UpsertRequest::clear_buildindex() {
  buildindex_ = false;
}
inline bool UpsertRequest::_internal_buildindex() const {
  return buildindex_;
}
inline bool UpsertRequest::buildindex() const {
  // @@protoc_insertion_point(field_get:olama.UpsertRequest.buildIndex)
  return _internal_buildindex();
}
inline void UpsertRequest::_internal_set_buildindex(bool value) {
  
  buildindex_ = value;
}
inline void UpsertRequest::set_buildindex(bool value) {
  _internal_set_buildindex(value);
  // @@protoc_insertion_point(field_set:olama.UpsertRequest.buildIndex)
}

// repeated .olama.Document documents = 4;
inline int UpsertRequest::_internal_documents_size() const {
  return documents_.size();
}
inline int UpsertRequest::documents_size() const {
  return _internal_documents_size();
}
inline void UpsertRequest::clear_documents() {
  documents_.Clear();
}
inline ::olama::Document* UpsertRequest::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:olama.UpsertRequest.documents)
  return documents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >*
UpsertRequest::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:olama.UpsertRequest.documents)
  return &documents_;
}
inline const ::olama::Document& UpsertRequest::_internal_documents(int index) const {
  return documents_.Get(index);
}
inline const ::olama::Document& UpsertRequest::documents(int index) const {
  // @@protoc_insertion_point(field_get:olama.UpsertRequest.documents)
  return _internal_documents(index);
}
inline ::olama::Document* UpsertRequest::_internal_add_documents() {
  return documents_.Add();
}
inline ::olama::Document* UpsertRequest::add_documents() {
  // @@protoc_insertion_point(field_add:olama.UpsertRequest.documents)
  return _internal_add_documents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >&
UpsertRequest::documents() const {
  // @@protoc_insertion_point(field_list:olama.UpsertRequest.documents)
  return documents_;
}

// -------------------------------------------------------------------

// EmbeddingExtraInfo

// uint64 token_used = 1;
inline void EmbeddingExtraInfo::clear_token_used() {
  token_used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EmbeddingExtraInfo::_internal_token_used() const {
  return token_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EmbeddingExtraInfo::token_used() const {
  // @@protoc_insertion_point(field_get:olama.EmbeddingExtraInfo.token_used)
  return _internal_token_used();
}
inline void EmbeddingExtraInfo::_internal_set_token_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_used_ = value;
}
inline void EmbeddingExtraInfo::set_token_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_used(value);
  // @@protoc_insertion_point(field_set:olama.EmbeddingExtraInfo.token_used)
}

// -------------------------------------------------------------------

// UpsertResponse

// int32 code = 1;
inline void UpsertResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpsertResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpsertResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.UpsertResponse.code)
  return _internal_code();
}
inline void UpsertResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UpsertResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.UpsertResponse.code)
}

// string msg = 2;
inline void UpsertResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpsertResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.UpsertResponse.msg)
  return _internal_msg();
}
inline void UpsertResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.UpsertResponse.msg)
}
inline std::string* UpsertResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.UpsertResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& UpsertResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void UpsertResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpsertResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpsertResponse.msg)
}
inline void UpsertResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpsertResponse.msg)
}
inline void UpsertResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpsertResponse.msg)
}
inline std::string* UpsertResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpsertResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.UpsertResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpsertResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.UpsertResponse.msg)
}

// string redirect = 3;
inline void UpsertResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpsertResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.UpsertResponse.redirect)
  return _internal_redirect();
}
inline void UpsertResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.UpsertResponse.redirect)
}
inline std::string* UpsertResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.UpsertResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& UpsertResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void UpsertResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpsertResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpsertResponse.redirect)
}
inline void UpsertResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpsertResponse.redirect)
}
inline void UpsertResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpsertResponse.redirect)
}
inline std::string* UpsertResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpsertResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.UpsertResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpsertResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.UpsertResponse.redirect)
}

// uint64 affectedCount = 4;
inline void UpsertResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpsertResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpsertResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.UpsertResponse.affectedCount)
  return _internal_affectedcount();
}
inline void UpsertResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void UpsertResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.UpsertResponse.affectedCount)
}

// string warning = 5;
inline void UpsertResponse::clear_warning() {
  warning_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpsertResponse::warning() const {
  // @@protoc_insertion_point(field_get:olama.UpsertResponse.warning)
  return _internal_warning();
}
inline void UpsertResponse::set_warning(const std::string& value) {
  _internal_set_warning(value);
  // @@protoc_insertion_point(field_set:olama.UpsertResponse.warning)
}
inline std::string* UpsertResponse::mutable_warning() {
  // @@protoc_insertion_point(field_mutable:olama.UpsertResponse.warning)
  return _internal_mutable_warning();
}
inline const std::string& UpsertResponse::_internal_warning() const {
  return warning_.GetNoArena();
}
inline void UpsertResponse::_internal_set_warning(const std::string& value) {
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpsertResponse::set_warning(std::string&& value) {
  
  warning_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpsertResponse.warning)
}
inline void UpsertResponse::set_warning(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpsertResponse.warning)
}
inline void UpsertResponse::set_warning(const char* value, size_t size) {
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpsertResponse.warning)
}
inline std::string* UpsertResponse::_internal_mutable_warning() {
  
  return warning_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpsertResponse::release_warning() {
  // @@protoc_insertion_point(field_release:olama.UpsertResponse.warning)
  
  return warning_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpsertResponse::set_allocated_warning(std::string* warning) {
  if (warning != nullptr) {
    
  } else {
    
  }
  warning_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:olama.UpsertResponse.warning)
}

// .olama.EmbeddingExtraInfo embedding_extra_info = 6;
inline bool UpsertResponse::_internal_has_embedding_extra_info() const {
  return this != internal_default_instance() && embedding_extra_info_ != nullptr;
}
inline bool UpsertResponse::has_embedding_extra_info() const {
  return _internal_has_embedding_extra_info();
}
inline void UpsertResponse::clear_embedding_extra_info() {
  if (GetArenaNoVirtual() == nullptr && embedding_extra_info_ != nullptr) {
    delete embedding_extra_info_;
  }
  embedding_extra_info_ = nullptr;
}
inline const ::olama::EmbeddingExtraInfo& UpsertResponse::_internal_embedding_extra_info() const {
  const ::olama::EmbeddingExtraInfo* p = embedding_extra_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::EmbeddingExtraInfo*>(
      &::olama::_EmbeddingExtraInfo_default_instance_);
}
inline const ::olama::EmbeddingExtraInfo& UpsertResponse::embedding_extra_info() const {
  // @@protoc_insertion_point(field_get:olama.UpsertResponse.embedding_extra_info)
  return _internal_embedding_extra_info();
}
inline ::olama::EmbeddingExtraInfo* UpsertResponse::release_embedding_extra_info() {
  // @@protoc_insertion_point(field_release:olama.UpsertResponse.embedding_extra_info)
  
  ::olama::EmbeddingExtraInfo* temp = embedding_extra_info_;
  embedding_extra_info_ = nullptr;
  return temp;
}
inline ::olama::EmbeddingExtraInfo* UpsertResponse::_internal_mutable_embedding_extra_info() {
  
  if (embedding_extra_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::EmbeddingExtraInfo>(GetArenaNoVirtual());
    embedding_extra_info_ = p;
  }
  return embedding_extra_info_;
}
inline ::olama::EmbeddingExtraInfo* UpsertResponse::mutable_embedding_extra_info() {
  // @@protoc_insertion_point(field_mutable:olama.UpsertResponse.embedding_extra_info)
  return _internal_mutable_embedding_extra_info();
}
inline void UpsertResponse::set_allocated_embedding_extra_info(::olama::EmbeddingExtraInfo* embedding_extra_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete embedding_extra_info_;
  }
  if (embedding_extra_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      embedding_extra_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding_extra_info, submessage_arena);
    }
    
  } else {
    
  }
  embedding_extra_info_ = embedding_extra_info;
  // @@protoc_insertion_point(field_set_allocated:olama.UpsertResponse.embedding_extra_info)
}

// -------------------------------------------------------------------

// UpdateRequest

// string database = 1;
inline void UpdateRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.UpdateRequest.database)
  return _internal_database();
}
inline void UpdateRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.UpdateRequest.database)
}
inline std::string* UpdateRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateRequest.database)
  return _internal_mutable_database();
}
inline const std::string& UpdateRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void UpdateRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateRequest.database)
}
inline void UpdateRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateRequest.database)
}
inline void UpdateRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateRequest.database)
}
inline std::string* UpdateRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.UpdateRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateRequest.database)
}

// string collection = 2;
inline void UpdateRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.UpdateRequest.collection)
  return _internal_collection();
}
inline void UpdateRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.UpdateRequest.collection)
}
inline std::string* UpdateRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& UpdateRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void UpdateRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateRequest.collection)
}
inline void UpdateRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateRequest.collection)
}
inline void UpdateRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateRequest.collection)
}
inline std::string* UpdateRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.UpdateRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateRequest.collection)
}

// .olama.QueryCond query = 3;
inline bool UpdateRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool UpdateRequest::has_query() const {
  return _internal_has_query();
}
inline void UpdateRequest::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::olama::QueryCond& UpdateRequest::_internal_query() const {
  const ::olama::QueryCond* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::QueryCond*>(
      &::olama::_QueryCond_default_instance_);
}
inline const ::olama::QueryCond& UpdateRequest::query() const {
  // @@protoc_insertion_point(field_get:olama.UpdateRequest.query)
  return _internal_query();
}
inline ::olama::QueryCond* UpdateRequest::release_query() {
  // @@protoc_insertion_point(field_release:olama.UpdateRequest.query)
  
  ::olama::QueryCond* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::olama::QueryCond* UpdateRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::QueryCond>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::olama::QueryCond* UpdateRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateRequest.query)
  return _internal_mutable_query();
}
inline void UpdateRequest::set_allocated_query(::olama::QueryCond* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateRequest.query)
}

// .olama.Document update = 4;
inline bool UpdateRequest::_internal_has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline bool UpdateRequest::has_update() const {
  return _internal_has_update();
}
inline void UpdateRequest::clear_update() {
  if (GetArenaNoVirtual() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
inline const ::olama::Document& UpdateRequest::_internal_update() const {
  const ::olama::Document* p = update_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::Document*>(
      &::olama::_Document_default_instance_);
}
inline const ::olama::Document& UpdateRequest::update() const {
  // @@protoc_insertion_point(field_get:olama.UpdateRequest.update)
  return _internal_update();
}
inline ::olama::Document* UpdateRequest::release_update() {
  // @@protoc_insertion_point(field_release:olama.UpdateRequest.update)
  
  ::olama::Document* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::olama::Document* UpdateRequest::_internal_mutable_update() {
  
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::Document>(GetArenaNoVirtual());
    update_ = p;
  }
  return update_;
}
inline ::olama::Document* UpdateRequest::mutable_update() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateRequest.update)
  return _internal_mutable_update();
}
inline void UpdateRequest::set_allocated_update(::olama::Document* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateRequest.update)
}

// -------------------------------------------------------------------

// UpdateResponse

// int32 code = 1;
inline void UpdateResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.UpdateResponse.code)
  return _internal_code();
}
inline void UpdateResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void UpdateResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.UpdateResponse.code)
}

// string msg = 2;
inline void UpdateResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.UpdateResponse.msg)
  return _internal_msg();
}
inline void UpdateResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.UpdateResponse.msg)
}
inline std::string* UpdateResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& UpdateResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void UpdateResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateResponse.msg)
}
inline void UpdateResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateResponse.msg)
}
inline void UpdateResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateResponse.msg)
}
inline std::string* UpdateResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.UpdateResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateResponse.msg)
}

// string redirect = 3;
inline void UpdateResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.UpdateResponse.redirect)
  return _internal_redirect();
}
inline void UpdateResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.UpdateResponse.redirect)
}
inline std::string* UpdateResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& UpdateResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void UpdateResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateResponse.redirect)
}
inline void UpdateResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateResponse.redirect)
}
inline void UpdateResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateResponse.redirect)
}
inline std::string* UpdateResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.UpdateResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateResponse.redirect)
}

// uint64 affectedCount = 4;
inline void UpdateResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.UpdateResponse.affectedCount)
  return _internal_affectedcount();
}
inline void UpdateResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void UpdateResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.UpdateResponse.affectedCount)
}

// string warning = 5;
inline void UpdateResponse::clear_warning() {
  warning_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateResponse::warning() const {
  // @@protoc_insertion_point(field_get:olama.UpdateResponse.warning)
  return _internal_warning();
}
inline void UpdateResponse::set_warning(const std::string& value) {
  _internal_set_warning(value);
  // @@protoc_insertion_point(field_set:olama.UpdateResponse.warning)
}
inline std::string* UpdateResponse::mutable_warning() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateResponse.warning)
  return _internal_mutable_warning();
}
inline const std::string& UpdateResponse::_internal_warning() const {
  return warning_.GetNoArena();
}
inline void UpdateResponse::_internal_set_warning(const std::string& value) {
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateResponse::set_warning(std::string&& value) {
  
  warning_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.UpdateResponse.warning)
}
inline void UpdateResponse::set_warning(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.UpdateResponse.warning)
}
inline void UpdateResponse::set_warning(const char* value, size_t size) {
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.UpdateResponse.warning)
}
inline std::string* UpdateResponse::_internal_mutable_warning() {
  
  return warning_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateResponse::release_warning() {
  // @@protoc_insertion_point(field_release:olama.UpdateResponse.warning)
  
  return warning_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateResponse::set_allocated_warning(std::string* warning) {
  if (warning != nullptr) {
    
  } else {
    
  }
  warning_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateResponse.warning)
}

// .olama.EmbeddingExtraInfo embedding_extra_info = 6;
inline bool UpdateResponse::_internal_has_embedding_extra_info() const {
  return this != internal_default_instance() && embedding_extra_info_ != nullptr;
}
inline bool UpdateResponse::has_embedding_extra_info() const {
  return _internal_has_embedding_extra_info();
}
inline void UpdateResponse::clear_embedding_extra_info() {
  if (GetArenaNoVirtual() == nullptr && embedding_extra_info_ != nullptr) {
    delete embedding_extra_info_;
  }
  embedding_extra_info_ = nullptr;
}
inline const ::olama::EmbeddingExtraInfo& UpdateResponse::_internal_embedding_extra_info() const {
  const ::olama::EmbeddingExtraInfo* p = embedding_extra_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::EmbeddingExtraInfo*>(
      &::olama::_EmbeddingExtraInfo_default_instance_);
}
inline const ::olama::EmbeddingExtraInfo& UpdateResponse::embedding_extra_info() const {
  // @@protoc_insertion_point(field_get:olama.UpdateResponse.embedding_extra_info)
  return _internal_embedding_extra_info();
}
inline ::olama::EmbeddingExtraInfo* UpdateResponse::release_embedding_extra_info() {
  // @@protoc_insertion_point(field_release:olama.UpdateResponse.embedding_extra_info)
  
  ::olama::EmbeddingExtraInfo* temp = embedding_extra_info_;
  embedding_extra_info_ = nullptr;
  return temp;
}
inline ::olama::EmbeddingExtraInfo* UpdateResponse::_internal_mutable_embedding_extra_info() {
  
  if (embedding_extra_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::EmbeddingExtraInfo>(GetArenaNoVirtual());
    embedding_extra_info_ = p;
  }
  return embedding_extra_info_;
}
inline ::olama::EmbeddingExtraInfo* UpdateResponse::mutable_embedding_extra_info() {
  // @@protoc_insertion_point(field_mutable:olama.UpdateResponse.embedding_extra_info)
  return _internal_mutable_embedding_extra_info();
}
inline void UpdateResponse::set_allocated_embedding_extra_info(::olama::EmbeddingExtraInfo* embedding_extra_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete embedding_extra_info_;
  }
  if (embedding_extra_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      embedding_extra_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding_extra_info, submessage_arena);
    }
    
  } else {
    
  }
  embedding_extra_info_ = embedding_extra_info;
  // @@protoc_insertion_point(field_set_allocated:olama.UpdateResponse.embedding_extra_info)
}

// -------------------------------------------------------------------

// DeleteRequest

// string database = 1;
inline void DeleteRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.DeleteRequest.database)
  return _internal_database();
}
inline void DeleteRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.DeleteRequest.database)
}
inline std::string* DeleteRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.DeleteRequest.database)
  return _internal_mutable_database();
}
inline const std::string& DeleteRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void DeleteRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DeleteRequest.database)
}
inline void DeleteRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DeleteRequest.database)
}
inline void DeleteRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DeleteRequest.database)
}
inline std::string* DeleteRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.DeleteRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.DeleteRequest.database)
}

// string collection = 2;
inline void DeleteRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.DeleteRequest.collection)
  return _internal_collection();
}
inline void DeleteRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.DeleteRequest.collection)
}
inline std::string* DeleteRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.DeleteRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& DeleteRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void DeleteRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DeleteRequest.collection)
}
inline void DeleteRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DeleteRequest.collection)
}
inline void DeleteRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DeleteRequest.collection)
}
inline std::string* DeleteRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.DeleteRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.DeleteRequest.collection)
}

// .olama.QueryCond query = 3;
inline bool DeleteRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool DeleteRequest::has_query() const {
  return _internal_has_query();
}
inline void DeleteRequest::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::olama::QueryCond& DeleteRequest::_internal_query() const {
  const ::olama::QueryCond* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::QueryCond*>(
      &::olama::_QueryCond_default_instance_);
}
inline const ::olama::QueryCond& DeleteRequest::query() const {
  // @@protoc_insertion_point(field_get:olama.DeleteRequest.query)
  return _internal_query();
}
inline ::olama::QueryCond* DeleteRequest::release_query() {
  // @@protoc_insertion_point(field_release:olama.DeleteRequest.query)
  
  ::olama::QueryCond* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::olama::QueryCond* DeleteRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::QueryCond>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::olama::QueryCond* DeleteRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:olama.DeleteRequest.query)
  return _internal_mutable_query();
}
inline void DeleteRequest::set_allocated_query(::olama::QueryCond* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:olama.DeleteRequest.query)
}

// -------------------------------------------------------------------

// DeleteResponse

// int32 code = 1;
inline void DeleteResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.DeleteResponse.code)
  return _internal_code();
}
inline void DeleteResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DeleteResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.DeleteResponse.code)
}

// string msg = 2;
inline void DeleteResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.DeleteResponse.msg)
  return _internal_msg();
}
inline void DeleteResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.DeleteResponse.msg)
}
inline std::string* DeleteResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.DeleteResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& DeleteResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void DeleteResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DeleteResponse.msg)
}
inline void DeleteResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DeleteResponse.msg)
}
inline void DeleteResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DeleteResponse.msg)
}
inline std::string* DeleteResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.DeleteResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.DeleteResponse.msg)
}

// string redirect = 3;
inline void DeleteResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.DeleteResponse.redirect)
  return _internal_redirect();
}
inline void DeleteResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.DeleteResponse.redirect)
}
inline std::string* DeleteResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.DeleteResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& DeleteResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void DeleteResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DeleteResponse.redirect)
}
inline void DeleteResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DeleteResponse.redirect)
}
inline void DeleteResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DeleteResponse.redirect)
}
inline std::string* DeleteResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.DeleteResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.DeleteResponse.redirect)
}

// uint64 affectedCount = 4;
inline void DeleteResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.DeleteResponse.affectedCount)
  return _internal_affectedcount();
}
inline void DeleteResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void DeleteResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.DeleteResponse.affectedCount)
}

// -------------------------------------------------------------------

// QueryCond

// repeated string documentIds = 1;
inline int QueryCond::_internal_documentids_size() const {
  return documentids_.size();
}
inline int QueryCond::documentids_size() const {
  return _internal_documentids_size();
}
inline void QueryCond::clear_documentids() {
  documentids_.Clear();
}
inline std::string* QueryCond::add_documentids() {
  // @@protoc_insertion_point(field_add_mutable:olama.QueryCond.documentIds)
  return _internal_add_documentids();
}
inline const std::string& QueryCond::_internal_documentids(int index) const {
  return documentids_.Get(index);
}
inline const std::string& QueryCond::documentids(int index) const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.documentIds)
  return _internal_documentids(index);
}
inline std::string* QueryCond::mutable_documentids(int index) {
  // @@protoc_insertion_point(field_mutable:olama.QueryCond.documentIds)
  return documentids_.Mutable(index);
}
inline void QueryCond::set_documentids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.QueryCond.documentIds)
  documentids_.Mutable(index)->assign(value);
}
inline void QueryCond::set_documentids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.QueryCond.documentIds)
  documentids_.Mutable(index)->assign(std::move(value));
}
inline void QueryCond::set_documentids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documentids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.QueryCond.documentIds)
}
inline void QueryCond::set_documentids(int index, const char* value, size_t size) {
  documentids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.QueryCond.documentIds)
}
inline std::string* QueryCond::_internal_add_documentids() {
  return documentids_.Add();
}
inline void QueryCond::add_documentids(const std::string& value) {
  documentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.QueryCond.documentIds)
}
inline void QueryCond::add_documentids(std::string&& value) {
  documentids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.QueryCond.documentIds)
}
inline void QueryCond::add_documentids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.QueryCond.documentIds)
}
inline void QueryCond::add_documentids(const char* value, size_t size) {
  documentids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.QueryCond.documentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryCond::documentids() const {
  // @@protoc_insertion_point(field_list:olama.QueryCond.documentIds)
  return documentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryCond::mutable_documentids() {
  // @@protoc_insertion_point(field_mutable_list:olama.QueryCond.documentIds)
  return &documentids_;
}

// repeated uint64 indexIds = 2;
inline int QueryCond::_internal_indexids_size() const {
  return indexids_.size();
}
inline int QueryCond::indexids_size() const {
  return _internal_indexids_size();
}
inline void QueryCond::clear_indexids() {
  indexids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryCond::_internal_indexids(int index) const {
  return indexids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryCond::indexids(int index) const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.indexIds)
  return _internal_indexids(index);
}
inline void QueryCond::set_indexids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  indexids_.Set(index, value);
  // @@protoc_insertion_point(field_set:olama.QueryCond.indexIds)
}
inline void QueryCond::_internal_add_indexids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  indexids_.Add(value);
}
inline void QueryCond::add_indexids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_indexids(value);
  // @@protoc_insertion_point(field_add:olama.QueryCond.indexIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryCond::_internal_indexids() const {
  return indexids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryCond::indexids() const {
  // @@protoc_insertion_point(field_list:olama.QueryCond.indexIds)
  return _internal_indexids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryCond::_internal_mutable_indexids() {
  return &indexids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryCond::mutable_indexids() {
  // @@protoc_insertion_point(field_mutable_list:olama.QueryCond.indexIds)
  return _internal_mutable_indexids();
}

// bool retrieveVector = 3;
inline void QueryCond::clear_retrievevector() {
  retrievevector_ = false;
}
inline bool QueryCond::_internal_retrievevector() const {
  return retrievevector_;
}
inline bool QueryCond::retrievevector() const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.retrieveVector)
  return _internal_retrievevector();
}
inline void QueryCond::_internal_set_retrievevector(bool value) {
  
  retrievevector_ = value;
}
inline void QueryCond::set_retrievevector(bool value) {
  _internal_set_retrievevector(value);
  // @@protoc_insertion_point(field_set:olama.QueryCond.retrieveVector)
}

// string filter = 4;
inline void QueryCond::clear_filter() {
  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryCond::filter() const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.filter)
  return _internal_filter();
}
inline void QueryCond::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:olama.QueryCond.filter)
}
inline std::string* QueryCond::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:olama.QueryCond.filter)
  return _internal_mutable_filter();
}
inline const std::string& QueryCond::_internal_filter() const {
  return filter_.GetNoArena();
}
inline void QueryCond::_internal_set_filter(const std::string& value) {
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryCond::set_filter(std::string&& value) {
  
  filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.QueryCond.filter)
}
inline void QueryCond::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.QueryCond.filter)
}
inline void QueryCond::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.QueryCond.filter)
}
inline std::string* QueryCond::_internal_mutable_filter() {
  
  return filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryCond::release_filter() {
  // @@protoc_insertion_point(field_release:olama.QueryCond.filter)
  
  return filter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCond::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:olama.QueryCond.filter)
}

// int64 limit = 5;
inline void QueryCond::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryCond::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryCond::limit() const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.limit)
  return _internal_limit();
}
inline void QueryCond::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void QueryCond::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:olama.QueryCond.limit)
}

// int64 offset = 6;
inline void QueryCond::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryCond::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryCond::offset() const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.offset)
  return _internal_offset();
}
inline void QueryCond::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void QueryCond::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:olama.QueryCond.offset)
}

// repeated string outputFields = 7;
inline int QueryCond::_internal_outputfields_size() const {
  return outputfields_.size();
}
inline int QueryCond::outputfields_size() const {
  return _internal_outputfields_size();
}
inline void QueryCond::clear_outputfields() {
  outputfields_.Clear();
}
inline std::string* QueryCond::add_outputfields() {
  // @@protoc_insertion_point(field_add_mutable:olama.QueryCond.outputFields)
  return _internal_add_outputfields();
}
inline const std::string& QueryCond::_internal_outputfields(int index) const {
  return outputfields_.Get(index);
}
inline const std::string& QueryCond::outputfields(int index) const {
  // @@protoc_insertion_point(field_get:olama.QueryCond.outputFields)
  return _internal_outputfields(index);
}
inline std::string* QueryCond::mutable_outputfields(int index) {
  // @@protoc_insertion_point(field_mutable:olama.QueryCond.outputFields)
  return outputfields_.Mutable(index);
}
inline void QueryCond::set_outputfields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.QueryCond.outputFields)
  outputfields_.Mutable(index)->assign(value);
}
inline void QueryCond::set_outputfields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.QueryCond.outputFields)
  outputfields_.Mutable(index)->assign(std::move(value));
}
inline void QueryCond::set_outputfields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputfields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.QueryCond.outputFields)
}
inline void QueryCond::set_outputfields(int index, const char* value, size_t size) {
  outputfields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.QueryCond.outputFields)
}
inline std::string* QueryCond::_internal_add_outputfields() {
  return outputfields_.Add();
}
inline void QueryCond::add_outputfields(const std::string& value) {
  outputfields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.QueryCond.outputFields)
}
inline void QueryCond::add_outputfields(std::string&& value) {
  outputfields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.QueryCond.outputFields)
}
inline void QueryCond::add_outputfields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputfields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.QueryCond.outputFields)
}
inline void QueryCond::add_outputfields(const char* value, size_t size) {
  outputfields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.QueryCond.outputFields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryCond::outputfields() const {
  // @@protoc_insertion_point(field_list:olama.QueryCond.outputFields)
  return outputfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryCond::mutable_outputfields() {
  // @@protoc_insertion_point(field_mutable_list:olama.QueryCond.outputFields)
  return &outputfields_;
}

// -------------------------------------------------------------------

// QueryRequest

// string database = 1;
inline void QueryRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.QueryRequest.database)
  return _internal_database();
}
inline void QueryRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.QueryRequest.database)
}
inline std::string* QueryRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.QueryRequest.database)
  return _internal_mutable_database();
}
inline const std::string& QueryRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void QueryRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.QueryRequest.database)
}
inline void QueryRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.QueryRequest.database)
}
inline void QueryRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.QueryRequest.database)
}
inline std::string* QueryRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.QueryRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.QueryRequest.database)
}

// string collection = 2;
inline void QueryRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.QueryRequest.collection)
  return _internal_collection();
}
inline void QueryRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.QueryRequest.collection)
}
inline std::string* QueryRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.QueryRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& QueryRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void QueryRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.QueryRequest.collection)
}
inline void QueryRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.QueryRequest.collection)
}
inline void QueryRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.QueryRequest.collection)
}
inline std::string* QueryRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.QueryRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.QueryRequest.collection)
}

// .olama.QueryCond query = 3;
inline bool QueryRequest::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool QueryRequest::has_query() const {
  return _internal_has_query();
}
inline void QueryRequest::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::olama::QueryCond& QueryRequest::_internal_query() const {
  const ::olama::QueryCond* p = query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::QueryCond*>(
      &::olama::_QueryCond_default_instance_);
}
inline const ::olama::QueryCond& QueryRequest::query() const {
  // @@protoc_insertion_point(field_get:olama.QueryRequest.query)
  return _internal_query();
}
inline ::olama::QueryCond* QueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:olama.QueryRequest.query)
  
  ::olama::QueryCond* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::olama::QueryCond* QueryRequest::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::QueryCond>(GetArenaNoVirtual());
    query_ = p;
  }
  return query_;
}
inline ::olama::QueryCond* QueryRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:olama.QueryRequest.query)
  return _internal_mutable_query();
}
inline void QueryRequest::set_allocated_query(::olama::QueryCond* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:olama.QueryRequest.query)
}

// string readConsistency = 4;
inline void QueryRequest::clear_readconsistency() {
  readconsistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::readconsistency() const {
  // @@protoc_insertion_point(field_get:olama.QueryRequest.readConsistency)
  return _internal_readconsistency();
}
inline void QueryRequest::set_readconsistency(const std::string& value) {
  _internal_set_readconsistency(value);
  // @@protoc_insertion_point(field_set:olama.QueryRequest.readConsistency)
}
inline std::string* QueryRequest::mutable_readconsistency() {
  // @@protoc_insertion_point(field_mutable:olama.QueryRequest.readConsistency)
  return _internal_mutable_readconsistency();
}
inline const std::string& QueryRequest::_internal_readconsistency() const {
  return readconsistency_.GetNoArena();
}
inline void QueryRequest::_internal_set_readconsistency(const std::string& value) {
  
  readconsistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRequest::set_readconsistency(std::string&& value) {
  
  readconsistency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.QueryRequest.readConsistency)
}
inline void QueryRequest::set_readconsistency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  readconsistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.QueryRequest.readConsistency)
}
inline void QueryRequest::set_readconsistency(const char* value, size_t size) {
  
  readconsistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.QueryRequest.readConsistency)
}
inline std::string* QueryRequest::_internal_mutable_readconsistency() {
  
  return readconsistency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_readconsistency() {
  // @@protoc_insertion_point(field_release:olama.QueryRequest.readConsistency)
  
  return readconsistency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_readconsistency(std::string* readconsistency) {
  if (readconsistency != nullptr) {
    
  } else {
    
  }
  readconsistency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), readconsistency);
  // @@protoc_insertion_point(field_set_allocated:olama.QueryRequest.readConsistency)
}

// -------------------------------------------------------------------

// QueryResponse

// int32 code = 1;
inline void QueryResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.QueryResponse.code)
  return _internal_code();
}
inline void QueryResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void QueryResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.QueryResponse.code)
}

// string msg = 2;
inline void QueryResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.QueryResponse.msg)
  return _internal_msg();
}
inline void QueryResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.QueryResponse.msg)
}
inline std::string* QueryResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.QueryResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& QueryResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void QueryResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.QueryResponse.msg)
}
inline void QueryResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.QueryResponse.msg)
}
inline void QueryResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.QueryResponse.msg)
}
inline std::string* QueryResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.QueryResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.QueryResponse.msg)
}

// string redirect = 3;
inline void QueryResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.QueryResponse.redirect)
  return _internal_redirect();
}
inline void QueryResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.QueryResponse.redirect)
}
inline std::string* QueryResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.QueryResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& QueryResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void QueryResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.QueryResponse.redirect)
}
inline void QueryResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.QueryResponse.redirect)
}
inline void QueryResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.QueryResponse.redirect)
}
inline std::string* QueryResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.QueryResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.QueryResponse.redirect)
}

// repeated .olama.Document documents = 4;
inline int QueryResponse::_internal_documents_size() const {
  return documents_.size();
}
inline int QueryResponse::documents_size() const {
  return _internal_documents_size();
}
inline void QueryResponse::clear_documents() {
  documents_.Clear();
}
inline ::olama::Document* QueryResponse::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:olama.QueryResponse.documents)
  return documents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >*
QueryResponse::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:olama.QueryResponse.documents)
  return &documents_;
}
inline const ::olama::Document& QueryResponse::_internal_documents(int index) const {
  return documents_.Get(index);
}
inline const ::olama::Document& QueryResponse::documents(int index) const {
  // @@protoc_insertion_point(field_get:olama.QueryResponse.documents)
  return _internal_documents(index);
}
inline ::olama::Document* QueryResponse::_internal_add_documents() {
  return documents_.Add();
}
inline ::olama::Document* QueryResponse::add_documents() {
  // @@protoc_insertion_point(field_add:olama.QueryResponse.documents)
  return _internal_add_documents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >&
QueryResponse::documents() const {
  // @@protoc_insertion_point(field_list:olama.QueryResponse.documents)
  return documents_;
}

// uint64 count = 5;
inline void QueryResponse::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryResponse::count() const {
  // @@protoc_insertion_point(field_get:olama.QueryResponse.count)
  return _internal_count();
}
inline void QueryResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void QueryResponse::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:olama.QueryResponse.count)
}

// -------------------------------------------------------------------

// SearchResult

// repeated .olama.Document documents = 1;
inline int SearchResult::_internal_documents_size() const {
  return documents_.size();
}
inline int SearchResult::documents_size() const {
  return _internal_documents_size();
}
inline void SearchResult::clear_documents() {
  documents_.Clear();
}
inline ::olama::Document* SearchResult::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:olama.SearchResult.documents)
  return documents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >*
SearchResult::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:olama.SearchResult.documents)
  return &documents_;
}
inline const ::olama::Document& SearchResult::_internal_documents(int index) const {
  return documents_.Get(index);
}
inline const ::olama::Document& SearchResult::documents(int index) const {
  // @@protoc_insertion_point(field_get:olama.SearchResult.documents)
  return _internal_documents(index);
}
inline ::olama::Document* SearchResult::_internal_add_documents() {
  return documents_.Add();
}
inline ::olama::Document* SearchResult::add_documents() {
  // @@protoc_insertion_point(field_add:olama.SearchResult.documents)
  return _internal_add_documents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::Document >&
SearchResult::documents() const {
  // @@protoc_insertion_point(field_list:olama.SearchResult.documents)
  return documents_;
}

// -------------------------------------------------------------------

// SearchParams

// uint32 nprobe = 1;
inline void SearchParams::clear_nprobe() {
  nprobe_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchParams::_internal_nprobe() const {
  return nprobe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchParams::nprobe() const {
  // @@protoc_insertion_point(field_get:olama.SearchParams.nprobe)
  return _internal_nprobe();
}
inline void SearchParams::_internal_set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nprobe_ = value;
}
inline void SearchParams::set_nprobe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nprobe(value);
  // @@protoc_insertion_point(field_set:olama.SearchParams.nprobe)
}

// uint32 ef = 2;
inline void SearchParams::clear_ef() {
  ef_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchParams::_internal_ef() const {
  return ef_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchParams::ef() const {
  // @@protoc_insertion_point(field_get:olama.SearchParams.ef)
  return _internal_ef();
}
inline void SearchParams::_internal_set_ef(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ef_ = value;
}
inline void SearchParams::set_ef(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ef(value);
  // @@protoc_insertion_point(field_set:olama.SearchParams.ef)
}

// float radius = 3;
inline void SearchParams::clear_radius() {
  radius_ = 0;
}
inline float SearchParams::_internal_radius() const {
  return radius_;
}
inline float SearchParams::radius() const {
  // @@protoc_insertion_point(field_get:olama.SearchParams.radius)
  return _internal_radius();
}
inline void SearchParams::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void SearchParams::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:olama.SearchParams.radius)
}

// -------------------------------------------------------------------

// VectorArray

// repeated float vector = 1;
inline int VectorArray::_internal_vector_size() const {
  return vector_.size();
}
inline int VectorArray::vector_size() const {
  return _internal_vector_size();
}
inline void VectorArray::clear_vector() {
  vector_.Clear();
}
inline float VectorArray::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline float VectorArray::vector(int index) const {
  // @@protoc_insertion_point(field_get:olama.VectorArray.vector)
  return _internal_vector(index);
}
inline void VectorArray::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:olama.VectorArray.vector)
}
inline void VectorArray::_internal_add_vector(float value) {
  vector_.Add(value);
}
inline void VectorArray::add_vector(float value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:olama.VectorArray.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorArray::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorArray::vector() const {
  // @@protoc_insertion_point(field_list:olama.VectorArray.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorArray::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorArray::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:olama.VectorArray.vector)
  return _internal_mutable_vector();
}

// -------------------------------------------------------------------

// SearchCond

// repeated .olama.VectorArray vectors = 1;
inline int SearchCond::_internal_vectors_size() const {
  return vectors_.size();
}
inline int SearchCond::vectors_size() const {
  return _internal_vectors_size();
}
inline void SearchCond::clear_vectors() {
  vectors_.Clear();
}
inline ::olama::VectorArray* SearchCond::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:olama.SearchCond.vectors)
  return vectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::VectorArray >*
SearchCond::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:olama.SearchCond.vectors)
  return &vectors_;
}
inline const ::olama::VectorArray& SearchCond::_internal_vectors(int index) const {
  return vectors_.Get(index);
}
inline const ::olama::VectorArray& SearchCond::vectors(int index) const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.vectors)
  return _internal_vectors(index);
}
inline ::olama::VectorArray* SearchCond::_internal_add_vectors() {
  return vectors_.Add();
}
inline ::olama::VectorArray* SearchCond::add_vectors() {
  // @@protoc_insertion_point(field_add:olama.SearchCond.vectors)
  return _internal_add_vectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::VectorArray >&
SearchCond::vectors() const {
  // @@protoc_insertion_point(field_list:olama.SearchCond.vectors)
  return vectors_;
}

// repeated string documentIds = 2;
inline int SearchCond::_internal_documentids_size() const {
  return documentids_.size();
}
inline int SearchCond::documentids_size() const {
  return _internal_documentids_size();
}
inline void SearchCond::clear_documentids() {
  documentids_.Clear();
}
inline std::string* SearchCond::add_documentids() {
  // @@protoc_insertion_point(field_add_mutable:olama.SearchCond.documentIds)
  return _internal_add_documentids();
}
inline const std::string& SearchCond::_internal_documentids(int index) const {
  return documentids_.Get(index);
}
inline const std::string& SearchCond::documentids(int index) const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.documentIds)
  return _internal_documentids(index);
}
inline std::string* SearchCond::mutable_documentids(int index) {
  // @@protoc_insertion_point(field_mutable:olama.SearchCond.documentIds)
  return documentids_.Mutable(index);
}
inline void SearchCond::set_documentids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.SearchCond.documentIds)
  documentids_.Mutable(index)->assign(value);
}
inline void SearchCond::set_documentids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.SearchCond.documentIds)
  documentids_.Mutable(index)->assign(std::move(value));
}
inline void SearchCond::set_documentids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documentids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.SearchCond.documentIds)
}
inline void SearchCond::set_documentids(int index, const char* value, size_t size) {
  documentids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.SearchCond.documentIds)
}
inline std::string* SearchCond::_internal_add_documentids() {
  return documentids_.Add();
}
inline void SearchCond::add_documentids(const std::string& value) {
  documentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.SearchCond.documentIds)
}
inline void SearchCond::add_documentids(std::string&& value) {
  documentids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.SearchCond.documentIds)
}
inline void SearchCond::add_documentids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.SearchCond.documentIds)
}
inline void SearchCond::add_documentids(const char* value, size_t size) {
  documentids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.SearchCond.documentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchCond::documentids() const {
  // @@protoc_insertion_point(field_list:olama.SearchCond.documentIds)
  return documentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchCond::mutable_documentids() {
  // @@protoc_insertion_point(field_mutable_list:olama.SearchCond.documentIds)
  return &documentids_;
}

// .olama.SearchParams params = 3;
inline bool SearchCond::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool SearchCond::has_params() const {
  return _internal_has_params();
}
inline void SearchCond::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::olama::SearchParams& SearchCond::_internal_params() const {
  const ::olama::SearchParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::SearchParams*>(
      &::olama::_SearchParams_default_instance_);
}
inline const ::olama::SearchParams& SearchCond::params() const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.params)
  return _internal_params();
}
inline ::olama::SearchParams* SearchCond::release_params() {
  // @@protoc_insertion_point(field_release:olama.SearchCond.params)
  
  ::olama::SearchParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::olama::SearchParams* SearchCond::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::SearchParams>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline ::olama::SearchParams* SearchCond::mutable_params() {
  // @@protoc_insertion_point(field_mutable:olama.SearchCond.params)
  return _internal_mutable_params();
}
inline void SearchCond::set_allocated_params(::olama::SearchParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:olama.SearchCond.params)
}

// string filter = 4;
inline void SearchCond::clear_filter() {
  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchCond::filter() const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.filter)
  return _internal_filter();
}
inline void SearchCond::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:olama.SearchCond.filter)
}
inline std::string* SearchCond::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:olama.SearchCond.filter)
  return _internal_mutable_filter();
}
inline const std::string& SearchCond::_internal_filter() const {
  return filter_.GetNoArena();
}
inline void SearchCond::_internal_set_filter(const std::string& value) {
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchCond::set_filter(std::string&& value) {
  
  filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchCond.filter)
}
inline void SearchCond::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchCond.filter)
}
inline void SearchCond::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchCond.filter)
}
inline std::string* SearchCond::_internal_mutable_filter() {
  
  return filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchCond::release_filter() {
  // @@protoc_insertion_point(field_release:olama.SearchCond.filter)
  
  return filter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchCond::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchCond.filter)
}

// bool retrieveVector = 5;
inline void SearchCond::clear_retrievevector() {
  retrievevector_ = false;
}
inline bool SearchCond::_internal_retrievevector() const {
  return retrievevector_;
}
inline bool SearchCond::retrievevector() const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.retrieveVector)
  return _internal_retrievevector();
}
inline void SearchCond::_internal_set_retrievevector(bool value) {
  
  retrievevector_ = value;
}
inline void SearchCond::set_retrievevector(bool value) {
  _internal_set_retrievevector(value);
  // @@protoc_insertion_point(field_set:olama.SearchCond.retrieveVector)
}

// uint32 limit = 6;
inline void SearchCond::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchCond::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchCond::limit() const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.limit)
  return _internal_limit();
}
inline void SearchCond::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void SearchCond::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:olama.SearchCond.limit)
}

// repeated string outputfields = 7;
inline int SearchCond::_internal_outputfields_size() const {
  return outputfields_.size();
}
inline int SearchCond::outputfields_size() const {
  return _internal_outputfields_size();
}
inline void SearchCond::clear_outputfields() {
  outputfields_.Clear();
}
inline std::string* SearchCond::add_outputfields() {
  // @@protoc_insertion_point(field_add_mutable:olama.SearchCond.outputfields)
  return _internal_add_outputfields();
}
inline const std::string& SearchCond::_internal_outputfields(int index) const {
  return outputfields_.Get(index);
}
inline const std::string& SearchCond::outputfields(int index) const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.outputfields)
  return _internal_outputfields(index);
}
inline std::string* SearchCond::mutable_outputfields(int index) {
  // @@protoc_insertion_point(field_mutable:olama.SearchCond.outputfields)
  return outputfields_.Mutable(index);
}
inline void SearchCond::set_outputfields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.SearchCond.outputfields)
  outputfields_.Mutable(index)->assign(value);
}
inline void SearchCond::set_outputfields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.SearchCond.outputfields)
  outputfields_.Mutable(index)->assign(std::move(value));
}
inline void SearchCond::set_outputfields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputfields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.SearchCond.outputfields)
}
inline void SearchCond::set_outputfields(int index, const char* value, size_t size) {
  outputfields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.SearchCond.outputfields)
}
inline std::string* SearchCond::_internal_add_outputfields() {
  return outputfields_.Add();
}
inline void SearchCond::add_outputfields(const std::string& value) {
  outputfields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.SearchCond.outputfields)
}
inline void SearchCond::add_outputfields(std::string&& value) {
  outputfields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.SearchCond.outputfields)
}
inline void SearchCond::add_outputfields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputfields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.SearchCond.outputfields)
}
inline void SearchCond::add_outputfields(const char* value, size_t size) {
  outputfields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.SearchCond.outputfields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchCond::outputfields() const {
  // @@protoc_insertion_point(field_list:olama.SearchCond.outputfields)
  return outputfields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchCond::mutable_outputfields() {
  // @@protoc_insertion_point(field_mutable_list:olama.SearchCond.outputfields)
  return &outputfields_;
}

// repeated string embeddingItems = 8;
inline int SearchCond::_internal_embeddingitems_size() const {
  return embeddingitems_.size();
}
inline int SearchCond::embeddingitems_size() const {
  return _internal_embeddingitems_size();
}
inline void SearchCond::clear_embeddingitems() {
  embeddingitems_.Clear();
}
inline std::string* SearchCond::add_embeddingitems() {
  // @@protoc_insertion_point(field_add_mutable:olama.SearchCond.embeddingItems)
  return _internal_add_embeddingitems();
}
inline const std::string& SearchCond::_internal_embeddingitems(int index) const {
  return embeddingitems_.Get(index);
}
inline const std::string& SearchCond::embeddingitems(int index) const {
  // @@protoc_insertion_point(field_get:olama.SearchCond.embeddingItems)
  return _internal_embeddingitems(index);
}
inline std::string* SearchCond::mutable_embeddingitems(int index) {
  // @@protoc_insertion_point(field_mutable:olama.SearchCond.embeddingItems)
  return embeddingitems_.Mutable(index);
}
inline void SearchCond::set_embeddingitems(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.SearchCond.embeddingItems)
  embeddingitems_.Mutable(index)->assign(value);
}
inline void SearchCond::set_embeddingitems(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.SearchCond.embeddingItems)
  embeddingitems_.Mutable(index)->assign(std::move(value));
}
inline void SearchCond::set_embeddingitems(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  embeddingitems_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.SearchCond.embeddingItems)
}
inline void SearchCond::set_embeddingitems(int index, const char* value, size_t size) {
  embeddingitems_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.SearchCond.embeddingItems)
}
inline std::string* SearchCond::_internal_add_embeddingitems() {
  return embeddingitems_.Add();
}
inline void SearchCond::add_embeddingitems(const std::string& value) {
  embeddingitems_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.SearchCond.embeddingItems)
}
inline void SearchCond::add_embeddingitems(std::string&& value) {
  embeddingitems_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.SearchCond.embeddingItems)
}
inline void SearchCond::add_embeddingitems(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  embeddingitems_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.SearchCond.embeddingItems)
}
inline void SearchCond::add_embeddingitems(const char* value, size_t size) {
  embeddingitems_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.SearchCond.embeddingItems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchCond::embeddingitems() const {
  // @@protoc_insertion_point(field_list:olama.SearchCond.embeddingItems)
  return embeddingitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchCond::mutable_embeddingitems() {
  // @@protoc_insertion_point(field_mutable_list:olama.SearchCond.embeddingItems)
  return &embeddingitems_;
}

// -------------------------------------------------------------------

// SearchRequest

// string database = 1;
inline void SearchRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.SearchRequest.database)
  return _internal_database();
}
inline void SearchRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.SearchRequest.database)
}
inline std::string* SearchRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.SearchRequest.database)
  return _internal_mutable_database();
}
inline const std::string& SearchRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void SearchRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchRequest.database)
}
inline void SearchRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchRequest.database)
}
inline void SearchRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchRequest.database)
}
inline std::string* SearchRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.SearchRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchRequest.database)
}

// string collection = 2;
inline void SearchRequest::clear_collection() {
  collection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::collection() const {
  // @@protoc_insertion_point(field_get:olama.SearchRequest.collection)
  return _internal_collection();
}
inline void SearchRequest::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:olama.SearchRequest.collection)
}
inline std::string* SearchRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:olama.SearchRequest.collection)
  return _internal_mutable_collection();
}
inline const std::string& SearchRequest::_internal_collection() const {
  return collection_.GetNoArena();
}
inline void SearchRequest::_internal_set_collection(const std::string& value) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequest::set_collection(std::string&& value) {
  
  collection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchRequest.collection)
}
inline void SearchRequest::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchRequest.collection)
}
inline void SearchRequest::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchRequest.collection)
}
inline std::string* SearchRequest::_internal_mutable_collection() {
  
  return collection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_collection() {
  // @@protoc_insertion_point(field_release:olama.SearchRequest.collection)
  
  return collection_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchRequest.collection)
}

// .olama.SearchCond search = 3;
inline bool SearchRequest::_internal_has_search() const {
  return this != internal_default_instance() && search_ != nullptr;
}
inline bool SearchRequest::has_search() const {
  return _internal_has_search();
}
inline void SearchRequest::clear_search() {
  if (GetArenaNoVirtual() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
inline const ::olama::SearchCond& SearchRequest::_internal_search() const {
  const ::olama::SearchCond* p = search_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::SearchCond*>(
      &::olama::_SearchCond_default_instance_);
}
inline const ::olama::SearchCond& SearchRequest::search() const {
  // @@protoc_insertion_point(field_get:olama.SearchRequest.search)
  return _internal_search();
}
inline ::olama::SearchCond* SearchRequest::release_search() {
  // @@protoc_insertion_point(field_release:olama.SearchRequest.search)
  
  ::olama::SearchCond* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::olama::SearchCond* SearchRequest::_internal_mutable_search() {
  
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::SearchCond>(GetArenaNoVirtual());
    search_ = p;
  }
  return search_;
}
inline ::olama::SearchCond* SearchRequest::mutable_search() {
  // @@protoc_insertion_point(field_mutable:olama.SearchRequest.search)
  return _internal_mutable_search();
}
inline void SearchRequest::set_allocated_search(::olama::SearchCond* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete search_;
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    
  } else {
    
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:olama.SearchRequest.search)
}

// string readConsistency = 4;
inline void SearchRequest::clear_readconsistency() {
  readconsistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::readconsistency() const {
  // @@protoc_insertion_point(field_get:olama.SearchRequest.readConsistency)
  return _internal_readconsistency();
}
inline void SearchRequest::set_readconsistency(const std::string& value) {
  _internal_set_readconsistency(value);
  // @@protoc_insertion_point(field_set:olama.SearchRequest.readConsistency)
}
inline std::string* SearchRequest::mutable_readconsistency() {
  // @@protoc_insertion_point(field_mutable:olama.SearchRequest.readConsistency)
  return _internal_mutable_readconsistency();
}
inline const std::string& SearchRequest::_internal_readconsistency() const {
  return readconsistency_.GetNoArena();
}
inline void SearchRequest::_internal_set_readconsistency(const std::string& value) {
  
  readconsistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequest::set_readconsistency(std::string&& value) {
  
  readconsistency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchRequest.readConsistency)
}
inline void SearchRequest::set_readconsistency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  readconsistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchRequest.readConsistency)
}
inline void SearchRequest::set_readconsistency(const char* value, size_t size) {
  
  readconsistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchRequest.readConsistency)
}
inline std::string* SearchRequest::_internal_mutable_readconsistency() {
  
  return readconsistency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_readconsistency() {
  // @@protoc_insertion_point(field_release:olama.SearchRequest.readConsistency)
  
  return readconsistency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_readconsistency(std::string* readconsistency) {
  if (readconsistency != nullptr) {
    
  } else {
    
  }
  readconsistency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), readconsistency);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchRequest.readConsistency)
}

// -------------------------------------------------------------------

// Filter

// string expr = 1;
inline void Filter::clear_expr() {
  expr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Filter::expr() const {
  // @@protoc_insertion_point(field_get:olama.Filter.expr)
  return _internal_expr();
}
inline void Filter::set_expr(const std::string& value) {
  _internal_set_expr(value);
  // @@protoc_insertion_point(field_set:olama.Filter.expr)
}
inline std::string* Filter::mutable_expr() {
  // @@protoc_insertion_point(field_mutable:olama.Filter.expr)
  return _internal_mutable_expr();
}
inline const std::string& Filter::_internal_expr() const {
  return expr_.GetNoArena();
}
inline void Filter::_internal_set_expr(const std::string& value) {
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Filter::set_expr(std::string&& value) {
  
  expr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.Filter.expr)
}
inline void Filter::set_expr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.Filter.expr)
}
inline void Filter::set_expr(const char* value, size_t size) {
  
  expr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.Filter.expr)
}
inline std::string* Filter::_internal_mutable_expr() {
  
  return expr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Filter::release_expr() {
  // @@protoc_insertion_point(field_release:olama.Filter.expr)
  
  return expr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Filter::set_allocated_expr(std::string* expr) {
  if (expr != nullptr) {
    
  } else {
    
  }
  expr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expr);
  // @@protoc_insertion_point(field_set_allocated:olama.Filter.expr)
}

// float radius = 2;
inline void Filter::clear_radius() {
  radius_ = 0;
}
inline float Filter::_internal_radius() const {
  return radius_;
}
inline float Filter::radius() const {
  // @@protoc_insertion_point(field_get:olama.Filter.radius)
  return _internal_radius();
}
inline void Filter::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void Filter::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:olama.Filter.radius)
}

// uint32 size = 3;
inline void Filter::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filter::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filter::size() const {
  // @@protoc_insertion_point(field_get:olama.Filter.size)
  return _internal_size();
}
inline void Filter::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Filter::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:olama.Filter.size)
}

// -------------------------------------------------------------------

// SearchResponse

// int32 code = 1;
inline void SearchResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.SearchResponse.code)
  return _internal_code();
}
inline void SearchResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SearchResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.SearchResponse.code)
}

// string msg = 2;
inline void SearchResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.SearchResponse.msg)
  return _internal_msg();
}
inline void SearchResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.SearchResponse.msg)
}
inline std::string* SearchResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.SearchResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& SearchResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SearchResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchResponse.msg)
}
inline void SearchResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchResponse.msg)
}
inline void SearchResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchResponse.msg)
}
inline std::string* SearchResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.SearchResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchResponse.msg)
}

// string redirect = 3;
inline void SearchResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.SearchResponse.redirect)
  return _internal_redirect();
}
inline void SearchResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.SearchResponse.redirect)
}
inline std::string* SearchResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.SearchResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& SearchResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void SearchResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchResponse.redirect)
}
inline void SearchResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchResponse.redirect)
}
inline void SearchResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchResponse.redirect)
}
inline std::string* SearchResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.SearchResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchResponse.redirect)
}

// repeated .olama.SearchResult results = 4;
inline int SearchResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::olama::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:olama.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:olama.SearchResponse.results)
  return &results_;
}
inline const ::olama::SearchResult& SearchResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::olama::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:olama.SearchResponse.results)
  return _internal_results(index);
}
inline ::olama::SearchResult* SearchResponse::_internal_add_results() {
  return results_.Add();
}
inline ::olama::SearchResult* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add:olama.SearchResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::olama::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:olama.SearchResponse.results)
  return results_;
}

// string warning = 5;
inline void SearchResponse::clear_warning() {
  warning_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchResponse::warning() const {
  // @@protoc_insertion_point(field_get:olama.SearchResponse.warning)
  return _internal_warning();
}
inline void SearchResponse::set_warning(const std::string& value) {
  _internal_set_warning(value);
  // @@protoc_insertion_point(field_set:olama.SearchResponse.warning)
}
inline std::string* SearchResponse::mutable_warning() {
  // @@protoc_insertion_point(field_mutable:olama.SearchResponse.warning)
  return _internal_mutable_warning();
}
inline const std::string& SearchResponse::_internal_warning() const {
  return warning_.GetNoArena();
}
inline void SearchResponse::_internal_set_warning(const std::string& value) {
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchResponse::set_warning(std::string&& value) {
  
  warning_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.SearchResponse.warning)
}
inline void SearchResponse::set_warning(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.SearchResponse.warning)
}
inline void SearchResponse::set_warning(const char* value, size_t size) {
  
  warning_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.SearchResponse.warning)
}
inline std::string* SearchResponse::_internal_mutable_warning() {
  
  return warning_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchResponse::release_warning() {
  // @@protoc_insertion_point(field_release:olama.SearchResponse.warning)
  
  return warning_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResponse::set_allocated_warning(std::string* warning) {
  if (warning != nullptr) {
    
  } else {
    
  }
  warning_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warning);
  // @@protoc_insertion_point(field_set_allocated:olama.SearchResponse.warning)
}

// .olama.EmbeddingExtraInfo embedding_extra_info = 6;
inline bool SearchResponse::_internal_has_embedding_extra_info() const {
  return this != internal_default_instance() && embedding_extra_info_ != nullptr;
}
inline bool SearchResponse::has_embedding_extra_info() const {
  return _internal_has_embedding_extra_info();
}
inline void SearchResponse::clear_embedding_extra_info() {
  if (GetArenaNoVirtual() == nullptr && embedding_extra_info_ != nullptr) {
    delete embedding_extra_info_;
  }
  embedding_extra_info_ = nullptr;
}
inline const ::olama::EmbeddingExtraInfo& SearchResponse::_internal_embedding_extra_info() const {
  const ::olama::EmbeddingExtraInfo* p = embedding_extra_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::olama::EmbeddingExtraInfo*>(
      &::olama::_EmbeddingExtraInfo_default_instance_);
}
inline const ::olama::EmbeddingExtraInfo& SearchResponse::embedding_extra_info() const {
  // @@protoc_insertion_point(field_get:olama.SearchResponse.embedding_extra_info)
  return _internal_embedding_extra_info();
}
inline ::olama::EmbeddingExtraInfo* SearchResponse::release_embedding_extra_info() {
  // @@protoc_insertion_point(field_release:olama.SearchResponse.embedding_extra_info)
  
  ::olama::EmbeddingExtraInfo* temp = embedding_extra_info_;
  embedding_extra_info_ = nullptr;
  return temp;
}
inline ::olama::EmbeddingExtraInfo* SearchResponse::_internal_mutable_embedding_extra_info() {
  
  if (embedding_extra_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::olama::EmbeddingExtraInfo>(GetArenaNoVirtual());
    embedding_extra_info_ = p;
  }
  return embedding_extra_info_;
}
inline ::olama::EmbeddingExtraInfo* SearchResponse::mutable_embedding_extra_info() {
  // @@protoc_insertion_point(field_mutable:olama.SearchResponse.embedding_extra_info)
  return _internal_mutable_embedding_extra_info();
}
inline void SearchResponse::set_allocated_embedding_extra_info(::olama::EmbeddingExtraInfo* embedding_extra_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete embedding_extra_info_;
  }
  if (embedding_extra_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      embedding_extra_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedding_extra_info, submessage_arena);
    }
    
  } else {
    
  }
  embedding_extra_info_ = embedding_extra_info;
  // @@protoc_insertion_point(field_set_allocated:olama.SearchResponse.embedding_extra_info)
}

// -------------------------------------------------------------------

// DatabaseRequest

// string database = 1;
inline void DatabaseRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DatabaseRequest::database() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseRequest.database)
  return _internal_database();
}
inline void DatabaseRequest::set_database(const std::string& value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseRequest.database)
}
inline std::string* DatabaseRequest::mutable_database() {
  // @@protoc_insertion_point(field_mutable:olama.DatabaseRequest.database)
  return _internal_mutable_database();
}
inline const std::string& DatabaseRequest::_internal_database() const {
  return database_.GetNoArena();
}
inline void DatabaseRequest::_internal_set_database(const std::string& value) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DatabaseRequest::set_database(std::string&& value) {
  
  database_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DatabaseRequest.database)
}
inline void DatabaseRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DatabaseRequest.database)
}
inline void DatabaseRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DatabaseRequest.database)
}
inline std::string* DatabaseRequest::_internal_mutable_database() {
  
  return database_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DatabaseRequest::release_database() {
  // @@protoc_insertion_point(field_release:olama.DatabaseRequest.database)
  
  return database_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseRequest::set_allocated_database(std::string* database) {
  if (database != nullptr) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:olama.DatabaseRequest.database)
}

// .olama.DataType dbType = 2;
inline void DatabaseRequest::clear_dbtype() {
  dbtype_ = 0;
}
inline ::olama::DataType DatabaseRequest::_internal_dbtype() const {
  return static_cast< ::olama::DataType >(dbtype_);
}
inline ::olama::DataType DatabaseRequest::dbtype() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseRequest.dbType)
  return _internal_dbtype();
}
inline void DatabaseRequest::_internal_set_dbtype(::olama::DataType value) {
  
  dbtype_ = value;
}
inline void DatabaseRequest::set_dbtype(::olama::DataType value) {
  _internal_set_dbtype(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseRequest.dbType)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DatabaseResponse

// int32 code = 1;
inline void DatabaseResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatabaseResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatabaseResponse::code() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseResponse.code)
  return _internal_code();
}
inline void DatabaseResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DatabaseResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseResponse.code)
}

// string msg = 2;
inline void DatabaseResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DatabaseResponse::msg() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseResponse.msg)
  return _internal_msg();
}
inline void DatabaseResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseResponse.msg)
}
inline std::string* DatabaseResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:olama.DatabaseResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& DatabaseResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void DatabaseResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DatabaseResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DatabaseResponse.msg)
}
inline void DatabaseResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DatabaseResponse.msg)
}
inline void DatabaseResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DatabaseResponse.msg)
}
inline std::string* DatabaseResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DatabaseResponse::release_msg() {
  // @@protoc_insertion_point(field_release:olama.DatabaseResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:olama.DatabaseResponse.msg)
}

// string redirect = 3;
inline void DatabaseResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DatabaseResponse::redirect() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseResponse.redirect)
  return _internal_redirect();
}
inline void DatabaseResponse::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseResponse.redirect)
}
inline std::string* DatabaseResponse::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:olama.DatabaseResponse.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& DatabaseResponse::_internal_redirect() const {
  return redirect_.GetNoArena();
}
inline void DatabaseResponse::_internal_set_redirect(const std::string& value) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DatabaseResponse::set_redirect(std::string&& value) {
  
  redirect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:olama.DatabaseResponse.redirect)
}
inline void DatabaseResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:olama.DatabaseResponse.redirect)
}
inline void DatabaseResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:olama.DatabaseResponse.redirect)
}
inline std::string* DatabaseResponse::_internal_mutable_redirect() {
  
  return redirect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DatabaseResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:olama.DatabaseResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseResponse::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:olama.DatabaseResponse.redirect)
}

// repeated string databases = 4;
inline int DatabaseResponse::_internal_databases_size() const {
  return databases_.size();
}
inline int DatabaseResponse::databases_size() const {
  return _internal_databases_size();
}
inline void DatabaseResponse::clear_databases() {
  databases_.Clear();
}
inline std::string* DatabaseResponse::add_databases() {
  // @@protoc_insertion_point(field_add_mutable:olama.DatabaseResponse.databases)
  return _internal_add_databases();
}
inline const std::string& DatabaseResponse::_internal_databases(int index) const {
  return databases_.Get(index);
}
inline const std::string& DatabaseResponse::databases(int index) const {
  // @@protoc_insertion_point(field_get:olama.DatabaseResponse.databases)
  return _internal_databases(index);
}
inline std::string* DatabaseResponse::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:olama.DatabaseResponse.databases)
  return databases_.Mutable(index);
}
inline void DatabaseResponse::set_databases(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:olama.DatabaseResponse.databases)
  databases_.Mutable(index)->assign(value);
}
inline void DatabaseResponse::set_databases(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:olama.DatabaseResponse.databases)
  databases_.Mutable(index)->assign(std::move(value));
}
inline void DatabaseResponse::set_databases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  databases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:olama.DatabaseResponse.databases)
}
inline void DatabaseResponse::set_databases(int index, const char* value, size_t size) {
  databases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:olama.DatabaseResponse.databases)
}
inline std::string* DatabaseResponse::_internal_add_databases() {
  return databases_.Add();
}
inline void DatabaseResponse::add_databases(const std::string& value) {
  databases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:olama.DatabaseResponse.databases)
}
inline void DatabaseResponse::add_databases(std::string&& value) {
  databases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:olama.DatabaseResponse.databases)
}
inline void DatabaseResponse::add_databases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  databases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:olama.DatabaseResponse.databases)
}
inline void DatabaseResponse::add_databases(const char* value, size_t size) {
  databases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:olama.DatabaseResponse.databases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DatabaseResponse::databases() const {
  // @@protoc_insertion_point(field_list:olama.DatabaseResponse.databases)
  return databases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DatabaseResponse::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:olama.DatabaseResponse.databases)
  return &databases_;
}

// uint64 affectedCount = 5;
inline void DatabaseResponse::clear_affectedcount() {
  affectedcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DatabaseResponse::_internal_affectedcount() const {
  return affectedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DatabaseResponse::affectedcount() const {
  // @@protoc_insertion_point(field_get:olama.DatabaseResponse.affectedCount)
  return _internal_affectedcount();
}
inline void DatabaseResponse::_internal_set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  affectedcount_ = value;
}
inline void DatabaseResponse::set_affectedcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_affectedcount(value);
  // @@protoc_insertion_point(field_set:olama.DatabaseResponse.affectedCount)
}

// map<string, .olama.DatabaseItem> info = 6;
inline int DatabaseResponse::_internal_info_size() const {
  return info_.size();
}
inline int DatabaseResponse::info_size() const {
  return _internal_info_size();
}
inline void DatabaseResponse::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >&
DatabaseResponse::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >&
DatabaseResponse::info() const {
  // @@protoc_insertion_point(field_map:olama.DatabaseResponse.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >*
DatabaseResponse::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::olama::DatabaseItem >*
DatabaseResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:olama.DatabaseResponse.info)
  return _internal_mutable_info();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace olama

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::olama::ShardDataState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::olama::ShardDataState>() {
  return ::olama::ShardDataState_descriptor();
}
template <> struct is_proto_enum< ::olama::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::olama::DataType>() {
  return ::olama::DataType_descriptor();
}
template <> struct is_proto_enum< ::olama::IndexMetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::olama::IndexMetricType>() {
  return ::olama::IndexMetricType_descriptor();
}
template <> struct is_proto_enum< ::olama::IndexEngineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::olama::IndexEngineType>() {
  return ::olama::IndexEngineType_descriptor();
}
template <> struct is_proto_enum< ::olama::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::olama::FieldType>() {
  return ::olama::FieldType_descriptor();
}
template <> struct is_proto_enum< ::olama::FieldElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::olama::FieldElementType>() {
  return ::olama::FieldElementType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_olama_2eproto
